[
  {
    "db_id": "department_management",
    "query": "SELECT count(*) FROM head WHERE age  >  56",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "head",
      "WHERE",
      "age",
      ">",
      "56"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "head",
      "where",
      "age",
      ">",
      "value"
    ],
    "question": "Count the heads of the departments older than 56?",
    "question_toks": [
      "How",
      "many",
      "heads",
      "of",
      "the",
      "departments",
      "are",
      "older",
      "than",
      "56",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[3, [0, [0, 0, false], null]]]],
      "where": [[false, 3, [0, [0, 10, false], null], 56.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "department:  division of a large organization dealing with a specific area of activity; year is the year of department creation. num_employees is the total number of employees in the department; head: a person who is responsible for leading the department. name, born_state which is a state was born. age; management: tempotrary_acting is 'yes' if an employee is temporarily the head of the department, otherwise if the head role is permanent then it is is set to 'No';"
  },
  {
    "db_id": "department_management",
    "query": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "born_state",
      ",",
      "age",
      "FROM",
      "head",
      "ORDER",
      "BY",
      "age"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "born_state",
      ",",
      "age",
      "from",
      "head",
      "order",
      "by",
      "age"
    ],
    "question": "List the name, born state and age of the heads of departments from youngest to oldest.",
    "question_toks": [
      "List",
      "the",
      "name",
      ",",
      "born",
      "state",
      "and",
      "age",
      "of",
      "the",
      "heads",
      "of",
      "departments",
      "ordered",
      "by",
      "age",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 8, false], null]],
          [0, [0, [0, 9, false], null]],
          [0, [0, [0, 10, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 10, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "department:  division of a large organization dealing with a specific area of activity; year is the year of department creation. num_employees is the total number of employees in the department; head: a person who is responsible for leading the department. name, born_state which is a state was born. age; management: tempotrary_acting is 'yes' if an employee is temporarily the head of the department, otherwise if the head role is permanent then it is is set to 'No';"
  },
  {
    "db_id": "department_management",
    "query": "SELECT name , creation FROM department WHERE creation < 1900",
    "query_toks": [
      "SELECT",
      "creation",
      ",",
      "name",
      ",",
      "budget_in_billions",
      "FROM",
      "department"
    ],
    "query_toks_no_value": [
      "select",
      "creation",
      ",",
      "name",
      ",",
      "budget_in_billions",
      "from",
      "department"
    ],
    "question": "List the names and creation dates of the departments created before 1900.",
    "question_toks": [
      "List",
      "the",
      "creation",
      "year",
      ",",
      "name",
      "and",
      "budget",
      "of",
      "each",
      "department",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 3, false], null]],
          [0, [0, [0, 2, false], null]],
          [0, [0, [0, 5, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "department:  division of a large organization dealing with a specific area of activity; year is the year of department creation. num_employees is the total number of employees in the department; head: a person who is responsible for leading the department. name, born_state which is a state was born. age; management: tempotrary_acting is 'yes' if an employee is temporarily the head of the department, otherwise if the head role is permanent then it is is set to 'No';"
  },
  {
    "db_id": "department_management",
    "query": "SELECT name FROM head WHERE age <= 68",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "head",
      "WHERE",
      "born_state",
      "!",
      "=",
      "'California",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "head",
      "where",
      "born_state",
      "!",
      "=",
      "value"
    ],
    "question": "What are the names of the heads whose age is 68 or lower?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "heads",
      "who",
      "are",
      "born",
      "outside",
      "the",
      "California",
      "state",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 8, false], null]]]],
      "where": [[false, 7, [0, [0, 9, false], null], "\"California\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "department:  division of a large organization dealing with a specific area of activity; year is the year of department creation. num_employees is the total number of employees in the department; head: a person who is responsible for leading the department. name, born_state which is a state was born. age; management: tempotrary_acting is 'yes' if an employee is temporarily the head of the department, otherwise if the head role is permanent then it is is set to 'No';"
  },
  {
    "db_id": "department_management",
    "query": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'California'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.creation",
      "FROM",
      "department",
      "AS",
      "T1",
      "JOIN",
      "management",
      "AS",
      "T2",
      "ON",
      "T1.department_id",
      "=",
      "T2.department_id",
      "JOIN",
      "head",
      "AS",
      "T3",
      "ON",
      "T2.head_id",
      "=",
      "T3.head_id",
      "WHERE",
      "T3.born_state",
      "=",
      "'Alabama",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "creation",
      "from",
      "department",
      "as",
      "t1",
      "join",
      "management",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "department_id",
      "=",
      "t2",
      ".",
      "department_id",
      "join",
      "head",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "head_id",
      "=",
      "t3",
      ".",
      "head_id",
      "where",
      "t3",
      ".",
      "born_state",
      "=",
      "value"
    ],
    "question": "What are the distinct creation years of the departments managed by someone born in the state 'California'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "distinct",
      "creation",
      "years",
      "of",
      "the",
      "departments",
      "managed",
      "by",
      "a",
      "secretary",
      "born",
      "in",
      "state",
      "'Alabama",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 0],
          ["table_unit", 2],
          ["table_unit", 1]
        ],
        "conds": [
          [false, 2, [0, [0, 1, false], null], [0, 11, false], null],
          "and",
          [false, 2, [0, [0, 12, false], null], [0, 7, false], null]
        ]
      },
      "select": [true, [[0, [0, [0, 3, false], null]]]],
      "where": [[false, 2, [0, [0, 9, false], null], "\"Alabama\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "department:  division of a large organization dealing with a specific area of activity; year is the year of department creation. num_employees is the total number of employees in the department; head: a person who is responsible for leading the department. name, born_state which is a state was born. age; management: tempotrary_acting is 'yes' if an employee is temporarily the head of the department, otherwise if the head role is permanent then it is is set to 'No';"
  },
  {
    "db_id": "department_management",
    "query": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >  2",
    "query_toks": [
      "SELECT",
      "born_state",
      "FROM",
      "head",
      "GROUP",
      "BY",
      "born_state",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "born_state",
      "from",
      "head",
      "group",
      "by",
      "born_state",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the names of the states where more than 2 heads were born?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "states",
      "where",
      "at",
      "least",
      "3",
      "heads",
      "were",
      "born",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 9, false], null]]]],
      "where": [],
      "groupBy": [[0, 9, false]],
      "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "department:  division of a large organization dealing with a specific area of activity; year is the year of department creation. num_employees is the total number of employees in the department; head: a person who is responsible for leading the department. name, born_state which is a state was born. age; management: tempotrary_acting is 'yes' if an employee is temporarily the head of the department, otherwise if the head role is permanent then it is is set to 'No';"
  },
  {
    "db_id": "department_management",
    "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "creation",
      "FROM",
      "department",
      "GROUP",
      "BY",
      "creation",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "creation",
      "from",
      "department",
      "group",
      "by",
      "creation",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What date were the greatest number of departments established?",
    "question_toks": [
      "In",
      "which",
      "year",
      "were",
      "most",
      "departments",
      "established",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [false, [[0, [0, [0, 3, false], null]]]],
      "where": [],
      "groupBy": [[0, 3, false]],
      "having": [],
      "orderBy": ["desc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "department:  division of a large organization dealing with a specific area of activity; year is the year of department creation. num_employees is the total number of employees in the department; head: a person who is responsible for leading the department. name, born_state which is a state was born. age; management: tempotrary_acting is 'yes' if an employee is temporarily the head of the department, otherwise if the head role is permanent then it is is set to 'No';"
  },
  {
    "db_id": "department_management",
    "query": "SELECT T3.age FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.age FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
    "query_toks": [
      "SELECT",
      "T3.born_state",
      "FROM",
      "department",
      "AS",
      "T1",
      "JOIN",
      "management",
      "AS",
      "T2",
      "ON",
      "T1.department_id",
      "=",
      "T2.department_id",
      "JOIN",
      "head",
      "AS",
      "T3",
      "ON",
      "T2.head_id",
      "=",
      "T3.head_id",
      "WHERE",
      "T1.name",
      "=",
      "'Treasury",
      "'",
      "INTERSECT",
      "SELECT",
      "T3.born_state",
      "FROM",
      "department",
      "AS",
      "T1",
      "JOIN",
      "management",
      "AS",
      "T2",
      "ON",
      "T1.department_id",
      "=",
      "T2.department_id",
      "JOIN",
      "head",
      "AS",
      "T3",
      "ON",
      "T2.head_id",
      "=",
      "T3.head_id",
      "WHERE",
      "T1.name",
      "=",
      "'Homeland",
      "Security",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "born_state",
      "from",
      "department",
      "as",
      "t1",
      "join",
      "management",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "department_id",
      "=",
      "t2",
      ".",
      "department_id",
      "join",
      "head",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "head_id",
      "=",
      "t3",
      ".",
      "head_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "intersect",
      "select",
      "t3",
      ".",
      "born_state",
      "from",
      "department",
      "as",
      "t1",
      "join",
      "management",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "department_id",
      "=",
      "t2",
      ".",
      "department_id",
      "join",
      "head",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "head_id",
      "=",
      "t3",
      ".",
      "head_id",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "How old are the secretaries of the 'Treasury' department and the 'Homeland Security' department?",
    "question_toks": [
      "List",
      "the",
      "states",
      "where",
      "both",
      "the",
      "secretary",
      "of",
      "'Treasury",
      "'",
      "department",
      "and",
      "the",
      "secretary",
      "of",
      "'Homeland",
      "Security",
      "'",
      "were",
      "born",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 0],
          ["table_unit", 2],
          ["table_unit", 1]
        ],
        "conds": [
          [false, 2, [0, [0, 1, false], null], [0, 11, false], null],
          "and",
          [false, 2, [0, [0, 12, false], null], [0, 7, false], null]
        ]
      },
      "select": [false, [[0, [0, [0, 9, false], null]]]],
      "where": [[false, 2, [0, [0, 2, false], null], "\"Treasury\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": {
          "table_units": [
            ["table_unit", 0],
            ["table_unit", 2],
            ["table_unit", 1]
          ],
          "conds": [
            [false, 2, [0, [0, 1, false], null], [0, 11, false], null],
            "and",
            [false, 2, [0, [0, 12, false], null], [0, 7, false], null]
          ]
        },
        "select": [false, [[0, [0, [0, 9, false], null]]]],
        "where": [
          [false, 2, [0, [0, 2, false], null], "\"Homeland Security\"", null]
        ],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "db_description": "department:  division of a large organization dealing with a specific area of activity; year is the year of department creation. num_employees is the total number of employees in the department; head: a person who is responsible for leading the department. name, born_state which is a state was born. age; management: tempotrary_acting is 'yes' if an employee is temporarily the head of the department, otherwise if the head role is permanent then it is is set to 'No';"
  },
  {
    "db_id": "farm",
    "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
    "query_toks": [
      "SELECT",
      "Theme",
      "FROM",
      "farm_competition",
      "ORDER",
      "BY",
      "YEAR",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "theme",
      "from",
      "farm_competition",
      "order",
      "by",
      "year",
      "asc"
    ],
    "question": "What are the themes of farm competitions sorted in chronological order?",
    "question_toks": [
      "What",
      "are",
      "the",
      "themes",
      "of",
      "farm",
      "competitions",
      "sorted",
      "by",
      "year",
      "in",
      "ascending",
      "order",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 2]], "conds": [] },
      "select": [false, [[0, [0, [0, 19, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 18, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "city: is a large town. status can be village or town or city depending on the size of the population. population is the total number of habitats within a town. area_km_2 represents area size in kilometers squared. census_ranking show a certain number of people in the total population of the city; farm: is an area of land, and its buildings, used for growing crops and rearing animals. year is the year in which the farm started its activity. total_hourses is total number of horses. working_horses are the total number of working hourses. total_cattle is the total number of cattle on the farm. oxen is the number of oxen. bulls is the number of bulls. cows is the number of cows. pigs is the number of pigs. sheep_and_goats is the number of sheep and goats; farm_competition: inter-farm competitions on certain topics. year is the year in which the competition takes place. theme is the theme of the competition. host_city_id is the city where the competition takes place. hosts are given by the names of those who organize the competition; competition_record: in the competition ranking, farms receive different ranking numbers depending on their performance. rank is the rank number of a farm in a competition;"
  },
  {
    "db_id": "farm",
    "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID ORDER BY T2.Year ASC",
    "query_toks": [
      "SELECT",
      "T2.Year",
      ",",
      "T1.Official_Name",
      "FROM",
      "city",
      "AS",
      "T1",
      "JOIN",
      "farm_competition",
      "AS",
      "T2",
      "ON",
      "T1.City_ID",
      "=",
      "T2.Host_city_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "year",
      ",",
      "t1",
      ".",
      "official_name",
      "from",
      "city",
      "as",
      "t1",
      "join",
      "farm_competition",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "city_id",
      "=",
      "t2",
      ".",
      "host_city_id"
    ],
    "question": "List the years and official names of the cities of each competition ordered by year ascending.",
    "question_toks": [
      "Give",
      "the",
      "years",
      "and",
      "official",
      "names",
      "of",
      "the",
      "cities",
      "of",
      "each",
      "competition",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 0],
          ["table_unit", 2]
        ],
        "conds": [[false, 2, [0, [0, 1, false], null], [0, 20, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 18, false], null]],
          [0, [0, [0, 2, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "city: is a large town. status can be village or town or city depending on the size of the population. population is the total number of habitats within a town. area_km_2 represents area size in kilometers squared. census_ranking show a certain number of people in the total population of the city; farm: is an area of land, and its buildings, used for growing crops and rearing animals. year is the year in which the farm started its activity. total_hourses is total number of horses. working_horses are the total number of working hourses. total_cattle is the total number of cattle on the farm. oxen is the number of oxen. bulls is the number of bulls. cows is the number of cows. pigs is the number of pigs. sheep_and_goats is the number of sheep and goats; farm_competition: inter-farm competitions on certain topics. year is the year in which the competition takes place. theme is the theme of the competition. host_city_id is the city where the competition takes place. hosts are given by the names of those who organize the competition; competition_record: in the competition ranking, farms receive different ranking numbers depending on their performance. rank is the rank number of a farm in a competition;"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T2.date_from FROM people AS T1 JOIN people_addresses AS T2 ON T1.person_id = T2.person_id WHERE T1.first_name = 'Shannon'",
    "query_toks": [
      "SELECT",
      "T2.first_name",
      ",",
      "T2.last_name",
      "FROM",
      "candidates",
      "AS",
      "T1",
      "JOIN",
      "people",
      "AS",
      "T2",
      "ON",
      "T1.candidate_id",
      "=",
      "T2.person_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "last_name",
      "from",
      "candidates",
      "as",
      "t1",
      "join",
      "people",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "candidate_id",
      "=",
      "t2",
      ".",
      "person_id"
    ],
    "question": "What date did the person with first name 'Shannon' move into their address from",
    "question_toks": [
      "what",
      "are",
      "the",
      "first",
      "name",
      "and",
      "last",
      "name",
      "of",
      "all",
      "candidates",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 7],
          ["table_unit", 1]
        ],
        "conds": [[false, 2, [0, [0, 33, false], null], [0, 8, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 9, false], null]],
          [0, [0, [0, 11, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "addresses: are the places where people live. line_1 and line_2 contain street and house number. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country, similar to a state or a county; people: human beings in general. login_name and password are required to access computer applications; students: people who are studying at a university or other place of higher education; courses: a course usually covers an individual subject that a student can take; people_addresses: each person's address is valid between two dates date_from and date_to; Student_course_registrations: students attend courses, for which they are enrolled, but students have to first register for a course at the beginning of the semester. registration_date is the date when the students enroll for a course as a datetime; student_course_attendance: every time a student attends a course, their attendance is registered and the date is being stored. date_of_attendance is the date when the students attend a course as a datetime; candidates: a student who has completed a course; candidate_assessments: at the end of a course, students are candidates for an examination (assessment).  assessment_date is the date when the examination takes place as a datetime. qualification is the grade received by students of how well they scored in the assessment. asessment_outcome_code of an exam is either 'Fail', if the student has failed, otherwise if the student has passed the exam it is 'Pass';"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
    "query_toks": [
      "SELECT",
      "T2.student_id",
      "FROM",
      "courses",
      "AS",
      "T1",
      "JOIN",
      "student_course_registrations",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "WHERE",
      "T1.course_name",
      "=",
      "``",
      "statistics",
      "''",
      "ORDER",
      "BY",
      "T2.registration_date"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "student_id",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_course_registrations",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "where",
      "t1",
      ".",
      "course_name",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "registration_date"
    ],
    "question": "List the id of students who registered course statistics ordered by date of registration.",
    "question_toks": [
      "List",
      "the",
      "id",
      "of",
      "students",
      "who",
      "registered",
      "course",
      "statistics",
      "in",
      "the",
      "order",
      "of",
      "registration",
      "date",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 3],
          ["table_unit", 5]
        ],
        "conds": [[false, 2, [0, [0, 18, false], null], [0, 28, false], null]]
      },
      "select": [false, [[0, [0, [0, 27, false], null]]]],
      "where": [[false, 2, [0, [0, 19, false], null], "\"statistics\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 29, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "addresses: are the places where people live. line_1 and line_2 contain street and house number. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country, similar to a state or a county; people: human beings in general. login_name and password are required to access computer applications; students: people who are studying at a university or other place of higher education; courses: a course usually covers an individual subject that a student can take; people_addresses: each person's address is valid between two dates date_from and date_to; Student_course_registrations: students attend courses, for which they are enrolled, but students have to first register for a course at the beginning of the semester. registration_date is the date when the students enroll for a course as a datetime; student_course_attendance: every time a student attends a course, their attendance is registered and the date is being stored. date_of_attendance is the date when the students attend a course as a datetime; candidates: a student who has completed a course; candidate_assessments: at the end of a course, students are candidates for an examination (assessment).  assessment_date is the date when the examination takes place as a datetime. qualification is the grade received by students of how well they scored in the assessment. asessment_outcome_code of an exam is either 'Fail', if the student has failed, otherwise if the student has passed the exam it is 'Pass';"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T2.student_id, T3.registration_date FROM student_course_registrations AS T3 JOIN courses AS T1 ON T3.course_id = T1.course_id JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
    "query_toks": [
      "SELECT",
      "T2.student_id",
      "FROM",
      "courses",
      "AS",
      "T1",
      "JOIN",
      "student_course_attendance",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "WHERE",
      "T1.course_name",
      "=",
      "``",
      "statistics",
      "''",
      "ORDER",
      "BY",
      "T2.date_of_attendance"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "student_id",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_course_attendance",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "where",
      "t1",
      ".",
      "course_name",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "date_of_attendance"
    ],
    "question": "List the id and registration date of students who attended statistics courses sorted by attendance date.",
    "question_toks": [
      "List",
      "the",
      "id",
      "of",
      "students",
      "who",
      "attended",
      "statistics",
      "courses",
      "in",
      "the",
      "order",
      "of",
      "attendance",
      "date",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 3],
          ["table_unit", 6]
        ],
        "conds": [[false, 2, [0, [0, 18, false], null], [0, 31, false], null]]
      },
      "select": [false, [[0, [0, [0, 30, false], null]]]],
      "where": [[false, 2, [0, [0, 19, false], null], "\"statistics\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 32, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "addresses: are the places where people live. line_1 and line_2 contain street and house number. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country, similar to a state or a county; people: human beings in general. login_name and password are required to access computer applications; students: people who are studying at a university or other place of higher education; courses: a course usually covers an individual subject that a student can take; people_addresses: each person's address is valid between two dates date_from and date_to; Student_course_registrations: students attend courses, for which they are enrolled, but students have to first register for a course at the beginning of the semester. registration_date is the date when the students enroll for a course as a datetime; student_course_attendance: every time a student attends a course, their attendance is registered and the date is being stored. date_of_attendance is the date when the students attend a course as a datetime; candidates: a student who has completed a course; candidate_assessments: at the end of a course, students are candidates for an examination (assessment).  assessment_date is the date when the examination takes place as a datetime. qualification is the grade received by students of how well they scored in the assessment. asessment_outcome_code of an exam is either 'Fail', if the student has failed, otherwise if the student has passed the exam it is 'Pass';"
  },
  {
    "db_id": "student_assessment",
    "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\" ORDER BY T2.date_of_attendance DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.student_id",
      "FROM",
      "courses",
      "AS",
      "T1",
      "JOIN",
      "student_course_attendance",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "WHERE",
      "T1.course_name",
      "=",
      "``",
      "statistics",
      "''",
      "ORDER",
      "BY",
      "T2.date_of_attendance"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "student_id",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_course_attendance",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "where",
      "t1",
      ".",
      "course_name",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "date_of_attendance"
    ],
    "question": "What is the id of the student who attended a course in the English department most recently?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "the",
      "students",
      "who",
      "attended",
      "courses",
      "in",
      "the",
      "statistics",
      "department",
      "in",
      "order",
      "of",
      "attendance",
      "date",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 3],
          ["table_unit", 6]
        ],
        "conds": [[false, 2, [0, [0, 18, false], null], [0, 31, false], null]]
      },
      "select": [false, [[0, [0, [0, 30, false], null]]]],
      "where": [[false, 2, [0, [0, 19, false], null], "\"statistics\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 32, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "addresses: are the places where people live. line_1 and line_2 contain street and house number. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country, similar to a state or a county; people: human beings in general. login_name and password are required to access computer applications; students: people who are studying at a university or other place of higher education; courses: a course usually covers an individual subject that a student can take; people_addresses: each person's address is valid between two dates date_from and date_to; Student_course_registrations: students attend courses, for which they are enrolled, but students have to first register for a course at the beginning of the semester. registration_date is the date when the students enroll for a course as a datetime; student_course_attendance: every time a student attends a course, their attendance is registered and the date is being stored. date_of_attendance is the date when the students attend a course as a datetime; candidates: a student who has completed a course; candidate_assessments: at the end of a course, students are candidates for an examination (assessment).  assessment_date is the date when the examination takes place as a datetime. qualification is the grade received by students of how well they scored in the assessment. asessment_outcome_code of an exam is either 'Fail', if the student has failed, otherwise if the student has passed the exam it is 'Pass';"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT start_station_name FROM trip ORDER BY start_date LIMIT 1",
    "query_toks": [
      "SELECT",
      "start_station_name",
      ",",
      "end_station_name",
      "FROM",
      "trip",
      "ORDER",
      "BY",
      "id",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "start_station_name",
      ",",
      "end_station_name",
      "from",
      "trip",
      "order",
      "by",
      "id",
      "limit",
      "value"
    ],
    "question": "Which start station has the oldest start_date?",
    "question_toks": [
      "Give",
      "me",
      "the",
      "start",
      "station",
      "and",
      "end",
      "station",
      "for",
      "the",
      "trips",
      "with",
      "the",
      "three",
      "oldest",
      "id",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 2]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 15, false], null]],
          [0, [0, [0, 18, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 12, false], null]]],
      "limit": 3,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "station: the connected docks which may contain a kiosk and ad panel that allows members access to bicycles in any of the participating areas; status: show available bikes and docks; trip: bicycle rental between two stations, start station and end station; weather: daily weather is updated, including the maximum, average, and minimum temperatures, the maximum, average, and minimum humidity in the air, the sea levels in inches, the minimum, maximum, and average visibility in miles, the minimum-maximum and average wind speed for the day;"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT installation_date, id FROM station ORDER BY installation_date DESC LIMIT 3",
    "query_toks": [
      "SELECT",
      "T1.id",
      ",",
      "T2.installation_date",
      "FROM",
      "trip",
      "AS",
      "T1",
      "JOIN",
      "station",
      "AS",
      "T2",
      "ON",
      "T1.end_station_id",
      "=",
      "T2.id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "id",
      ",",
      "t2",
      ".",
      "installation_date",
      "from",
      "trip",
      "as",
      "t1",
      "join",
      "station",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "end_station_id",
      "=",
      "t2",
      ".",
      "id"
    ],
    "question": "Return the last 3 installation dates of stations and the ids.",
    "question_toks": [
      "For",
      "each",
      "trip",
      ",",
      "return",
      "its",
      "ending",
      "station",
      "'s",
      "installation",
      "date",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 2],
          ["table_unit", 0]
        ],
        "conds": [[false, 2, [0, [0, 19, false], null], [0, 1, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 12, false], null]],
          [0, [0, [0, 7, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "station: the connected docks which may contain a kiosk and ad panel that allows members access to bicycles in any of the participating areas; status: show available bikes and docks; trip: bicycle rental between two stations, start station and end station; weather: daily weather is updated, including the maximum, average, and minimum temperatures, the maximum, average, and minimum humidity in the air, the sea levels in inches, the minimum, maximum, and average visibility in miles, the minimum-maximum and average wind speed for the day;"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T1.subscription_type = 'Customer'",
    "query_toks": [
      "SELECT",
      "T1.id",
      ",",
      "T2.installation_date",
      "FROM",
      "trip",
      "AS",
      "T1",
      "JOIN",
      "station",
      "AS",
      "T2",
      "ON",
      "T1.end_station_id",
      "=",
      "T2.id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "id",
      ",",
      "t2",
      ".",
      "installation_date",
      "from",
      "trip",
      "as",
      "t1",
      "join",
      "station",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "end_station_id",
      "=",
      "t2",
      ".",
      "id"
    ],
    "question": "What is the installation date for each starting station on all the trips made by customers?",
    "question_toks": [
      "What",
      "is",
      "the",
      "installation",
      "date",
      "for",
      "each",
      "ending",
      "station",
      "on",
      "all",
      "the",
      "trips",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 2],
          ["table_unit", 0]
        ],
        "conds": [[false, 2, [0, [0, 19, false], null], [0, 1, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 12, false], null]],
          [0, [0, [0, 7, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "station: the connected docks which may contain a kiosk and ad panel that allows members access to bicycles in any of the participating areas; status: show available bikes and docks; trip: bicycle rental between two stations, start station and end station; weather: daily weather is updated, including the maximum, average, and minimum temperatures, the maximum, average, and minimum humidity in the air, the sea levels in inches, the minimum, maximum, and average visibility in miles, the minimum-maximum and average wind speed for the day;"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT date ,  mean_temperature_f FROM weather GROUP BY events",
    "query_toks": [
      "SELECT",
      "date",
      ",",
      "mean_temperature_f",
      ",",
      "mean_humidity",
      "FROM",
      "weather",
      "ORDER",
      "BY",
      "max_gust_speed_mph",
      "DESC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "date",
      ",",
      "mean_temperature_f",
      ",",
      "mean_humidity",
      "from",
      "weather",
      "order",
      "by",
      "max_gust_speed_mph",
      "desc",
      "limit",
      "value"
    ],
    "question": "List all the dates and mean temperatures grouped by weather event",
    "question_toks": [
      "What",
      "are",
      "the",
      "date",
      ",",
      "mean",
      "temperature",
      "and",
      "mean",
      "humidity",
      "for",
      "the",
      "top",
      "3",
      "days",
      "with",
      "the",
      "largest",
      "max",
      "gust",
      "speeds",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 3]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 23, false], null]],
          [0, [0, [0, 25, false], null]],
          [0, [0, [0, 31, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 41, false], null]]],
      "limit": 3,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "station: the connected docks which may contain a kiosk and ad panel that allows members access to bicycles in any of the participating areas; status: show available bikes and docks; trip: bicycle rental between two stations, start station and end station; weather: daily weather is updated, including the maximum, average, and minimum temperatures, the maximum, average, and minimum humidity in the air, the sea levels in inches, the minimum, maximum, and average visibility in miles, the minimum-maximum and average wind speed for the day;"
  },
  {
    "db_id": "bike_1",
    "query": "SELECT date FROM weather WHERE mean_humidity > 75 ORDER BY date DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "date",
      ",",
      "mean_temperature_f",
      ",",
      "mean_humidity",
      "FROM",
      "weather",
      "ORDER",
      "BY",
      "max_gust_speed_mph",
      "DESC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "date",
      ",",
      "mean_temperature_f",
      ",",
      "mean_humidity",
      "from",
      "weather",
      "order",
      "by",
      "max_gust_speed_mph",
      "desc",
      "limit",
      "value"
    ],
    "question": "When was the latest day the mean humidity was greater than 75?",
    "question_toks": [
      "What",
      "is",
      "the",
      "date",
      ",",
      "average",
      "temperature",
      "and",
      "mean",
      "humidity",
      "for",
      "the",
      "days",
      "with",
      "the",
      "3",
      "largest",
      "maximum",
      "gust",
      "speeds",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 3]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 23, false], null]],
          [0, [0, [0, 25, false], null]],
          [0, [0, [0, 31, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 41, false], null]]],
      "limit": 3,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "station: the connected docks which may contain a kiosk and ad panel that allows members access to bicycles in any of the participating areas; status: show available bikes and docks; trip: bicycle rental between two stations, start station and end station; weather: daily weather is updated, including the maximum, average, and minimum temperatures, the maximum, average, and minimum humidity in the air, the sea levels in inches, the minimum, maximum, and average visibility in miles, the minimum-maximum and average wind speed for the day;"
  },
  {
    "db_id": "book_2",
    "query": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Publication_Date",
      "FROM",
      "publication",
      "GROUP",
      "BY",
      "Publication_Date",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "publication_date",
      "from",
      "publication",
      "group",
      "by",
      "publication_date",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which date had the most publications?",
    "question_toks": [
      "Please",
      "show",
      "the",
      "most",
      "common",
      "publication",
      "date",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [false, [[0, [0, [0, 4, false], null]]]],
      "where": [],
      "groupBy": [[0, 4, false]],
      "having": [],
      "orderBy": ["desc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "publication: the publication of a book or magazine is the act of printing it and sending it to shops to be sold. publisher is a person or company whose business is the publishing of books. publication_date is the date of publication of the book as a datetime. price is the amount of money costs for which the book is sold; book: the book is written by a writer. title is a descriptive text of the book. issues are the number of sets of copies of an edition of a book distinguished from others of that edition by variations in the printed matter. writer is the name of the writer;"
  },
  {
    "db_id": "musical",
    "query": "SELECT age FROM actor GROUP BY age ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Duration",
      "FROM",
      "actor",
      "ORDER",
      "BY",
      "Age",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "duration",
      "from",
      "actor",
      "order",
      "by",
      "age",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the most common age of actors?",
    "question_toks": [
      "What",
      "is",
      "the",
      "duration",
      "of",
      "the",
      "oldest",
      "actor",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 12, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 13, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "musical:  a dramatic performance that uses acting, singing, dancing, and dialogues to convey a story. year when the musical play was performed by actors. award is a prize given for skill or distinction in music. each category can be such as best leading actor performance, best director of a musical, best book of a musical. nominee is the nominated people to an award can win the category award for the musical for that year; actor: a person who plays in musicals usually have a character they are representing, a duration in years when they are actively playing, and an age. duration contains a range of years. age is the age of the actor;"
  },
  {
    "db_id": "musical",
    "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.year <= '1986'",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "actor",
      "AS",
      "T1",
      "JOIN",
      "musical",
      "AS",
      "T2",
      "ON",
      "T1.Musical_ID",
      "=",
      "T2.Musical_ID",
      "ORDER",
      "BY",
      "T2.Year",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "actor",
      "as",
      "t1",
      "join",
      "musical",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "musical_id",
      "=",
      "t2",
      ".",
      "musical_id",
      "order",
      "by",
      "t2",
      ".",
      "year",
      "desc"
    ],
    "question": "Show names of actors whose musical was awarded in or before 1986.",
    "question_toks": [
      "Show",
      "names",
      "of",
      "actors",
      "in",
      "descending",
      "order",
      "of",
      "the",
      "year",
      "their",
      "musical",
      "is",
      "awarded",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 1],
          ["table_unit", 0]
        ],
        "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]
      },
      "select": [false, [[0, [0, [0, 9, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 3, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "musical:  a dramatic performance that uses acting, singing, dancing, and dialogues to convey a story. year when the musical play was performed by actors. award is a prize given for skill or distinction in music. each category can be such as best leading actor performance, best director of a musical, best book of a musical. nominee is the nominated people to an award can win the category award for the musical for that year; actor: a person who plays in musicals usually have a character they are representing, a duration in years when they are actively playing, and an age. duration contains a range of years. age is the age of the actor;"
  },
  {
    "db_id": "musical",
    "query": "SELECT date FROM musical WHERE award = 'Tony Award' ORDER BY date DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "actor",
      "AS",
      "T1",
      "JOIN",
      "musical",
      "AS",
      "T2",
      "ON",
      "T1.Musical_ID",
      "=",
      "T2.Musical_ID",
      "ORDER",
      "BY",
      "T2.Year",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "actor",
      "as",
      "t1",
      "join",
      "musical",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "musical_id",
      "=",
      "t2",
      ".",
      "musical_id",
      "order",
      "by",
      "t2",
      ".",
      "year",
      "desc"
    ],
    "question": "What is the date of the most recent Tony Award?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "actors",
      "ordered",
      "descending",
      "by",
      "the",
      "year",
      "in",
      "which",
      "their",
      "musical",
      "was",
      "awarded",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 1],
          ["table_unit", 0]
        ],
        "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]
      },
      "select": [false, [[0, [0, [0, 9, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 3, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "musical:  a dramatic performance that uses acting, singing, dancing, and dialogues to convey a story. year when the musical play was performed by actors. award is a prize given for skill or distinction in music. each category can be such as best leading actor performance, best director of a musical, best book of a musical. nominee is the nominated people to an award can win the category award for the musical for that year; actor: a person who plays in musicals usually have a character they are representing, a duration in years when they are actively playing, and an age. duration contains a range of years. age is the age of the actor;"
  },
  {
    "db_id": "twitter_1",
    "query": "SELECT createdate FROM tweets WHERE user = 'Iron Man'",
    "query_toks": [
      "SELECT",
      "text",
      "FROM",
      "tweets",
      "ORDER",
      "BY",
      "createdate"
    ],
    "query_toks_no_value": [
      "select",
      "text",
      "from",
      "tweets",
      "order",
      "by",
      "createdate"
    ],
    "question": "List all the dates the user named 'Iron Man' made tweets.",
    "question_toks": [
      "List",
      "the",
      "text",
      "of",
      "all",
      "tweets",
      "in",
      "the",
      "order",
      "of",
      "date",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 5, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 6, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "follows: f1 and f2 are users and f1 follows f2; tweets: are messages posted on the Twitter social media service and website, Twitter allows users to discover stories regarding today's news and events, follow people or companies that post content they enjoy consuming, or simply communicate with other users. uid is the id of the user who is posting a tweet. text is the text body of a tweet. createdate is the date when the tweet was created as datetime; user_profiles: are collections of information associated with a user. partitionid is the unique identifier of a twitter account. followers are the total number of followers;"
  },
  {
    "db_id": "product_catalog",
    "query": "SELECT t1.catalog_id ,  t1.date_of_latest_revision FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number = (SELECT MAX(catalog_level_number) FROM catalog_structure)",
    "query_toks": [
      "SELECT",
      "t1.catalog_name",
      ",",
      "t1.date_of_publication",
      "FROM",
      "catalogs",
      "AS",
      "t1",
      "JOIN",
      "catalog_structure",
      "AS",
      "t2",
      "ON",
      "t1.catalog_id",
      "=",
      "t2.catalog_id",
      "WHERE",
      "catalog_level_number",
      ">",
      "5"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "catalog_name",
      ",",
      "t1",
      ".",
      "date_of_publication",
      "from",
      "catalogs",
      "as",
      "t1",
      "join",
      "catalog_structure",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "catalog_id",
      "=",
      "t2",
      ".",
      "catalog_id",
      "where",
      "catalog_level_number",
      ">",
      "value"
    ],
    "question": "What are the id and latest revision date of the catalogs with the highest catalog level number?",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "publication",
      "date",
      "of",
      "the",
      "catalogs",
      "with",
      "catalog",
      "level",
      "number",
      "above",
      "5",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 1],
          ["table_unit", 2]
        ],
        "conds": [[false, 2, [0, [0, 4, false], null], [0, 10, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 5, false], null]],
          [0, [0, [0, 7, false], null]]
        ]
      ],
      "where": [[false, 3, [0, [0, 9, false], null], 5.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "attribute_definitions: the properties that describe a product; catalogs: all commercial product information that enables product marketing managers to define and map new product offerings. date_of_publication is when catalogues are published at a specific date as a datetime. date_of_latest_revision is when the catalogue is updated as datetime; catalog_structure: a catalog is structured on several levels, each level having its name. the structure is made according to the attributes of the product; catalog_contents: is a type of marketing that lists the essential details of the product and helps buyers make a purchase decision. these details include product features, descriptions, dimensions, weight, price expressed in multiple currencies; catalog_contents_additional_attributes: attribute value can be '0' or '1';"
  },
  {
    "db_id": "flight_1",
    "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" ORDER BY departure_date DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "departure_date",
      ",",
      "arrival_date",
      "FROM",
      "Flight",
      "WHERE",
      "origin",
      "=",
      "``",
      "Los",
      "Angeles",
      "''",
      "AND",
      "destination",
      "=",
      "``",
      "Honolulu",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "departure_date",
      ",",
      "arrival_date",
      "from",
      "flight",
      "where",
      "origin",
      "=",
      "value",
      "and",
      "destination",
      "=",
      "value"
    ],
    "question": "Show me the departure date and arrival date for the flight that departed latest from Los Angeles.",
    "question_toks": [
      "Show",
      "me",
      "the",
      "departure",
      "date",
      "and",
      "arrival",
      "date",
      "for",
      "all",
      "flights",
      "from",
      "Los",
      "Angeles",
      "to",
      "Honolulu",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 5, false], null]],
          [0, [0, [0, 6, false], null]]
        ]
      ],
      "where": [
        [false, 2, [0, [0, 2, false], null], "\"Los Angeles\"", null],
        "and",
        [false, 2, [0, [0, 3, false], null], "\"Honolulu\"", null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "flight: the action or process of flying through the air and having an origin city and a destination place. price is the sum of money to be paid by passengers; aircraft: or airplane, is a vehicle or machine that can fly; employee: a person employed in airlines for salary. airline is an organization providing a regular public service of air transport; certificate: the qualifications of employees are given by the certificates;"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT StuID FROM Student WHERE age  >=  20",
    "query_toks": [
      "SELECT",
      "StuID",
      "FROM",
      "Student",
      "WHERE",
      "age",
      ">",
      "20"
    ],
    "query_toks_no_value": [
      "select",
      "stuid",
      "from",
      "student",
      "where",
      "age",
      ">",
      "value"
    ],
    "question": "List all the student ids who are at least 20 years old.",
    "question_toks": [
      "Show",
      "all",
      "student",
      "ids",
      "who",
      "are",
      "older",
      "than",
      "20",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 2]], "conds": [] },
      "select": [false, [[0, [0, [0, 5, false], null]]]],
      "where": [[false, 3, [0, [0, 8, false], null], 20.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "allergy_type: allergy is a damaging immune response by the body to a substance or food and it can be to certain types of food (eggs, nuts, milk) or the environment (dust); has_allergy: a student is a person attending university who can have an allergy and each student can have one or more allergies, if a stuent can put up with something means they do not have an alergy of that type; student: is a person attending university who can have one or more allergies. lname is the last name. fname is the first name. age is the age of the student in years. sex is 'F' if the student is female, otherwise if the student is male it is 'M'. major is a specific subject that students can specialize in. advisor is a professor who is helping students with academic or personal matters. city_code is the code of the city where the student lives;"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT MIN(age) FROM Student",
    "query_toks": [
      "SELECT",
      "LName",
      "FROM",
      "Student",
      "WHERE",
      "age",
      "=",
      "(",
      "SELECT",
      "min",
      "(",
      "age",
      ")",
      "FROM",
      "Student",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "lname",
      "from",
      "student",
      "where",
      "age",
      "=",
      "(",
      "select",
      "min",
      "(",
      "age",
      ")",
      "from",
      "student",
      ")"
    ],
    "question": "How old is the youngest student?",
    "question_toks": [
      "What",
      "is",
      "the",
      "last",
      "name",
      "of",
      "the",
      "youngest",
      "student",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 2]], "conds": [] },
      "select": [false, [[0, [0, [0, 6, false], null]]]],
      "where": [
        [
          false,
          2,
          [0, [0, 8, false], null],
          {
            "from": { "table_units": [["table_unit", 2]], "conds": [] },
            "select": [false, [[2, [0, [0, 8, false], null]]]],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "allergy_type: allergy is a damaging immune response by the body to a substance or food and it can be to certain types of food (eggs, nuts, milk) or the environment (dust); has_allergy: a student is a person attending university who can have an allergy and each student can have one or more allergies, if a stuent can put up with something means they do not have an alergy of that type; student: is a person attending university who can have one or more allergies. lname is the last name. fname is the first name. age is the age of the student in years. sex is 'F' if the student is female, otherwise if the student is male it is 'M'. major is a specific subject that students can specialize in. advisor is a professor who is helping students with academic or personal matters. city_code is the code of the city where the student lives;"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT FName FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
    "query_toks": [
      "SELECT",
      "LName",
      "FROM",
      "Student",
      "WHERE",
      "age",
      "=",
      "(",
      "SELECT",
      "min",
      "(",
      "age",
      ")",
      "FROM",
      "Student",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "lname",
      "from",
      "student",
      "where",
      "age",
      "=",
      "(",
      "select",
      "min",
      "(",
      "age",
      ")",
      "from",
      "student",
      ")"
    ],
    "question": "What is the first name of the student who was born earliest?",
    "question_toks": [
      "Provide",
      "the",
      "last",
      "name",
      "of",
      "the",
      "youngest",
      "student",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 2]], "conds": [] },
      "select": [false, [[0, [0, [0, 6, false], null]]]],
      "where": [
        [
          false,
          2,
          [0, [0, 8, false], null],
          {
            "from": { "table_units": [["table_unit", 2]], "conds": [] },
            "select": [false, [[2, [0, [0, 8, false], null]]]],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "allergy_type: allergy is a damaging immune response by the body to a substance or food and it can be to certain types of food (eggs, nuts, milk) or the environment (dust); has_allergy: a student is a person attending university who can have an allergy and each student can have one or more allergies, if a stuent can put up with something means they do not have an alergy of that type; student: is a person attending university who can have one or more allergies. lname is the last name. fname is the first name. age is the age of the student in years. sex is 'F' if the student is female, otherwise if the student is male it is 'M'. major is a specific subject that students can specialize in. advisor is a professor who is helping students with academic or personal matters. city_code is the code of the city where the student lives;"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT StuID, Advisor FROM Student WHERE age > 20",
    "query_toks": [
      "SELECT",
      "StuID",
      "FROM",
      "Student",
      "WHERE",
      "age",
      "=",
      "(",
      "SELECT",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "Student",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "stuid",
      "from",
      "student",
      "where",
      "age",
      "=",
      "(",
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "student",
      ")"
    ],
    "question": "List the student id and advisor of all students older than 20.",
    "question_toks": [
      "Show",
      "the",
      "student",
      "id",
      "of",
      "the",
      "oldest",
      "student",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 2]], "conds": [] },
      "select": [false, [[0, [0, [0, 5, false], null]]]],
      "where": [
        [
          false,
          2,
          [0, [0, 8, false], null],
          {
            "from": { "table_units": [["table_unit", 2]], "conds": [] },
            "select": [false, [[1, [0, [0, 8, false], null]]]],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "allergy_type: allergy is a damaging immune response by the body to a substance or food and it can be to certain types of food (eggs, nuts, milk) or the environment (dust); has_allergy: a student is a person attending university who can have an allergy and each student can have one or more allergies, if a stuent can put up with something means they do not have an alergy of that type; student: is a person attending university who can have one or more allergies. lname is the last name. fname is the first name. age is the age of the student in years. sex is 'F' if the student is female, otherwise if the student is male it is 'M'. major is a specific subject that students can specialize in. advisor is a professor who is helping students with academic or personal matters. city_code is the code of the city where the student lives;"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT T2.allergy FROM student as T1 JOIN has_allergy AS T2 ON T2.StuID = T1.StuID WHERE T1.age = 19 GROUP BY T2.allergy ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "StuID",
      "FROM",
      "Student",
      "WHERE",
      "age",
      "=",
      "(",
      "SELECT",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "Student",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "stuid",
      "from",
      "student",
      "where",
      "age",
      "=",
      "(",
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "student",
      ")"
    ],
    "question": "What allergy is most common among students aged 19?",
    "question_toks": [
      "What",
      "student",
      "id",
      "corresponds",
      "to",
      "the",
      "oldest",
      "student",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 2]], "conds": [] },
      "select": [false, [[0, [0, [0, 5, false], null]]]],
      "where": [
        [
          false,
          2,
          [0, [0, 8, false], null],
          {
            "from": { "table_units": [["table_unit", 2]], "conds": [] },
            "select": [false, [[1, [0, [0, 8, false], null]]]],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "allergy_type: allergy is a damaging immune response by the body to a substance or food and it can be to certain types of food (eggs, nuts, milk) or the environment (dust); has_allergy: a student is a person attending university who can have an allergy and each student can have one or more allergies, if a stuent can put up with something means they do not have an alergy of that type; student: is a person attending university who can have one or more allergies. lname is the last name. fname is the first name. age is the age of the student in years. sex is 'F' if the student is female, otherwise if the student is male it is 'M'. major is a specific subject that students can specialize in. advisor is a professor who is helping students with academic or personal matters. city_code is the code of the city where the student lives;"
  },
  {
    "db_id": "allergy_1",
    "query": "SELECT StuID, LName, Major FROM Student WHERE age  >=  21 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Student",
      "WHERE",
      "age",
      ">",
      "18",
      "AND",
      "StuID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "StuID",
      "FROM",
      "Has_allergy",
      "AS",
      "T1",
      "JOIN",
      "Allergy_Type",
      "AS",
      "T2",
      "ON",
      "T1.Allergy",
      "=",
      "T2.Allergy",
      "WHERE",
      "T2.allergytype",
      "=",
      "``",
      "food",
      "''",
      "OR",
      "T2.allergytype",
      "=",
      "``",
      "animal",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "where",
      "age",
      ">",
      "value",
      "and",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "stuid",
      "from",
      "has_allergy",
      "as",
      "t1",
      "join",
      "allergy_type",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "allergy",
      "=",
      "t2",
      ".",
      "allergy",
      "where",
      "t2",
      ".",
      "allergytype",
      "=",
      "value",
      "or",
      "t2",
      ".",
      "allergytype",
      "=",
      "value",
      ")"
    ],
    "question": "List the id, last name and major of students who are at least 21 years old and do not have allergy to either food or animal.",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "students",
      "who",
      "are",
      "older",
      "than",
      "18",
      "and",
      "do",
      "not",
      "have",
      "allergy",
      "to",
      "either",
      "food",
      "or",
      "animal",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 2]], "conds": [] },
      "select": [false, [[3, [0, [0, 0, false], null]]]],
      "where": [
        [false, 3, [0, [0, 8, false], null], 18.0, null],
        "and",
        [
          true,
          8,
          [0, [0, 5, false], null],
          {
            "from": {
              "table_units": [
                ["table_unit", 1],
                ["table_unit", 0]
              ],
              "conds": [
                [false, 2, [0, [0, 4, false], null], [0, 1, false], null]
              ]
            },
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "where": [
              [false, 2, [0, [0, 2, false], null], "\"food\"", null],
              "or",
              [false, 2, [0, [0, 2, false], null], "\"animal\"", null]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "allergy_type: allergy is a damaging immune response by the body to a substance or food and it can be to certain types of food (eggs, nuts, milk) or the environment (dust); has_allergy: a student is a person attending university who can have an allergy and each student can have one or more allergies, if a stuent can put up with something means they do not have an alergy of that type; student: is a person attending university who can have one or more allergies. lname is the last name. fname is the first name. age is the age of the student in years. sex is 'F' if the student is female, otherwise if the student is male it is 'M'. major is a specific subject that students can specialize in. advisor is a professor who is helping students with academic or personal matters. city_code is the code of the city where the student lives;"
  },
  {
    "db_id": "store_1",
    "query": "SELECT first_name, last_name FROM employees ORDER BY hire_date DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "title",
      ",",
      "phone",
      ",",
      "hire_date",
      "FROM",
      "employees",
      "WHERE",
      "first_name",
      "=",
      "``",
      "Nancy",
      "''",
      "AND",
      "last_name",
      "=",
      "``",
      "Edwards",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      ",",
      "phone",
      ",",
      "hire_date",
      "from",
      "employees",
      "where",
      "first_name",
      "=",
      "value",
      "and",
      "last_name",
      "=",
      "value"
    ],
    "question": "What is the first name and last name of the newest employee?",
    "question_toks": [
      "What",
      "is",
      "the",
      "title",
      ",",
      "phone",
      "and",
      "hire",
      "date",
      "of",
      "Nancy",
      "Edwards",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 3]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 11, false], null]],
          [0, [0, [0, 20, false], null]],
          [0, [0, [0, 14, false], null]]
        ]
      ],
      "where": [
        [false, 2, [0, [0, 10, false], null], "\"Nancy\"", null],
        "and",
        [false, 2, [0, [0, 9, false], null], "\"Edwards\"", null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artists: persons that released the album and are common to all the tracks in the album; albums: collections of songs that are available for download, or as a CD, or record; employees: someone who gets paid to work for a person or company. birth_date is the birhday of an employee as datetime; customers: pay for one or more tracks and receive an invoice with the payment details; genres: categories of artistic, musical, or literary composition characterized by a particular style, form, or content; invoices: lists of goods sent or services provided, with a statement of the sum due for these. total ia the total gross sales; media_types: a two-part identifier for file formats and format contents transmitted on the Internet; tracks: parts of a song production (or instrumental piece) that is recorded separately and added to a tune; invoice_lines: a single entry on an invoice; playlist: lists of recorded songs or pieces of music; playlist_tracks: a list of tracks to be played in a particular sequence, as from an audio CD;"
  },
  {
    "db_id": "store_1",
    "query": "SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "title",
      ",",
      "phone",
      ",",
      "hire_date",
      "FROM",
      "employees",
      "WHERE",
      "first_name",
      "=",
      "``",
      "Nancy",
      "''",
      "AND",
      "last_name",
      "=",
      "``",
      "Edwards",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      ",",
      "phone",
      ",",
      "hire_date",
      "from",
      "employees",
      "where",
      "first_name",
      "=",
      "value",
      "and",
      "last_name",
      "=",
      "value"
    ],
    "question": "Return the first and last name of the youngest employee",
    "question_toks": [
      "What",
      "is",
      "the",
      "title",
      ",",
      "phone",
      "number",
      "and",
      "hire",
      "date",
      "for",
      "the",
      "employee",
      "named",
      "Nancy",
      "Edwards",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 3]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 11, false], null]],
          [0, [0, [0, 20, false], null]],
          [0, [0, [0, 14, false], null]]
        ]
      ],
      "where": [
        [false, 2, [0, [0, 10, false], null], "\"Nancy\"", null],
        "and",
        [false, 2, [0, [0, 9, false], null], "\"Edwards\"", null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artists: persons that released the album and are common to all the tracks in the album; albums: collections of songs that are available for download, or as a CD, or record; employees: someone who gets paid to work for a person or company. birth_date is the birhday of an employee as datetime; customers: pay for one or more tracks and receive an invoice with the payment details; genres: categories of artistic, musical, or literary composition characterized by a particular style, form, or content; invoices: lists of goods sent or services provided, with a statement of the sum due for these. total ia the total gross sales; media_types: a two-part identifier for file formats and format contents transmitted on the Internet; tracks: parts of a song production (or instrumental piece) that is recorded separately and added to a tune; invoice_lines: a single entry on an invoice; playlist: lists of recorded songs or pieces of music; playlist_tracks: a list of tracks to be played in a particular sequence, as from an audio CD;"
  },
  {
    "db_id": "store_1",
    "query": "SELECT email , title FROM employees ORDER BY hire_date ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "employees",
      "ORDER",
      "BY",
      "birth_date",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "employees",
      "order",
      "by",
      "birth_date",
      "desc",
      "limit",
      "value"
    ],
    "question": "Give me the email and title of the employee who has been working here the longest",
    "question_toks": [
      "Who",
      "is",
      "the",
      "youngest",
      "employee",
      "in",
      "the",
      "company",
      "?",
      "List",
      "employee",
      "'s",
      "first",
      "and",
      "last",
      "name",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 3]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 10, false], null]],
          [0, [0, [0, 9, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 13, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artists: persons that released the album and are common to all the tracks in the album; albums: collections of songs that are available for download, or as a CD, or record; employees: someone who gets paid to work for a person or company. birth_date is the birhday of an employee as datetime; customers: pay for one or more tracks and receive an invoice with the payment details; genres: categories of artistic, musical, or literary composition characterized by a particular style, form, or content; invoices: lists of goods sent or services provided, with a statement of the sum due for these. total ia the total gross sales; media_types: a two-part identifier for file formats and format contents transmitted on the Internet; tracks: parts of a song production (or instrumental piece) that is recorded separately and added to a tune; invoice_lines: a single entry on an invoice; playlist: lists of recorded songs or pieces of music; playlist_tracks: a list of tracks to be played in a particular sequence, as from an audio CD;"
  },
  {
    "db_id": "store_1",
    "query": "SELECT first_name , last_name, birth_date FROM employees WHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards') ORDER BY birth_date DESC;",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "employees",
      "ORDER",
      "BY",
      "birth_date",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "employees",
      "order",
      "by",
      "birth_date",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the first name, last name and birth date of employees who report to Nancy Edwards ordered from youngest to oldest",
    "question_toks": [
      "What",
      "si",
      "the",
      "youngest",
      "employee",
      "'s",
      "first",
      "and",
      "last",
      "name",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 3]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 10, false], null]],
          [0, [0, [0, 9, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 13, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artists: persons that released the album and are common to all the tracks in the album; albums: collections of songs that are available for download, or as a CD, or record; employees: someone who gets paid to work for a person or company. birth_date is the birhday of an employee as datetime; customers: pay for one or more tracks and receive an invoice with the payment details; genres: categories of artistic, musical, or literary composition characterized by a particular style, form, or content; invoices: lists of goods sent or services provided, with a statement of the sum due for these. total ia the total gross sales; media_types: a two-part identifier for file formats and format contents transmitted on the Internet; tracks: parts of a song production (or instrumental piece) that is recorded separately and added to a tune; invoice_lines: a single entry on an invoice; playlist: lists of recorded songs or pieces of music; playlist_tracks: a list of tracks to be played in a particular sequence, as from an audio CD;"
  },
  {
    "db_id": "journal_committee",
    "query": "SELECT Name FROM editor WHERE Age  >=  25",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "editor",
      "WHERE",
      "Age",
      ">",
      "25"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "editor",
      "where",
      "age",
      ">",
      "value"
    ],
    "question": "Tell me the names of editors who are at least 25 years old.",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "editors",
      "who",
      "are",
      "older",
      "than",
      "25",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 6, false], null]]]],
      "where": [[false, 3, [0, [0, 7, false], null], 25.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "journal: a sales journal entry records cash or credit sale to a customer. a theme is a major and sometimes recurring idea, subject, or topic that appears in a written work. sales is the total revenue as a number; Editor: the person who is in charge of and determines the final content of a newspaper, magazine, or multi-author book. age is the age of the editor as a number; journal_committee: people who oversee the contents of the journal, especially from a commercial and managerial point of view. work_type refers to the title of the articles or their content, pictures; "
  },
  {
    "db_id": "journal_committee",
    "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 3",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "editor",
      "ORDER",
      "BY",
      "Age",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "editor",
      "order",
      "by",
      "age",
      "asc",
      "limit",
      "value"
    ],
    "question": "List the names of the 3 youngest editors?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "youngest",
      "editor",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 6, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 7, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "journal: a sales journal entry records cash or credit sale to a customer. a theme is a major and sometimes recurring idea, subject, or topic that appears in a written work. sales is the total revenue as a number; Editor: the person who is in charge of and determines the final content of a newspaper, magazine, or multi-author book. age is the age of the editor as a number; journal_committee: people who oversee the contents of the journal, especially from a commercial and managerial point of view. work_type refers to the title of the articles or their content, pictures; "
  },
  {
    "db_id": "journal_committee",
    "query": "SELECT T3.name FROM journal_committee AS T2 JOIN journal AS T1 ON T2.journal_ID  =  T1.journal_ID JOIN editor AS T3 ON T2.Editor_ID = T3.Editor_ID WHERE T1.journal_ID = (SELECT journal_ID FROM journal ORDER BY Date DESC LIMIT 1)",
    "query_toks": [
      "SELECT",
      "date",
      ",",
      "theme",
      ",",
      "sales",
      "FROM",
      "journal",
      "EXCEPT",
      "SELECT",
      "T1.date",
      ",",
      "T1.theme",
      ",",
      "T1.sales",
      "FROM",
      "journal",
      "AS",
      "T1",
      "JOIN",
      "journal_committee",
      "AS",
      "T2",
      "ON",
      "T1.journal_ID",
      "=",
      "T2.journal_ID"
    ],
    "query_toks_no_value": [
      "select",
      "date",
      ",",
      "theme",
      ",",
      "sales",
      "from",
      "journal",
      "except",
      "select",
      "t1",
      ".",
      "date",
      ",",
      "t1",
      ".",
      "theme",
      ",",
      "t1",
      ".",
      "sales",
      "from",
      "journal",
      "as",
      "t1",
      "join",
      "journal_committee",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "journal_id",
      "=",
      "t2",
      ".",
      "journal_id"
    ],
    "question": "What are the names of editors who worked on the committee of the latest journal?",
    "question_toks": [
      "List",
      "the",
      "date",
      ",",
      "theme",
      "and",
      "sales",
      "of",
      "the",
      "journal",
      "which",
      "did",
      "not",
      "have",
      "any",
      "of",
      "the",
      "listed",
      "editors",
      "serving",
      "on",
      "committee",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 2, false], null]],
          [0, [0, [0, 3, false], null]],
          [0, [0, [0, 4, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            ["table_unit", 0],
            ["table_unit", 2]
          ],
          "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]
        },
        "select": [
          false,
          [
            [0, [0, [0, 2, false], null]],
            [0, [0, [0, 3, false], null]],
            [0, [0, [0, 4, false], null]]
          ]
        ],
        "where": [],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "db_description": "journal: a sales journal entry records cash or credit sale to a customer. a theme is a major and sometimes recurring idea, subject, or topic that appears in a written work. sales is the total revenue as a number; Editor: the person who is in charge of and determines the final content of a newspaper, magazine, or multi-author book. age is the age of the editor as a number; journal_committee: people who oversee the contents of the journal, especially from a commercial and managerial point of view. work_type refers to the title of the articles or their content, pictures; "
  },
  {
    "db_id": "customers_card_transactions",
    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
    "query_toks": [
      "SELECT",
      "date_valid_from",
      ",",
      "date_valid_to",
      "FROM",
      "Customers_cards",
      "WHERE",
      "card_number",
      "=",
      "``",
      "4560596484842",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "date_valid_from",
      ",",
      "date_valid_to",
      "from",
      "customers_cards",
      "where",
      "card_number",
      "=",
      "value"
    ],
    "question": "Show the valid date period for the card with card number '4560596484842'.",
    "question_toks": [
      "Show",
      "the",
      "date",
      "valid",
      "from",
      "and",
      "the",
      "date",
      "valid",
      "to",
      "for",
      "the",
      "card",
      "with",
      "card",
      "number",
      "'4560596484842",
      "'",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 2]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 16, false], null]],
          [0, [0, [0, 17, false], null]]
        ]
      ],
      "where": [
        [false, 2, [0, [0, 15, false], null], "\"4560596484842\"", null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "accounts: are the single places to manage all billing information about customers; customers: individual or business that purchases another company's goods or services; customers_cards: a customer can hold multiple payment cards linked to their accounts. date_valid_from is the date from which the card is valid as a datetime. date_valid_to is the date until which the payment card is valid as datetime; financial_transactions: to pay for goods, a customer makes a payment using the card, so the payment becomes a financial transaction. transaction_type can be 'Payment' or 'Refund'. transaction_date is the date of the transaction as datetime. transaction_amount is the amount of money that is debited from the balance;"
  },
  {
    "db_id": "race_track",
    "query": "SELECT name , location FROM track WHERE year_opened  >  1997",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "seating",
      "FROM",
      "track",
      "WHERE",
      "year_opened",
      ">",
      "2000",
      "ORDER",
      "BY",
      "seating"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "seating",
      "from",
      "track",
      "where",
      "year_opened",
      ">",
      "value",
      "order",
      "by",
      "seating"
    ],
    "question": "Show the names and locations of all tracks opened since 1997.",
    "question_toks": [
      "Show",
      "names",
      "and",
      "seatings",
      ",",
      "ordered",
      "by",
      "seating",
      "for",
      "all",
      "tracks",
      "opened",
      "after",
      "2000",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 7, false], null]],
          [0, [0, [0, 9, false], null]]
        ]
      ],
      "where": [[false, 3, [0, [0, 10, false], null], 2000.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 9, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "race: a competition between vehicles. class is given by the type of vehicle participating in the race. date is the date of the race as a datetime. track_id is the track on which the race occurs; track: a race track is a facility built for the racing of vehicles. name for tracks are race course, speedway, and circuit. location is the adress of a track. seating is the number of seats at each track. year_opened is the opening year of the racetrack;"
  },
  {
    "db_id": "race_track",
    "query": "SELECT seating FROM track ORDER BY year_opened ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "seating",
      "FROM",
      "track",
      "WHERE",
      "year_opened",
      ">",
      "2000",
      "ORDER",
      "BY",
      "seating"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "seating",
      "from",
      "track",
      "where",
      "year_opened",
      ">",
      "value",
      "order",
      "by",
      "seating"
    ],
    "question": "What is the seating of the first track opened?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "seatings",
      "for",
      "all",
      "tracks",
      "opened",
      "after",
      "2000",
      ",",
      "ordered",
      "by",
      "seating",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 7, false], null]],
          [0, [0, [0, 9, false], null]]
        ]
      ],
      "where": [[false, 3, [0, [0, 10, false], null], 2000.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 9, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "race: a competition between vehicles. class is given by the type of vehicle participating in the race. date is the date of the race as a datetime. track_id is the track on which the race occurs; track: a race track is a facility built for the racing of vehicles. name for tracks are race course, speedway, and circuit. location is the adress of a track. seating is the number of seats at each track. year_opened is the opening year of the racetrack;"
  },
  {
    "db_id": "race_track",
    "query": "SELECT T2.name , T2.class , T2.date FROM track AS T1 JOIN race AS T2 ON T1.Track_ID = T2.Track_ID WHERE T1.name = 'Chicagoland Speedway' ORDER BY T2.date",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "LOCATION",
      ",",
      "seating",
      "FROM",
      "track",
      "ORDER",
      "BY",
      "year_opened",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "location",
      ",",
      "seating",
      "from",
      "track",
      "order",
      "by",
      "year_opened",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the name, class and date of races in Chicagoland Speedway, ordered by date",
    "question_toks": [
      "Return",
      "the",
      "name",
      ",",
      "location",
      ",",
      "and",
      "seating",
      "of",
      "the",
      "track",
      "that",
      "was",
      "opened",
      "in",
      "the",
      "most",
      "recent",
      "year",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 7, false], null]],
          [0, [0, [0, 8, false], null]],
          [0, [0, [0, 9, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 10, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "race: a competition between vehicles. class is given by the type of vehicle participating in the race. date is the date of the race as a datetime. track_id is the track on which the race occurs; track: a race track is a facility built for the racing of vehicles. name for tracks are race course, speedway, and circuit. location is the adress of a track. seating is the number of seats at each track. year_opened is the opening year of the racetrack;"
  },
  {
    "db_id": "race_track",
    "query": "SELECT name , year_opened , seating FROM track WHERE name LIKE '%Speedway%'",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "LOCATION",
      ",",
      "year_opened",
      "FROM",
      "track",
      "WHERE",
      "seating",
      ">",
      "(",
      "SELECT",
      "avg",
      "(",
      "seating",
      ")",
      "FROM",
      "track",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "location",
      ",",
      "year_opened",
      "from",
      "track",
      "where",
      "seating",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "seating",
      ")",
      "from",
      "track",
      ")"
    ],
    "question": "Show the name, opening year and seating for all tracks with 'Speedway' in their name.",
    "question_toks": [
      "Show",
      "the",
      "name",
      ",",
      "location",
      ",",
      "open",
      "year",
      "for",
      "all",
      "tracks",
      "with",
      "a",
      "seating",
      "higher",
      "than",
      "the",
      "average",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 7, false], null]],
          [0, [0, [0, 8, false], null]],
          [0, [0, [0, 10, false], null]]
        ]
      ],
      "where": [
        [
          false,
          3,
          [0, [0, 9, false], null],
          {
            "from": { "table_units": [["table_unit", 1]], "conds": [] },
            "select": [false, [[5, [0, [0, 9, false], null]]]],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "race: a competition between vehicles. class is given by the type of vehicle participating in the race. date is the date of the race as a datetime. track_id is the track on which the race occurs; track: a race track is a facility built for the racing of vehicles. name for tracks are race course, speedway, and circuit. location is the adress of a track. seating is the number of seats at each track. year_opened is the opening year of the racetrack;"
  },
  {
    "db_id": "race_track",
    "query": "SELECT COUNT(*) FROM track WHERE date = '1959'",
    "query_toks": ["SELECT", "name", ",", "CLASS", ",", "date", "FROM", "race"],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "class",
      ",",
      "date",
      "from",
      "race"
    ],
    "question": "How many tracks were opened in the year 1959?",
    "question_toks": [
      "Show",
      "name",
      ",",
      "class",
      ",",
      "and",
      "date",
      "for",
      "all",
      "races",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 2, false], null]],
          [0, [0, [0, 3, false], null]],
          [0, [0, [0, 4, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "race: a competition between vehicles. class is given by the type of vehicle participating in the race. date is the date of the race as a datetime. track_id is the track on which the race occurs; track: a race track is a facility built for the racing of vehicles. name for tracks are race course, speedway, and circuit. location is the adress of a track. seating is the number of seats at each track. year_opened is the opening year of the racetrack;"
  },
  {
    "db_id": "race_track",
    "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
    "query_toks": [
      "SELECT",
      "year_opened",
      "FROM",
      "track",
      "WHERE",
      "seating",
      "BETWEEN",
      "4000",
      "AND",
      "5000"
    ],
    "query_toks_no_value": [
      "select",
      "year_opened",
      "from",
      "track",
      "where",
      "seating",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "When did a track with a seating of at least 4000 but less than 5000 open?",
    "question_toks": [
      "Show",
      "year",
      "where",
      "a",
      "track",
      "with",
      "a",
      "seating",
      "at",
      "least",
      "5000",
      "opened",
      "and",
      "a",
      "track",
      "with",
      "seating",
      "no",
      "more",
      "than",
      "4000",
      "opened",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 10, false], null]]]],
      "where": [[false, 1, [0, [0, 9, false], null], 4000.0, 5000.0]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "race: a competition between vehicles. class is given by the type of vehicle participating in the race. date is the date of the race as a datetime. track_id is the track on which the race occurs; track: a race track is a facility built for the racing of vehicles. name for tracks are race course, speedway, and circuit. location is the adress of a track. seating is the number of seats at each track. year_opened is the opening year of the racetrack;"
  },
  {
    "db_id": "race_track",
    "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.date = 'June 7'",
    "query_toks": [
      "SELECT",
      "T1.name",
      ",",
      "T1.date",
      ",",
      "T2.name",
      "FROM",
      "race",
      "AS",
      "T1",
      "JOIN",
      "track",
      "AS",
      "T2",
      "ON",
      "T1.track_id",
      "=",
      "T2.track_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "date",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "race",
      "as",
      "t1",
      "join",
      "track",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "track_id",
      "=",
      "t2",
      ".",
      "track_id"
    ],
    "question": "Show the names of tracks which had a race that took place on June 7",
    "question_toks": [
      "Show",
      "the",
      "name",
      "and",
      "date",
      "for",
      "each",
      "race",
      "and",
      "its",
      "track",
      "name",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 0],
          ["table_unit", 1]
        ],
        "conds": [[false, 2, [0, [0, 5, false], null], [0, 6, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 2, false], null]],
          [0, [0, [0, 4, false], null]],
          [0, [0, [0, 7, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "race: a competition between vehicles. class is given by the type of vehicle participating in the race. date is the date of the race as a datetime. track_id is the track on which the race occurs; track: a race track is a facility built for the racing of vehicles. name for tracks are race course, speedway, and circuit. location is the adress of a track. seating is the number of seats at each track. year_opened is the opening year of the racetrack;"
  },
  {
    "db_id": "coffee_shop",
    "query": "SELECT address FROM shop WHERE open_year BETWEEN 2006 AND 2009",
    "query_toks": [
      "SELECT",
      "address",
      "FROM",
      "member",
      "WHERE",
      "age",
      "<",
      "30",
      "INTERSECT",
      "SELECT",
      "address",
      "FROM",
      "member",
      "WHERE",
      "age",
      ">",
      "40"
    ],
    "query_toks_no_value": [
      "select",
      "address",
      "from",
      "member",
      "where",
      "age",
      "<",
      "value",
      "intersect",
      "select",
      "address",
      "from",
      "member",
      "where",
      "age",
      ">",
      "value"
    ],
    "question": "List the addresses of shops that opened between 2006 and 2009.",
    "question_toks": [
      "Which",
      "address",
      "has",
      "both",
      "members",
      "younger",
      "than",
      "30",
      "and",
      "members",
      "older",
      "than",
      "40",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 12, false], null]]]],
      "where": [[false, 4, [0, [0, 9, false], null], 30.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": { "table_units": [["table_unit", 1]], "conds": [] },
        "select": [false, [[0, [0, [0, 12, false], null]]]],
        "where": [[false, 3, [0, [0, 9, false], null], 40.0, null]],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "db_description": "shop: is a place where people buy products. num_of_staff is the number of shop staff employees. open_year is the year when the shop opened its doors to the public. score is a measure of how popular the shop is; member: is a regular customer of the store they frequent. age is the age of the member. time_of _purchase is a favorite time for shopping. membership_level is a measure of how old (so loyal) customers are; Happy_hour: is a period of time during a month when the price of drinks is reduced. month is the month of the happy hour. num_of_shaff_in_charge is the number of staff assigned for happy hours; happy_hour_member: the member consumes a total amount of money for drinks during the happy hour;"
  },
  {
    "db_id": "coffee_shop",
    "query": "SELECT age FROM member WHERE age < 40 ORDER BY level_of_membership DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "address",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "open_year"
    ],
    "query_toks_no_value": [
      "select",
      "address",
      "from",
      "shop",
      "order",
      "by",
      "open_year"
    ],
    "question": "Out of the members younger than 40, how old is the person with the highest membership level?",
    "question_toks": [
      "Show",
      "the",
      "shop",
      "addresses",
      "ordered",
      "by",
      "their",
      "opening",
      "year",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [false, [[0, [0, [0, 2, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 5, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "shop: is a place where people buy products. num_of_staff is the number of shop staff employees. open_year is the year when the shop opened its doors to the public. score is a measure of how popular the shop is; member: is a regular customer of the store they frequent. age is the age of the member. time_of _purchase is a favorite time for shopping. membership_level is a measure of how old (so loyal) customers are; Happy_hour: is a period of time during a month when the price of drinks is reduced. month is the month of the happy hour. num_of_shaff_in_charge is the number of staff assigned for happy hours; happy_hour_member: the member consumes a total amount of money for drinks during the happy hour;"
  },
  {
    "db_id": "coffee_shop",
    "query": "SELECT T1.month FROM happy_hour AS T1 JOIN happy_hour_member AS T2 ON T1.HH_ID = T2.HH_ID ORDER BY T2.total_amount DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "MONTH",
      "FROM",
      "happy_hour",
      "GROUP",
      "BY",
      "MONTH",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "month",
      "from",
      "happy_hour",
      "group",
      "by",
      "month",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "When is the happy hour of the member with the greatest total amount?",
    "question_toks": [
      "Which",
      "month",
      "has",
      "the",
      "most",
      "happy",
      "hours",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 2]], "conds": [] },
      "select": [false, [[0, [0, [0, 15, false], null]]]],
      "where": [],
      "groupBy": [[0, 15, false]],
      "having": [],
      "orderBy": ["desc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "shop: is a place where people buy products. num_of_staff is the number of shop staff employees. open_year is the year when the shop opened its doors to the public. score is a measure of how popular the shop is; member: is a regular customer of the store they frequent. age is the age of the member. time_of _purchase is a favorite time for shopping. membership_level is a measure of how old (so loyal) customers are; Happy_hour: is a period of time during a month when the price of drinks is reduced. month is the month of the happy hour. num_of_shaff_in_charge is the number of staff assigned for happy hours; happy_hour_member: the member consumes a total amount of money for drinks during the happy hour;"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT BirthDate FROM EMPLOYEE ORDER BY BirthDate ASC",
    "query_toks": [
      "SELECT",
      "BirthDate",
      "FROM",
      "EMPLOYEE",
      "WHERE",
      "City",
      "=",
      "``",
      "Edmonton",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "birthdate",
      "from",
      "employee",
      "where",
      "city",
      "=",
      "value"
    ],
    "question": "List the date of birth of all employees in ascending order?",
    "question_toks": [
      "What",
      "are",
      "the",
      "birth",
      "dates",
      "of",
      "employees",
      "living",
      "in",
      "Edmonton",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 3]], "conds": [] },
      "select": [false, [[0, [0, [0, 24, false], null]]]],
      "where": [[false, 2, [0, [0, 27, false], null], "\"Edmonton\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "album: a record or set of records containing several musical selections which are released by artists; artist: a person that released the album and is common to all the tracks in the album; customer: pay for one or more tracks and receive an invoice with the payment details; employee: someone who gets paid to work for a person or company; genre: category of artistic, musical, or literary composition characterized by a particular style, form, or content; invoice: a list of goods sent or services provided, with a statement of the sum due for these. total is the total amount on an invoice, including transport and VAT; invoice_line: a single entry on an invoice; media_type: a two-part identifier for file formats and format contents transmitted on the Internet; playlist: a list of recorded songs or pieces of music; playlist_track: a list of tracks to be played in a particular sequence, as from an audio CD; Track: a single stream of recorded sound with no location in a sound field. milliseconds is the duration of a track in milliseconds. bytes is the number of bytes of a track;"
  },
  {
    "db_id": "chinook_1",
    "query": "SELECT City FROM EMPLOYEE ORDER BY BirthYear DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "BirthDate",
      "FROM",
      "EMPLOYEE",
      "WHERE",
      "City",
      "=",
      "``",
      "Edmonton",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "birthdate",
      "from",
      "employee",
      "where",
      "city",
      "=",
      "value"
    ],
    "question": "Which city does the youngest employee live in?",
    "question_toks": [
      "Find",
      "the",
      "birth",
      "dates",
      "corresponding",
      "to",
      "employees",
      "who",
      "live",
      "in",
      "the",
      "city",
      "of",
      "Edmonton",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 3]], "conds": [] },
      "select": [false, [[0, [0, [0, 24, false], null]]]],
      "where": [[false, 2, [0, [0, 27, false], null], "\"Edmonton\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "album: a record or set of records containing several musical selections which are released by artists; artist: a person that released the album and is common to all the tracks in the album; customer: pay for one or more tracks and receive an invoice with the payment details; employee: someone who gets paid to work for a person or company; genre: category of artistic, musical, or literary composition characterized by a particular style, form, or content; invoice: a list of goods sent or services provided, with a statement of the sum due for these. total is the total amount on an invoice, including transport and VAT; invoice_line: a single entry on an invoice; media_type: a two-part identifier for file formats and format contents transmitted on the Internet; playlist: a list of recorded songs or pieces of music; playlist_track: a list of tracks to be played in a particular sequence, as from an audio CD; Track: a single stream of recorded sound with no location in a sound field. milliseconds is the duration of a track in milliseconds. bytes is the number of bytes of a track;"
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT t2.settlement_id, t2.settlement_amount FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id WHERE t2.effective_date < t1.effective_date",
    "query_toks": [
      "SELECT",
      "t1.Effective_Date",
      "FROM",
      "claims",
      "AS",
      "t1",
      "JOIN",
      "settlements",
      "AS",
      "t2",
      "ON",
      "t1.claim_id",
      "=",
      "t2.claim_id",
      "GROUP",
      "BY",
      "t1.claim_id",
      "ORDER",
      "BY",
      "sum",
      "(",
      "t2.settlement_amount",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "effective_date",
      "from",
      "claims",
      "as",
      "t1",
      "join",
      "settlements",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "claim_id",
      "=",
      "t2",
      ".",
      "claim_id",
      "group",
      "by",
      "t1",
      ".",
      "claim_id",
      "order",
      "by",
      "sum",
      "(",
      "t2",
      ".",
      "settlement_amount",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Give the settlement id and amount of all the claims with an effective settlement date before the effective claim date?",
    "question_toks": [
      "What",
      "is",
      "the",
      "effective",
      "date",
      "of",
      "the",
      "claim",
      "that",
      "has",
      "the",
      "largest",
      "amount",
      "of",
      "total",
      "settlement",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 5],
          ["table_unit", 6]
        ],
        "conds": [[false, 2, [0, [0, 16, false], null], [0, 20, false], null]]
      },
      "select": [false, [[0, [0, [0, 18, false], null]]]],
      "where": [],
      "groupBy": [[0, 16, false]],
      "having": [],
      "orderBy": ["desc", [[0, [4, 22, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "customers: an individual or business that purchases another company's goods or services; services: insurance services means any new policy application, discontinuance, replacement, or upgrade of the insurance; available_policies: the types of insurance policies available to customers. policy_type_code are the types of insurance policies available; customers_policies: insurance policies made by customers. date_opened is the ate a customer policy has opened from and it is a datetime. date_closed is the closing date of a policy as a datetime; first_notification_of_loss: is the initial report made by a customer in the event of theft, loss, or damage of an insured good. fnol is the first notification of loss number; claims: is a formal request by a customer at an effective date to an insurance company for coverage or compensation for a covered loss or policy event. effective_date is the date when the claim is made as a datetime; settlements: the settlement of claim means the offering of compensation to the customer for damage. settlement_amount is the total amount paid to the customer as a result of the claim. effective_date is the date of effective payment settlement amount as a datetime;"
  },
  {
    "db_id": "insurance_fnol",
    "query": "SELECT t1.customer_name, t2.date_opened, t2.date_closed FROM customers AS T1 JOIN customers_policies AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name LIKE 'S%'",
    "query_toks": [
      "SELECT",
      "t1.Effective_Date",
      "FROM",
      "claims",
      "AS",
      "t1",
      "JOIN",
      "settlements",
      "AS",
      "t2",
      "ON",
      "t1.claim_id",
      "=",
      "t2.claim_id",
      "GROUP",
      "BY",
      "t1.claim_id",
      "ORDER",
      "BY",
      "sum",
      "(",
      "t2.settlement_amount",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "effective_date",
      "from",
      "claims",
      "as",
      "t1",
      "join",
      "settlements",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "claim_id",
      "=",
      "t2",
      ".",
      "claim_id",
      "group",
      "by",
      "t1",
      ".",
      "claim_id",
      "order",
      "by",
      "sum",
      "(",
      "t2",
      ".",
      "settlement_amount",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the customer name and the opening and closing dates of the policies of all customers whose name begins with 'S'.",
    "question_toks": [
      "Find",
      "the",
      "claim",
      "that",
      "has",
      "the",
      "largest",
      "total",
      "settlement",
      "amount",
      ".",
      "Return",
      "the",
      "effective",
      "date",
      "of",
      "the",
      "claim",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 5],
          ["table_unit", 6]
        ],
        "conds": [[false, 2, [0, [0, 16, false], null], [0, 20, false], null]]
      },
      "select": [false, [[0, [0, [0, 18, false], null]]]],
      "where": [],
      "groupBy": [[0, 16, false]],
      "having": [],
      "orderBy": ["desc", [[0, [4, 22, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "customers: an individual or business that purchases another company's goods or services; services: insurance services means any new policy application, discontinuance, replacement, or upgrade of the insurance; available_policies: the types of insurance policies available to customers. policy_type_code are the types of insurance policies available; customers_policies: insurance policies made by customers. date_opened is the ate a customer policy has opened from and it is a datetime. date_closed is the closing date of a policy as a datetime; first_notification_of_loss: is the initial report made by a customer in the event of theft, loss, or damage of an insured good. fnol is the first notification of loss number; claims: is a formal request by a customer at an effective date to an insurance company for coverage or compensation for a covered loss or policy event. effective_date is the date when the claim is made as a datetime; settlements: the settlement of claim means the offering of compensation to the customer for damage. settlement_amount is the total amount paid to the customer as a result of the claim. effective_date is the date of effective payment settlement amount as a datetime;"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT school ,  nickname FROM university ORDER BY founded",
    "query_toks": [
      "SELECT",
      "school",
      ",",
      "nickname",
      "FROM",
      "university",
      "ORDER",
      "BY",
      "founded"
    ],
    "query_toks_no_value": [
      "select",
      "school",
      ",",
      "nickname",
      "from",
      "university",
      "order",
      "by",
      "founded"
    ],
    "question": "Give the schools and their nicknames in the order they were founded.",
    "question_toks": [
      "List",
      "all",
      "schools",
      "and",
      "their",
      "nicknames",
      "in",
      "the",
      "order",
      "of",
      "founded",
      "year",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 14, false], null]],
          [0, [0, [0, 19, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 16, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "basketball_match: a game played on a court by two opposing teams of 5 players where acc tournament is a specific tournament in university basketball. acc_games is the acc games. acc_regular_season are results in acc tournament. acc_percent is percent in acc tournament. acc_home are the results in home matches, in acc tournament; acc road are the results in away matches, in acc tournament; all_games are results in all tournament. all_games_percent is percent in all tournaments. all_home are the results in home matches, in all tournaments. all_road are the results in away matches, in all tournaments; university: is a school, in their free time, students practice sports including basketball. location is the address of the university. founded is a year the university was founded in as a year of birth. affiliation can be 'Public' if the university has no affiliation, or is the name of the institution with which the university has a formal collaboration agreement. enrollment is the number of students enrolled at the university. nickname is a short name. primary_conference is a primary conference a university is associated to;"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT enrollment FROM university ORDER BY founded ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "founded",
      "FROM",
      "university",
      "ORDER",
      "BY",
      "enrollment",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "founded",
      "from",
      "university",
      "order",
      "by",
      "enrollment",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the enrollment of the oldest school?",
    "question_toks": [
      "Return",
      "the",
      "founded",
      "year",
      "for",
      "the",
      "school",
      "with",
      "the",
      "largest",
      "enrollment",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 16, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 18, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "basketball_match: a game played on a court by two opposing teams of 5 players where acc tournament is a specific tournament in university basketball. acc_games is the acc games. acc_regular_season are results in acc tournament. acc_percent is percent in acc tournament. acc_home are the results in home matches, in acc tournament; acc road are the results in away matches, in acc tournament; all_games are results in all tournament. all_games_percent is percent in all tournaments. all_home are the results in home matches, in all tournaments. all_road are the results in away matches, in all tournaments; university: is a school, in their free time, students practice sports including basketball. location is the address of the university. founded is a year the university was founded in as a year of birth. affiliation can be 'Public' if the university has no affiliation, or is the name of the institution with which the university has a formal collaboration agreement. enrollment is the number of students enrolled at the university. nickname is a short name. primary_conference is a primary conference a university is associated to;"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT school_id, founded FROM university WHERE affiliation = 'Public' AND founded BETWEEN 1800 AND 1899",
    "query_toks": [
      "SELECT",
      "founded",
      "FROM",
      "university",
      "WHERE",
      "affiliation",
      "!",
      "=",
      "'Public",
      "'",
      "ORDER",
      "BY",
      "founded",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "founded",
      "from",
      "university",
      "where",
      "affiliation",
      "!",
      "=",
      "value",
      "order",
      "by",
      "founded",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which public schools were founded in the 19th century? Give the school id and year founded.",
    "question_toks": [
      "Find",
      "the",
      "founded",
      "year",
      "of",
      "the",
      "newest",
      "non",
      "public",
      "school",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 16, false], null]]]],
      "where": [[false, 7, [0, [0, 17, false], null], "\"Public\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 16, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "basketball_match: a game played on a court by two opposing teams of 5 players where acc tournament is a specific tournament in university basketball. acc_games is the acc games. acc_regular_season are results in acc tournament. acc_percent is percent in acc tournament. acc_home are the results in home matches, in acc tournament; acc road are the results in away matches, in acc tournament; all_games are results in all tournament. all_games_percent is percent in all tournaments. all_home are the results in home matches, in all tournaments. all_road are the results in away matches, in all tournaments; university: is a school, in their free time, students practice sports including basketball. location is the address of the university. founded is a year the university was founded in as a year of birth. affiliation can be 'Public' if the university has no affiliation, or is the name of the institution with which the university has a formal collaboration agreement. enrollment is the number of students enrolled at the university. nickname is a short name. primary_conference is a primary conference a university is associated to;"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT school FROM university WHERE founded BETWEEN 1700 AND 1799",
    "query_toks": [
      "SELECT",
      "founded",
      "FROM",
      "university",
      "WHERE",
      "affiliation",
      "!",
      "=",
      "'Public",
      "'",
      "ORDER",
      "BY",
      "founded",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "founded",
      "from",
      "university",
      "where",
      "affiliation",
      "!",
      "=",
      "value",
      "order",
      "by",
      "founded",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the universities founded in the 18th century.",
    "question_toks": [
      "What",
      "is",
      "the",
      "founded",
      "year",
      "of",
      "the",
      "non",
      "public",
      "school",
      "that",
      "was",
      "founded",
      "most",
      "recently",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 16, false], null]]]],
      "where": [[false, 7, [0, [0, 17, false], null], "\"Public\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 16, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "basketball_match: a game played on a court by two opposing teams of 5 players where acc tournament is a specific tournament in university basketball. acc_games is the acc games. acc_regular_season are results in acc tournament. acc_percent is percent in acc tournament. acc_home are the results in home matches, in acc tournament; acc road are the results in away matches, in acc tournament; all_games are results in all tournament. all_games_percent is percent in all tournaments. all_home are the results in home matches, in all tournaments. all_road are the results in away matches, in all tournaments; university: is a school, in their free time, students practice sports including basketball. location is the address of the university. founded is a year the university was founded in as a year of birth. affiliation can be 'Public' if the university has no affiliation, or is the name of the institution with which the university has a formal collaboration agreement. enrollment is the number of students enrolled at the university. nickname is a short name. primary_conference is a primary conference a university is associated to;"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT max(enrollment) FROM university WHERE founded  >  '1850'",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "enrollment",
      ")",
      "FROM",
      "university",
      "WHERE",
      "founded",
      "<",
      "1850"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "enrollment",
      ")",
      "from",
      "university",
      "where",
      "founded",
      "<",
      "value"
    ],
    "question": "What is the largest enrollment size of the universities that were founded since 1850?",
    "question_toks": [
      "What",
      "are",
      "the",
      "average",
      "enrollment",
      "size",
      "of",
      "the",
      "universities",
      "that",
      "are",
      "founded",
      "before",
      "1850",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[5, [0, [0, 18, false], null]]]],
      "where": [[false, 4, [0, [0, 16, false], null], 1850.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "basketball_match: a game played on a court by two opposing teams of 5 players where acc tournament is a specific tournament in university basketball. acc_games is the acc games. acc_regular_season are results in acc tournament. acc_percent is percent in acc tournament. acc_home are the results in home matches, in acc tournament; acc road are the results in away matches, in acc tournament; all_games are results in all tournament. all_games_percent is percent in all tournaments. all_home are the results in home matches, in all tournaments. all_road are the results in away matches, in all tournaments; university: is a school, in their free time, students practice sports including basketball. location is the address of the university. founded is a year the university was founded in as a year of birth. affiliation can be 'Public' if the university has no affiliation, or is the name of the institution with which the university has a formal collaboration agreement. enrollment is the number of students enrolled at the university. nickname is a short name. primary_conference is a primary conference a university is associated to;"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT affiliation, school, MAX(founded) FROM university GROUP BY affiliation",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "enrollment",
      ")",
      "FROM",
      "university",
      "WHERE",
      "founded",
      "<",
      "1850"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "enrollment",
      ")",
      "from",
      "university",
      "where",
      "founded",
      "<",
      "value"
    ],
    "question": "What are the most recently founded schools of each affiliation?",
    "question_toks": [
      "Return",
      "the",
      "average",
      "enrollment",
      "of",
      "universities",
      "founded",
      "before",
      "1850",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[5, [0, [0, 18, false], null]]]],
      "where": [[false, 4, [0, [0, 16, false], null], 1850.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "basketball_match: a game played on a court by two opposing teams of 5 players where acc tournament is a specific tournament in university basketball. acc_games is the acc games. acc_regular_season are results in acc tournament. acc_percent is percent in acc tournament. acc_home are the results in home matches, in acc tournament; acc road are the results in away matches, in acc tournament; all_games are results in all tournament. all_games_percent is percent in all tournaments. all_home are the results in home matches, in all tournaments. all_road are the results in away matches, in all tournaments; university: is a school, in their free time, students practice sports including basketball. location is the address of the university. founded is a year the university was founded in as a year of birth. affiliation can be 'Public' if the university has no affiliation, or is the name of the institution with which the university has a formal collaboration agreement. enrollment is the number of students enrolled at the university. nickname is a short name. primary_conference is a primary conference a university is associated to;"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT enrollment ,  nickname FROM university WHERE founded > '1900'",
    "query_toks": [
      "SELECT",
      "enrollment",
      ",",
      "primary_conference",
      "FROM",
      "university",
      "ORDER",
      "BY",
      "founded",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "enrollment",
      ",",
      "primary_conference",
      "from",
      "university",
      "order",
      "by",
      "founded",
      "limit",
      "value"
    ],
    "question": "Show the enrollment and nicknames of the universities established after 1900.",
    "question_toks": [
      "Show",
      "the",
      "enrollment",
      "and",
      "primary_conference",
      "of",
      "the",
      "oldest",
      "college",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 18, false], null]],
          [0, [0, [0, 20, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 16, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "basketball_match: a game played on a court by two opposing teams of 5 players where acc tournament is a specific tournament in university basketball. acc_games is the acc games. acc_regular_season are results in acc tournament. acc_percent is percent in acc tournament. acc_home are the results in home matches, in acc tournament; acc road are the results in away matches, in acc tournament; all_games are results in all tournament. all_games_percent is percent in all tournaments. all_home are the results in home matches, in all tournaments. all_road are the results in away matches, in all tournaments; university: is a school, in their free time, students practice sports including basketball. location is the address of the university. founded is a year the university was founded in as a year of birth. affiliation can be 'Public' if the university has no affiliation, or is the name of the institution with which the university has a formal collaboration agreement. enrollment is the number of students enrolled at the university. nickname is a short name. primary_conference is a primary conference a university is associated to;"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT T2.team_name FROM university AS T1 JOIN basketball_match AS T2 ON T1.school_id = T2.school_id WHERE T1.school_id = (SELECT school_id FROM university ORDER BY founded DESC LIMIT 1)",
    "query_toks": [
      "SELECT",
      "school",
      "FROM",
      "university",
      "WHERE",
      "founded",
      ">",
      "1850",
      "OR",
      "affiliation",
      "=",
      "'Public",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "school",
      "from",
      "university",
      "where",
      "founded",
      ">",
      "value",
      "or",
      "affiliation",
      "=",
      "value"
    ],
    "question": "List the names of the basketball teams from the university that was founded most recently?",
    "question_toks": [
      "Find",
      "the",
      "schools",
      "that",
      "were",
      "either",
      "founded",
      "after",
      "1850",
      "or",
      "public",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 14, false], null]]]],
      "where": [
        [false, 3, [0, [0, 16, false], null], 1850.0, null],
        "or",
        [false, 2, [0, [0, 17, false], null], "\"Public\"", null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "basketball_match: a game played on a court by two opposing teams of 5 players where acc tournament is a specific tournament in university basketball. acc_games is the acc games. acc_regular_season are results in acc tournament. acc_percent is percent in acc tournament. acc_home are the results in home matches, in acc tournament; acc road are the results in away matches, in acc tournament; all_games are results in all tournament. all_games_percent is percent in all tournaments. all_home are the results in home matches, in all tournaments. all_road are the results in away matches, in all tournaments; university: is a school, in their free time, students practice sports including basketball. location is the address of the university. founded is a year the university was founded in as a year of birth. affiliation can be 'Public' if the university has no affiliation, or is the name of the institution with which the university has a formal collaboration agreement. enrollment is the number of students enrolled at the university. nickname is a short name. primary_conference is a primary conference a university is associated to;"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT school FROM university ORDER BY founded ASC LIMIT 3",
    "query_toks": [
      "SELECT",
      "school",
      "FROM",
      "university",
      "WHERE",
      "founded",
      ">",
      "1850",
      "OR",
      "affiliation",
      "=",
      "'Public",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "school",
      "from",
      "university",
      "where",
      "founded",
      ">",
      "value",
      "or",
      "affiliation",
      "=",
      "value"
    ],
    "question": "What are the 3 oldest schools?",
    "question_toks": [
      "What",
      "are",
      "the",
      "schools",
      "that",
      "were",
      "either",
      "founded",
      "before",
      "1850",
      "or",
      "are",
      "public",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 14, false], null]]]],
      "where": [
        [false, 3, [0, [0, 16, false], null], 1850.0, null],
        "or",
        [false, 2, [0, [0, 17, false], null], "\"Public\"", null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "basketball_match: a game played on a court by two opposing teams of 5 players where acc tournament is a specific tournament in university basketball. acc_games is the acc games. acc_regular_season are results in acc tournament. acc_percent is percent in acc tournament. acc_home are the results in home matches, in acc tournament; acc road are the results in away matches, in acc tournament; all_games are results in all tournament. all_games_percent is percent in all tournaments. all_home are the results in home matches, in all tournaments. all_road are the results in away matches, in all tournaments; university: is a school, in their free time, students practice sports including basketball. location is the address of the university. founded is a year the university was founded in as a year of birth. affiliation can be 'Public' if the university has no affiliation, or is the name of the institution with which the university has a formal collaboration agreement. enrollment is the number of students enrolled at the university. nickname is a short name. primary_conference is a primary conference a university is associated to;"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT school_id, enrollment FROM university WHERE founded < 1800 OR founded > 1900",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Enrollment",
      ")",
      ",",
      "affiliation",
      "FROM",
      "university",
      "WHERE",
      "founded",
      ">",
      "1850",
      "GROUP",
      "BY",
      "affiliation"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "enrollment",
      ")",
      ",",
      "affiliation",
      "from",
      "university",
      "where",
      "founded",
      ">",
      "value",
      "group",
      "by",
      "affiliation"
    ],
    "question": "Give the school id and enrollment of colleges that were founded before 1800 or after 1900.",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "students",
      "enrolled",
      "in",
      "the",
      "colleges",
      "that",
      "were",
      "founded",
      "after",
      "the",
      "year",
      "of",
      "1850",
      "for",
      "each",
      "affiliation",
      "type",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [4, [0, [0, 18, false], null]],
          [0, [0, [0, 17, false], null]]
        ]
      ],
      "where": [[false, 3, [0, [0, 16, false], null], 1850.0, null]],
      "groupBy": [[0, 17, false]],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "basketball_match: a game played on a court by two opposing teams of 5 players where acc tournament is a specific tournament in university basketball. acc_games is the acc games. acc_regular_season are results in acc tournament. acc_percent is percent in acc tournament. acc_home are the results in home matches, in acc tournament; acc road are the results in away matches, in acc tournament; all_games are results in all tournament. all_games_percent is percent in all tournaments. all_home are the results in home matches, in all tournaments. all_road are the results in away matches, in all tournaments; university: is a school, in their free time, students practice sports including basketball. location is the address of the university. founded is a year the university was founded in as a year of birth. affiliation can be 'Public' if the university has no affiliation, or is the name of the institution with which the university has a formal collaboration agreement. enrollment is the number of students enrolled at the university. nickname is a short name. primary_conference is a primary conference a university is associated to;"
  },
  {
    "db_id": "university_basketball",
    "query": "SELECT COUNT(*) FROM university WHERE founded  >  1850",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Enrollment",
      ")",
      ",",
      "affiliation",
      "FROM",
      "university",
      "WHERE",
      "founded",
      ">",
      "1850",
      "GROUP",
      "BY",
      "affiliation"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "enrollment",
      ")",
      ",",
      "affiliation",
      "from",
      "university",
      "where",
      "founded",
      ">",
      "value",
      "group",
      "by",
      "affiliation"
    ],
    "question": "How many colleges have been founded since 1850?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "affiliations",
      ",",
      "and",
      "what",
      "is",
      "the",
      "total",
      "enrollment",
      "of",
      "schools",
      "founded",
      "after",
      "1850",
      "for",
      "each",
      "enrollment",
      "type",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [4, [0, [0, 18, false], null]],
          [0, [0, [0, 17, false], null]]
        ]
      ],
      "where": [[false, 3, [0, [0, 16, false], null], 1850.0, null]],
      "groupBy": [[0, 17, false]],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "basketball_match: a game played on a court by two opposing teams of 5 players where acc tournament is a specific tournament in university basketball. acc_games is the acc games. acc_regular_season are results in acc tournament. acc_percent is percent in acc tournament. acc_home are the results in home matches, in acc tournament; acc road are the results in away matches, in acc tournament; all_games are results in all tournament. all_games_percent is percent in all tournaments. all_home are the results in home matches, in all tournaments. all_road are the results in away matches, in all tournaments; university: is a school, in their free time, students practice sports including basketball. location is the address of the university. founded is a year the university was founded in as a year of birth. affiliation can be 'Public' if the university has no affiliation, or is the name of the institution with which the university has a formal collaboration agreement. enrollment is the number of students enrolled at the university. nickname is a short name. primary_conference is a primary conference a university is associated to;"
  },
  {
    "db_id": "phone_1",
    "query": "SELECT T2.graphics_mode ,  T1.model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2004;",
    "query_toks": [
      "SELECT",
      "T2.Hardware_Model_name",
      ",",
      "T2.Company_name",
      "FROM",
      "chip_model",
      "AS",
      "T1",
      "JOIN",
      "phone",
      "AS",
      "T2",
      "ON",
      "T1.Model_name",
      "=",
      "T2.chip_model",
      "WHERE",
      "T1.Launch_year",
      "=",
      "2002",
      "OR",
      "T1.RAM_MiB",
      ">",
      "32",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "hardware_model_name",
      ",",
      "t2",
      ".",
      "company_name",
      "from",
      "chip_model",
      "as",
      "t1",
      "join",
      "phone",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model_name",
      "=",
      "t2",
      ".",
      "chip_model",
      "where",
      "t1",
      ".",
      "launch_year",
      "=",
      "value",
      "or",
      "t1",
      ".",
      "ram_mib",
      ">",
      "value"
    ],
    "question": "List the graphics mode and chip model name for all the phones containing chips that were launched in 2004.",
    "question_toks": [
      "List",
      "the",
      "hardware",
      "model",
      "name",
      "and",
      "company",
      "name",
      "for",
      "all",
      "the",
      "phones",
      "that",
      "were",
      "launched",
      "in",
      "year",
      "2002",
      "or",
      "have",
      "RAM",
      "size",
      "greater",
      "than",
      "32",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 0],
          ["table_unit", 2]
        ],
        "conds": [[false, 2, [0, [0, 1, false], null], [0, 20, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 16, false], null]],
          [0, [0, [0, 15, false], null]]
        ]
      ],
      "where": [
        [false, 2, [0, [0, 2, false], null], 2002.0, null],
        "or",
        [false, 3, [0, [0, 3, false], null], 32.0, null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "chip_model: phone chips are designed to perform one or a few dedicated functions, they are embedded as part of the complete device including hardware for wifi connection, bluetooth, ram memory (random access memory) in MB and ROM (read-only memory) in MB. the chip has slots for inserting memory cards; screen_mode: the term of display or screen mode refers to the main characteristics of a phone display, the maximum number of colors and the maximum image resolution (in pixels horizontally  \u00d7  pixels vertically). char_cells: or charger cells is a device for recharging the battery of a cells phone. B or byte is a unit of data. type of screen mode is either text or graphics; phone: is manufactured by a company. hardware_model_name refers to the specific name or number given to a product by its manufacturers. accreditation_type is a third-party evaluation of a conformity assessment body against recognized standards. accreditation_level is 'full' if all tests were performed. date is the date of accreditation as a datetime. screen_mode is graphics mode."
  },
  {
    "db_id": "phone_1",
    "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year != 2005 ORDER BY T1.ROM_MiB DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T2.Hardware_Model_name",
      "FROM",
      "chip_model",
      "AS",
      "T1",
      "JOIN",
      "phone",
      "AS",
      "T2",
      "ON",
      "T1.Model_name",
      "=",
      "T2.chip_model",
      "WHERE",
      "T1.Launch_year",
      "=",
      "2002",
      "ORDER",
      "BY",
      "T1.RAM_MiB",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "hardware_model_name",
      "from",
      "chip_model",
      "as",
      "t1",
      "join",
      "phone",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model_name",
      "=",
      "t2",
      ".",
      "chip_model",
      "where",
      "t1",
      ".",
      "launch_year",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "ram_mib",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the hardware name of the model with the highest ROM size that did not launch in the year 2005?",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "the",
      "phone",
      "model",
      "launched",
      "in",
      "year",
      "2002",
      "and",
      "with",
      "the",
      "highest",
      "RAM",
      "size",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 0],
          ["table_unit", 2]
        ],
        "conds": [[false, 2, [0, [0, 1, false], null], [0, 20, false], null]]
      },
      "select": [false, [[0, [0, [0, 16, false], null]]]],
      "where": [[false, 2, [0, [0, 2, false], null], 2002.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 3, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "chip_model: phone chips are designed to perform one or a few dedicated functions, they are embedded as part of the complete device including hardware for wifi connection, bluetooth, ram memory (random access memory) in MB and ROM (read-only memory) in MB. the chip has slots for inserting memory cards; screen_mode: the term of display or screen mode refers to the main characteristics of a phone display, the maximum number of colors and the maximum image resolution (in pixels horizontally  \u00d7  pixels vertically). char_cells: or charger cells is a device for recharging the battery of a cells phone. B or byte is a unit of data. type of screen mode is either text or graphics; phone: is manufactured by a company. hardware_model_name refers to the specific name or number given to a product by its manufacturers. accreditation_type is a third-party evaluation of a conformity assessment body against recognized standards. accreditation_level is 'full' if all tests were performed. date is the date of accreditation as a datetime. screen_mode is graphics mode."
  },
  {
    "db_id": "phone_1",
    "query": "SELECT model_name FROM chip_model ORDER BY launch_year",
    "query_toks": [
      "SELECT",
      "model_name",
      "FROM",
      "chip_model",
      "ORDER",
      "BY",
      "launch_year"
    ],
    "query_toks_no_value": [
      "select",
      "model_name",
      "from",
      "chip_model",
      "order",
      "by",
      "launch_year"
    ],
    "question": "List all the chip model names in the order they launched.",
    "question_toks": [
      "List",
      "all",
      "the",
      "model",
      "names",
      "sorted",
      "by",
      "their",
      "launch",
      "year",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [false, [[0, [0, [0, 1, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 2, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "chip_model: phone chips are designed to perform one or a few dedicated functions, they are embedded as part of the complete device including hardware for wifi connection, bluetooth, ram memory (random access memory) in MB and ROM (read-only memory) in MB. the chip has slots for inserting memory cards; screen_mode: the term of display or screen mode refers to the main characteristics of a phone display, the maximum number of colors and the maximum image resolution (in pixels horizontally  \u00d7  pixels vertically). char_cells: or charger cells is a device for recharging the battery of a cells phone. B or byte is a unit of data. type of screen mode is either text or graphics; phone: is manufactured by a company. hardware_model_name refers to the specific name or number given to a product by its manufacturers. accreditation_type is a third-party evaluation of a conformity assessment body against recognized standards. accreditation_level is 'full' if all tests were performed. date is the date of accreditation as a datetime. screen_mode is graphics mode."
  },
  {
    "db_id": "body_builder",
    "query": "SELECT T2.Name ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.snatch >= 140 ORDER BY T2.Birth_Date",
    "query_toks": [
      "SELECT",
      "T2.Birth_Date",
      ",",
      "T2.Birth_Place",
      "FROM",
      "body_builder",
      "AS",
      "T1",
      "JOIN",
      "people",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T1.Total",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "birth_date",
      ",",
      "t2",
      ".",
      "birth_place",
      "from",
      "body_builder",
      "as",
      "t1",
      "join",
      "people",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t1",
      ".",
      "total",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the name and birth place of the body builders with a snatch of at least 140, ordered from oldest to youngest.",
    "question_toks": [
      "What",
      "are",
      "the",
      "birth",
      "date",
      "and",
      "birth",
      "place",
      "of",
      "the",
      "body",
      "builder",
      "with",
      "the",
      "highest",
      "total",
      "points",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 0],
          ["table_unit", 1]
        ],
        "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 10, false], null]],
          [0, [0, [0, 11, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 5, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "body_builder: a person who strengthens and enlarges the muscles of their body through strenuous exercise. snatch is the score obtained by quickly lifting a weight from the floor to above the head in a single movement. clean_jerk is the score obtained by lifting a weight in which the weight is raised to shoulder height, held momentarily, and then quickly pushed above the head, usually with a pass or a spring from the feet. total is the total score obtained by cumulating the scores obtained at snatch and clean jerk; People: are usually body builders. height is a measure of how tall they are. weight is a measure number of body's relative mass. birth_date is the birthday of a person as a datetime. birth_place is the place of birth where a person was born;"
  },
  {
    "db_id": "body_builder",
    "query": "SELECT height, weight FROM people ORDER BY birth_date ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Birth_Place",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Birth_Place"
    ],
    "query_toks_no_value": [
      "select",
      "birth_place",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "people",
      "group",
      "by",
      "birth_place"
    ],
    "question": "What is the height and weight of the person who was born first?",
    "question_toks": [
      "List",
      "each",
      "birth",
      "place",
      "along",
      "with",
      "the",
      "number",
      "of",
      "people",
      "from",
      "there",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 11, false], null]],
          [3, [0, [0, 0, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [[0, 11, false]],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "body_builder: a person who strengthens and enlarges the muscles of their body through strenuous exercise. snatch is the score obtained by quickly lifting a weight from the floor to above the head in a single movement. clean_jerk is the score obtained by lifting a weight in which the weight is raised to shoulder height, held momentarily, and then quickly pushed above the head, usually with a pass or a spring from the feet. total is the total score obtained by cumulating the scores obtained at snatch and clean jerk; People: are usually body builders. height is a measure of how tall they are. weight is a measure number of body's relative mass. birth_date is the birthday of a person as a datetime. birth_place is the place of birth where a person was born;"
  },
  {
    "db_id": "body_builder",
    "query": "SELECT name, weight FROM people WHERE height >= 200 ORDER BY birth_date DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Birth_Place",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Birth_Place",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "birth_place",
      "from",
      "people",
      "group",
      "by",
      "birth_place",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name and weight of the youngest person whose height is at least 200?",
    "question_toks": [
      "What",
      "is",
      "the",
      "most",
      "common",
      "birth",
      "place",
      "of",
      "people",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 11, false], null]]]],
      "where": [],
      "groupBy": [[0, 11, false]],
      "having": [],
      "orderBy": ["desc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "body_builder: a person who strengthens and enlarges the muscles of their body through strenuous exercise. snatch is the score obtained by quickly lifting a weight from the floor to above the head in a single movement. clean_jerk is the score obtained by lifting a weight in which the weight is raised to shoulder height, held momentarily, and then quickly pushed above the head, usually with a pass or a spring from the feet. total is the total score obtained by cumulating the scores obtained at snatch and clean jerk; People: are usually body builders. height is a measure of how tall they are. weight is a measure number of body's relative mass. birth_date is the birthday of a person as a datetime. birth_place is the place of birth where a person was born;"
  },
  {
    "db_id": "body_builder",
    "query": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Birth_Date = 'January 1, 1992'",
    "query_toks": [
      "SELECT",
      "Birth_Place",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Birth_Place",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "birth_place",
      "from",
      "people",
      "group",
      "by",
      "birth_place",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What is the total score of the body builder born on January 1, 1992?",
    "question_toks": [
      "What",
      "are",
      "the",
      "birth",
      "places",
      "that",
      "are",
      "shared",
      "by",
      "at",
      "least",
      "two",
      "people",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 11, false], null]]]],
      "where": [],
      "groupBy": [[0, 11, false]],
      "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "body_builder: a person who strengthens and enlarges the muscles of their body through strenuous exercise. snatch is the score obtained by quickly lifting a weight from the floor to above the head in a single movement. clean_jerk is the score obtained by lifting a weight in which the weight is raised to shoulder height, held momentarily, and then quickly pushed above the head, usually with a pass or a spring from the feet. total is the total score obtained by cumulating the scores obtained at snatch and clean jerk; People: are usually body builders. height is a measure of how tall they are. weight is a measure number of body's relative mass. birth_date is the birthday of a person as a datetime. birth_place is the place of birth where a person was born;"
  },
  {
    "db_id": "body_builder",
    "query": "SELECT count(DISTINCT Birth_Date) FROM people",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Birth_Place",
      ")",
      "FROM",
      "people"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "birth_place",
      ")",
      "from",
      "people"
    ],
    "question": "How many distinct birth dates are there?",
    "question_toks": [
      "How",
      "many",
      "distinct",
      "birth",
      "places",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[3, [0, [0, 11, true], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "body_builder: a person who strengthens and enlarges the muscles of their body through strenuous exercise. snatch is the score obtained by quickly lifting a weight from the floor to above the head in a single movement. clean_jerk is the score obtained by lifting a weight in which the weight is raised to shoulder height, held momentarily, and then quickly pushed above the head, usually with a pass or a spring from the feet. total is the total score obtained by cumulating the scores obtained at snatch and clean jerk; People: are usually body builders. height is a measure of how tall they are. weight is a measure number of body's relative mass. birth_date is the birthday of a person as a datetime. birth_place is the place of birth where a person was born;"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT * FROM Apartment_Bookings ORDER BY booking_start_date",
    "query_toks": [
      "SELECT",
      "booking_start_date",
      ",",
      "booking_end_date",
      "FROM",
      "Apartment_Bookings"
    ],
    "query_toks_no_value": [
      "select",
      "booking_start_date",
      ",",
      "booking_end_date",
      "from",
      "apartment_bookings"
    ],
    "question": "List all details of the apartment bookings in order of start date.",
    "question_toks": [
      "What",
      "are",
      "the",
      "start",
      "date",
      "and",
      "end",
      "date",
      "of",
      "each",
      "apartment",
      "booking",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 4]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 26, false], null]],
          [0, [0, [0, 27, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "apartment_buildings: building containing separate residential apartments located at an address. building_manager is a person who manages land and buildings as a business; apartments: are located within a building. apt_type_code is the type of the apartment can be suite or flat depending on the number of rooms. bathroom_count is the total number of bathrooms in an apartment. bedroom_count is the total number of bedrooms in an apartment. room_count is the total number of rooms in an apartment; apartment_facilities: each apartment has facilities; guests: people who can make a booking to stay in an apartment from a start day to an end date. gender_code is 'Male' if the guest is male, otherwise if the guest is female, it is 'Female'; Apartment bookings: bookings have a status code if the booking is provisional or confirmed. booking_start_date is the start date of a booking as datetime. booking_end_date is the end date of a booking as a datetime; view_unit_status: the status of an apartment can be checked at any given time. available_yn is 0 if the unit status availability is 0, otherwise if the unit status availability is 1, then it is 1;"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT gender_code FROM Guests WHERE guest_first_name LIKE 'K%' ORDER BY date_of_birth ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "date_of_birth",
      "FROM",
      "Guests",
      "WHERE",
      "gender_code",
      "=",
      "``",
      "Male",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "date_of_birth",
      "from",
      "guests",
      "where",
      "gender_code",
      "=",
      "value"
    ],
    "question": "What is the gender code of the oldest guest whose first name begins with 'K'?",
    "question_toks": [
      "Return",
      "the",
      "date",
      "of",
      "birth",
      "for",
      "all",
      "the",
      "guests",
      "with",
      "gender",
      "code",
      "``",
      "Male",
      "''",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 3]], "conds": [] },
      "select": [false, [[0, [0, [0, 21, false], null]]]],
      "where": [[false, 2, [0, [0, 18, false], null], "\"Male\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "apartment_buildings: building containing separate residential apartments located at an address. building_manager is a person who manages land and buildings as a business; apartments: are located within a building. apt_type_code is the type of the apartment can be suite or flat depending on the number of rooms. bathroom_count is the total number of bathrooms in an apartment. bedroom_count is the total number of bedrooms in an apartment. room_count is the total number of rooms in an apartment; apartment_facilities: each apartment has facilities; guests: people who can make a booking to stay in an apartment from a start day to an end date. gender_code is 'Male' if the guest is male, otherwise if the guest is female, it is 'Female'; Apartment bookings: bookings have a status code if the booking is provisional or confirmed. booking_start_date is the start date of a booking as datetime. booking_end_date is the end date of a booking as a datetime; view_unit_status: the status of an apartment can be checked at any given time. available_yn is 0 if the unit status availability is 0, otherwise if the unit status availability is 1, then it is 1;"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT date_of_birth FROM Guests WHERE guest_first_name = 'Keith' AND guest_last_name = 'Hoeger'",
    "query_toks": [
      "SELECT",
      "date_of_birth",
      "FROM",
      "Guests",
      "WHERE",
      "gender_code",
      "=",
      "``",
      "Male",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "date_of_birth",
      "from",
      "guests",
      "where",
      "gender_code",
      "=",
      "value"
    ],
    "question": "When was the guest called Keith Hoeger born?",
    "question_toks": [
      "What",
      "are",
      "dates",
      "of",
      "birth",
      "of",
      "all",
      "the",
      "guests",
      "whose",
      "gender",
      "is",
      "``",
      "Male",
      "''",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 3]], "conds": [] },
      "select": [false, [[0, [0, [0, 21, false], null]]]],
      "where": [[false, 2, [0, [0, 18, false], null], "\"Male\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "apartment_buildings: building containing separate residential apartments located at an address. building_manager is a person who manages land and buildings as a business; apartments: are located within a building. apt_type_code is the type of the apartment can be suite or flat depending on the number of rooms. bathroom_count is the total number of bathrooms in an apartment. bedroom_count is the total number of bedrooms in an apartment. room_count is the total number of rooms in an apartment; apartment_facilities: each apartment has facilities; guests: people who can make a booking to stay in an apartment from a start day to an end date. gender_code is 'Male' if the guest is male, otherwise if the guest is female, it is 'Female'; Apartment bookings: bookings have a status code if the booking is provisional or confirmed. booking_start_date is the start date of a booking as datetime. booking_end_date is the end date of a booking as a datetime; view_unit_status: the status of an apartment can be checked at any given time. available_yn is 0 if the unit status availability is 0, otherwise if the unit status availability is 1, then it is 1;"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id JOIN Apartment_Buildings AS T3 ON T2.building_id = T3.building_id WHERE T3.building_short_name = 'Columbus Square'",
    "query_toks": [
      "SELECT",
      "T2.apt_number",
      ",",
      "T1.booking_start_date",
      ",",
      "T1.booking_start_date",
      "FROM",
      "Apartment_Bookings",
      "AS",
      "T1",
      "JOIN",
      "Apartments",
      "AS",
      "T2",
      "ON",
      "T1.apt_id",
      "=",
      "T2.apt_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "apt_number",
      ",",
      "t1",
      ".",
      "booking_start_date",
      ",",
      "t1",
      ".",
      "booking_start_date",
      "from",
      "apartment_bookings",
      "as",
      "t1",
      "join",
      "apartments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "apt_id",
      "=",
      "t2",
      ".",
      "apt_id"
    ],
    "question": "List the start and end dates of all the apartment bookings in Columbus Square",
    "question_toks": [
      "What",
      "are",
      "the",
      "apartment",
      "number",
      ",",
      "start",
      "date",
      ",",
      "and",
      "end",
      "date",
      "of",
      "each",
      "apartment",
      "booking",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 4],
          ["table_unit", 1]
        ],
        "conds": [[false, 2, [0, [0, 23, false], null], [0, 8, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 11, false], null]],
          [0, [0, [0, 26, false], null]],
          [0, [0, [0, 26, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "apartment_buildings: building containing separate residential apartments located at an address. building_manager is a person who manages land and buildings as a business; apartments: are located within a building. apt_type_code is the type of the apartment can be suite or flat depending on the number of rooms. bathroom_count is the total number of bathrooms in an apartment. bedroom_count is the total number of bedrooms in an apartment. room_count is the total number of rooms in an apartment; apartment_facilities: each apartment has facilities; guests: people who can make a booking to stay in an apartment from a start day to an end date. gender_code is 'Male' if the guest is male, otherwise if the guest is female, it is 'Female'; Apartment bookings: bookings have a status code if the booking is provisional or confirmed. booking_start_date is the start date of a booking as datetime. booking_end_date is the end date of a booking as a datetime; view_unit_status: the status of an apartment can be checked at any given time. available_yn is 0 if the unit status availability is 0, otherwise if the unit status availability is 1, then it is 1;"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Studio\"",
    "query_toks": [
      "SELECT",
      "T1.booking_start_date",
      ",",
      "T1.booking_start_date",
      "FROM",
      "Apartment_Bookings",
      "AS",
      "T1",
      "JOIN",
      "Apartments",
      "AS",
      "T2",
      "ON",
      "T1.apt_id",
      "=",
      "T2.apt_id",
      "WHERE",
      "T2.apt_type_code",
      "=",
      "``",
      "Duplex",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "booking_start_date",
      ",",
      "t1",
      ".",
      "booking_start_date",
      "from",
      "apartment_bookings",
      "as",
      "t1",
      "join",
      "apartments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "apt_id",
      "=",
      "t2",
      ".",
      "apt_id",
      "where",
      "t2",
      ".",
      "apt_type_code",
      "=",
      "value"
    ],
    "question": "Return the dates of bookings for apartments that have type code \"Studio\".",
    "question_toks": [
      "Return",
      "the",
      "booking",
      "start",
      "date",
      "and",
      "end",
      "date",
      "for",
      "the",
      "apartments",
      "that",
      "have",
      "type",
      "code",
      "``",
      "Duplex",
      "''",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 4],
          ["table_unit", 1]
        ],
        "conds": [[false, 2, [0, [0, 23, false], null], [0, 8, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 26, false], null]],
          [0, [0, [0, 26, false], null]]
        ]
      ],
      "where": [[false, 2, [0, [0, 10, false], null], "\"Duplex\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "apartment_buildings: building containing separate residential apartments located at an address. building_manager is a person who manages land and buildings as a business; apartments: are located within a building. apt_type_code is the type of the apartment can be suite or flat depending on the number of rooms. bathroom_count is the total number of bathrooms in an apartment. bedroom_count is the total number of bedrooms in an apartment. room_count is the total number of rooms in an apartment; apartment_facilities: each apartment has facilities; guests: people who can make a booking to stay in an apartment from a start day to an end date. gender_code is 'Male' if the guest is male, otherwise if the guest is female, it is 'Female'; Apartment bookings: bookings have a status code if the booking is provisional or confirmed. booking_start_date is the start date of a booking as datetime. booking_end_date is the end date of a booking as a datetime; view_unit_status: the status of an apartment can be checked at any given time. available_yn is 0 if the unit status availability is 0, otherwise if the unit status availability is 1, then it is 1;"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bathroom_count  >  1",
    "query_toks": [
      "SELECT",
      "T1.booking_start_date",
      ",",
      "T1.booking_start_date",
      "FROM",
      "Apartment_Bookings",
      "AS",
      "T1",
      "JOIN",
      "Apartments",
      "AS",
      "T2",
      "ON",
      "T1.apt_id",
      "=",
      "T2.apt_id",
      "WHERE",
      "T2.bedroom_count",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "booking_start_date",
      ",",
      "t1",
      ".",
      "booking_start_date",
      "from",
      "apartment_bookings",
      "as",
      "t1",
      "join",
      "apartments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "apt_id",
      "=",
      "t2",
      ".",
      "apt_id",
      "where",
      "t2",
      ".",
      "bedroom_count",
      ">",
      "value"
    ],
    "question": "For all apartments with multiple bathrooms, show the date periods of bookings.",
    "question_toks": [
      "Find",
      "the",
      "booking",
      "start",
      "date",
      "and",
      "end",
      "date",
      "for",
      "the",
      "apartments",
      "that",
      "have",
      "more",
      "than",
      "two",
      "bedrooms",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 4],
          ["table_unit", 1]
        ],
        "conds": [[false, 2, [0, [0, 23, false], null], [0, 8, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 26, false], null]],
          [0, [0, [0, 26, false], null]]
        ]
      ],
      "where": [[false, 3, [0, [0, 13, false], null], 2.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "apartment_buildings: building containing separate residential apartments located at an address. building_manager is a person who manages land and buildings as a business; apartments: are located within a building. apt_type_code is the type of the apartment can be suite or flat depending on the number of rooms. bathroom_count is the total number of bathrooms in an apartment. bedroom_count is the total number of bedrooms in an apartment. room_count is the total number of rooms in an apartment; apartment_facilities: each apartment has facilities; guests: people who can make a booking to stay in an apartment from a start day to an end date. gender_code is 'Male' if the guest is male, otherwise if the guest is female, it is 'Female'; Apartment bookings: bookings have a status code if the booking is provisional or confirmed. booking_start_date is the start date of a booking as datetime. booking_end_date is the end date of a booking as a datetime; view_unit_status: the status of an apartment can be checked at any given time. available_yn is 0 if the unit status availability is 0, otherwise if the unit status availability is 1, then it is 1;"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT MAX(booking_end_date) FROM Apartment_Bookings",
    "query_toks": [
      "SELECT",
      "T2.guest_first_name",
      ",",
      "T1.booking_start_date",
      ",",
      "T1.booking_start_date",
      "FROM",
      "Apartment_Bookings",
      "AS",
      "T1",
      "JOIN",
      "Guests",
      "AS",
      "T2",
      "ON",
      "T1.guest_id",
      "=",
      "T2.guest_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "guest_first_name",
      ",",
      "t1",
      ".",
      "booking_start_date",
      ",",
      "t1",
      ".",
      "booking_start_date",
      "from",
      "apartment_bookings",
      "as",
      "t1",
      "join",
      "guests",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "guest_id",
      "=",
      "t2",
      ".",
      "guest_id"
    ],
    "question": "When does the last booking end?",
    "question_toks": [
      "What",
      "are",
      "the",
      "guest",
      "first",
      "name",
      ",",
      "start",
      "date",
      ",",
      "and",
      "end",
      "date",
      "of",
      "each",
      "apartment",
      "booking",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 4],
          ["table_unit", 3]
        ],
        "conds": [[false, 2, [0, [0, 24, false], null], [0, 17, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 19, false], null]],
          [0, [0, [0, 26, false], null]],
          [0, [0, [0, 26, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "apartment_buildings: building containing separate residential apartments located at an address. building_manager is a person who manages land and buildings as a business; apartments: are located within a building. apt_type_code is the type of the apartment can be suite or flat depending on the number of rooms. bathroom_count is the total number of bathrooms in an apartment. bedroom_count is the total number of bedrooms in an apartment. room_count is the total number of rooms in an apartment; apartment_facilities: each apartment has facilities; guests: people who can make a booking to stay in an apartment from a start day to an end date. gender_code is 'Male' if the guest is male, otherwise if the guest is female, it is 'Female'; Apartment bookings: bookings have a status code if the booking is provisional or confirmed. booking_start_date is the start date of a booking as datetime. booking_end_date is the end date of a booking as a datetime; view_unit_status: the status of an apartment can be checked at any given time. available_yn is 0 if the unit status availability is 0, otherwise if the unit status availability is 1, then it is 1;"
  },
  {
    "db_id": "apartment_rentals",
    "query": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"",
    "query_toks": [
      "SELECT",
      "T1.booking_start_date",
      ",",
      "T1.booking_start_date",
      "FROM",
      "Apartment_Bookings",
      "AS",
      "T1",
      "JOIN",
      "Guests",
      "AS",
      "T2",
      "ON",
      "T1.guest_id",
      "=",
      "T2.guest_id",
      "WHERE",
      "T2.gender_code",
      "=",
      "``",
      "Female",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "booking_start_date",
      ",",
      "t1",
      ".",
      "booking_start_date",
      "from",
      "apartment_bookings",
      "as",
      "t1",
      "join",
      "guests",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "guest_id",
      "=",
      "t2",
      ".",
      "guest_id",
      "where",
      "t2",
      ".",
      "gender_code",
      "=",
      "value"
    ],
    "question": "Give me the start date and end date of the bookings made by female guests.",
    "question_toks": [
      "What",
      "are",
      "the",
      "start",
      "date",
      "and",
      "end",
      "date",
      "of",
      "the",
      "apartment",
      "bookings",
      "made",
      "by",
      "female",
      "guests",
      "(",
      "gender",
      "code",
      "``",
      "Female",
      "''",
      ")",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 4],
          ["table_unit", 3]
        ],
        "conds": [[false, 2, [0, [0, 24, false], null], [0, 17, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 26, false], null]],
          [0, [0, [0, 26, false], null]]
        ]
      ],
      "where": [[false, 2, [0, [0, 18, false], null], "\"Female\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "apartment_buildings: building containing separate residential apartments located at an address. building_manager is a person who manages land and buildings as a business; apartments: are located within a building. apt_type_code is the type of the apartment can be suite or flat depending on the number of rooms. bathroom_count is the total number of bathrooms in an apartment. bedroom_count is the total number of bedrooms in an apartment. room_count is the total number of rooms in an apartment; apartment_facilities: each apartment has facilities; guests: people who can make a booking to stay in an apartment from a start day to an end date. gender_code is 'Male' if the guest is male, otherwise if the guest is female, it is 'Female'; Apartment bookings: bookings have a status code if the booking is provisional or confirmed. booking_start_date is the start date of a booking as datetime. booking_end_date is the end date of a booking as a datetime; view_unit_status: the status of an apartment can be checked at any given time. available_yn is 0 if the unit status availability is 0, otherwise if the unit status availability is 1, then it is 1;"
  },
  {
    "db_id": "game_injury",
    "query": "SELECT date, score FROM game WHERE season  =  2012",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "game",
      "WHERE",
      "season",
      ">",
      "2007"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "game",
      "where",
      "season",
      ">",
      "value"
    ],
    "question": "List the dates and scores of games which took place in the 2012 season",
    "question_toks": [
      "How",
      "many",
      "games",
      "are",
      "held",
      "after",
      "season",
      "2007",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[3, [0, [0, 0, false], null]]]],
      "where": [[false, 3, [0, [0, 9, false], null], 2007.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "stadium: is an athletic or sports ground with tiers of seats for spectators. home_games is the number of games played in a stadium. average_attendance is the average of spectators who attended the home games. total_attendance is the sum of spectators who came to all games in a stadium. capacity_percentage is the ratio of the total number of spectators who came to all the matches in a stadium to the total number of seats available in the stadium; game: a game takes is held in a statdium. season is the year when the game takes place. date is the exact date of a game as a datetime. home_team is the home team of the game. away team is the away team playing at a game. score is the number of points scored by each team; injury_accident: players can suffer from injuries during game. player is the name of the player who suffered from an injury. injury is a description of injuries suffered. number_of_matches is the number of matches in which the player will no longer be able to play after injury. source is the source of sports information that gave information about the injuries of the players;"
  },
  {
    "db_id": "game_injury",
    "query": "SELECT T1.player FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >=  2010",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "T1.injury",
      ")",
      "FROM",
      "injury_accident",
      "AS",
      "T1",
      "JOIN",
      "game",
      "AS",
      "T2",
      "ON",
      "T1.game_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.season",
      ">",
      "2010"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "t1",
      ".",
      "injury",
      ")",
      "from",
      "injury_accident",
      "as",
      "t1",
      "join",
      "game",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "game_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "season",
      ">",
      "value"
    ],
    "question": "Name the players who got injured after or during season 2010?",
    "question_toks": [
      "How",
      "many",
      "distinct",
      "kinds",
      "of",
      "injuries",
      "happened",
      "after",
      "season",
      "2010",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 2],
          ["table_unit", 1]
        ],
        "conds": [[false, 2, [0, [0, 15, false], null], [0, 8, false], null]]
      },
      "select": [false, [[3, [0, [0, 18, true], null]]]],
      "where": [[false, 3, [0, [0, 9, false], null], 2010.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "stadium: is an athletic or sports ground with tiers of seats for spectators. home_games is the number of games played in a stadium. average_attendance is the average of spectators who attended the home games. total_attendance is the sum of spectators who came to all games in a stadium. capacity_percentage is the ratio of the total number of spectators who came to all the matches in a stadium to the total number of seats available in the stadium; game: a game takes is held in a statdium. season is the year when the game takes place. date is the exact date of a game as a datetime. home_team is the home team of the game. away team is the away team playing at a game. score is the number of points scored by each team; injury_accident: players can suffer from injuries during game. player is the name of the player who suffered from an injury. injury is a description of injuries suffered. number_of_matches is the number of matches in which the player will no longer be able to play after injury. source is the source of sports information that gave information about the injuries of the players;"
  },
  {
    "db_id": "game_injury",
    "query": "SELECT DISTINCT(T2.name) FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id ORDER BY T1.season ASC",
    "query_toks": [
      "SELECT",
      "T1.date",
      ",",
      "T2.player",
      "FROM",
      "game",
      "AS",
      "T1",
      "JOIN",
      "injury_accident",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.game_id",
      "ORDER",
      "BY",
      "T1.season",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "date",
      ",",
      "t2",
      ".",
      "player",
      "from",
      "game",
      "as",
      "t1",
      "join",
      "injury_accident",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "game_id",
      "order",
      "by",
      "t1",
      ".",
      "season",
      "desc"
    ],
    "question": "List the names of stadiums in the order of the season that the first game was played in each stadium.",
    "question_toks": [
      "For",
      "each",
      "injury",
      "accident",
      ",",
      "find",
      "the",
      "date",
      "of",
      "the",
      "game",
      "and",
      "the",
      "name",
      "of",
      "the",
      "injured",
      "player",
      "in",
      "the",
      "game",
      ",",
      "and",
      "sort",
      "the",
      "results",
      "in",
      "descending",
      "order",
      "of",
      "game",
      "season",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 1],
          ["table_unit", 2]
        ],
        "conds": [[false, 2, [0, [0, 8, false], null], [0, 15, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 10, false], null]],
          [0, [0, [0, 17, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 9, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "stadium: is an athletic or sports ground with tiers of seats for spectators. home_games is the number of games played in a stadium. average_attendance is the average of spectators who attended the home games. total_attendance is the sum of spectators who came to all games in a stadium. capacity_percentage is the ratio of the total number of spectators who came to all the matches in a stadium to the total number of seats available in the stadium; game: a game takes is held in a statdium. season is the year when the game takes place. date is the exact date of a game as a datetime. home_team is the home team of the game. away team is the away team playing at a game. score is the number of points scored by each team; injury_accident: players can suffer from injuries during game. player is the name of the player who suffered from an injury. injury is a description of injuries suffered. number_of_matches is the number of matches in which the player will no longer be able to play after injury. source is the source of sports information that gave information about the injuries of the players;"
  },
  {
    "db_id": "performance_attendance",
    "query": "SELECT Location, Date FROM performance ORDER BY Date",
    "query_toks": [
      "SELECT",
      "Date",
      "FROM",
      "performance",
      "ORDER",
      "BY",
      "Attendance",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "date",
      "from",
      "performance",
      "order",
      "by",
      "attendance",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the location and date of performances in chronological order.",
    "question_toks": [
      "What",
      "is",
      "the",
      "date",
      "of",
      "the",
      "performance",
      "with",
      "the",
      "highest",
      "number",
      "of",
      "attendees",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 6, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 9, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "member: an orchestra is a group of musicians who perform instrumental music using mostly stringed instruments. nationality is the country each member of the orchestra comes from. role is the instrument they are playing such as 'Violin'; performance: members play and attend at a performance. date is the date when the performance takes place as a datetime. location is the address where the performance take place. attendance is the number of people participate at the performance; member_attendance: members attend a performance to play an instrument for a total number of pieces;"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T3.name, T1.title FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE T2.YEAR  =  2008 OR T2.YEAR = 2009",
    "query_toks": [
      "SELECT",
      "T1.title",
      ",",
      "T3.name",
      "FROM",
      "course",
      "AS",
      "T1",
      "JOIN",
      "teaches",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "JOIN",
      "instructor",
      "AS",
      "T3",
      "ON",
      "T2.id",
      "=",
      "T3.id",
      "WHERE",
      "YEAR",
      "=",
      "2008",
      "ORDER",
      "BY",
      "T1.title"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "title",
      ",",
      "t3",
      ".",
      "name",
      "from",
      "course",
      "as",
      "t1",
      "join",
      "teaches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "instructor",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "id",
      "where",
      "year",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "title"
    ],
    "question": "List the instructor names and course names for courses that ran during 2008 or 2009.",
    "question_toks": [
      "list",
      "in",
      "alphabetic",
      "order",
      "all",
      "course",
      "names",
      "and",
      "their",
      "instructors",
      "'",
      "names",
      "in",
      "year",
      "2008",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 2],
          ["table_unit", 5],
          ["table_unit", 3]
        ],
        "conds": [
          [false, 2, [0, [0, 7, false], null], [0, 23, false], null],
          "and",
          [false, 2, [0, [0, 22, false], null], [0, 11, false], null]
        ]
      },
      "select": [
        false,
        [
          [0, [0, [0, 8, false], null]],
          [0, [0, [0, 12, false], null]]
        ]
      ],
      "where": [[false, 2, [0, [0, 26, false], null], 2008.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 8, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "classroom: a room in a building, in which classes are held. capacity is a maximum number of students in a class; department: is a division of a university or school, having its budget and located in a building; course: is a series of lessons or lectures on a particular subject, taught by an instructor from the same department. each course has a certain number of credits. credits represent how much effort a student puts into a particular course; instructor: someone who teaches at an institution and belongs to a department; section: an individual course offering, distinguished from other course sections by date, time, location, instructor, delivery mode; teaches: allocations of courses and sections for each semester of learning; student: someone who attends university courses. each student obtains several credits tot cred, in a department; takes: the grade obtained by students in each section and course, in each semester; advisor: each student has an advisor. time_slot: allocation of time slots for the days of the week. day is the first letter of the day of the week; prereq: a course or other requirement that a student must have taken before enrolling in a specific course or program;"
  },
  {
    "db_id": "college_2",
    "query": "SELECT count(*) FROM SECTION WHERE building = 'Saucon' AND year = 2010",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "semester",
      ",",
      "YEAR",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "semester",
      ",",
      "YEAR"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "semester",
      ",",
      "year",
      "from",
      "section",
      "group",
      "by",
      "semester",
      ",",
      "year"
    ],
    "question": "How many courses ran in the Saucon building in the year 2010?",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "courses",
      "provided",
      "in",
      "each",
      "semester",
      "and",
      "year",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 4]], "conds": [] },
      "select": [
        false,
        [
          [3, [0, [0, 0, false], null]],
          [0, [0, [0, 17, false], null]],
          [0, [0, [0, 18, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [
        [0, 17, false],
        [0, 18, false]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "classroom: a room in a building, in which classes are held. capacity is a maximum number of students in a class; department: is a division of a university or school, having its budget and located in a building; course: is a series of lessons or lectures on a particular subject, taught by an instructor from the same department. each course has a certain number of credits. credits represent how much effort a student puts into a particular course; instructor: someone who teaches at an institution and belongs to a department; section: an individual course offering, distinguished from other course sections by date, time, location, instructor, delivery mode; teaches: allocations of courses and sections for each semester of learning; student: someone who attends university courses. each student obtains several credits tot cred, in a department; takes: the grade obtained by students in each section and course, in each semester; advisor: each student has an advisor. time_slot: allocation of time slots for the days of the week. day is the first letter of the day of the week; prereq: a course or other requirement that a student must have taken before enrolling in a specific course or program;"
  },
  {
    "db_id": "college_2",
    "query": "SELECT year FROM section GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "semester",
      ",",
      "YEAR",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "semester",
      ",",
      "YEAR"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "semester",
      ",",
      "year",
      "from",
      "section",
      "group",
      "by",
      "semester",
      ",",
      "year"
    ],
    "question": "In which year did the most courses run?",
    "question_toks": [
      "How",
      "many",
      "courses",
      "are",
      "provided",
      "in",
      "each",
      "semester",
      "and",
      "year",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 4]], "conds": [] },
      "select": [
        false,
        [
          [3, [0, [0, 0, false], null]],
          [0, [0, [0, 17, false], null]],
          [0, [0, [0, 18, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [
        [0, 17, false],
        [0, 18, false]
      ],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "classroom: a room in a building, in which classes are held. capacity is a maximum number of students in a class; department: is a division of a university or school, having its budget and located in a building; course: is a series of lessons or lectures on a particular subject, taught by an instructor from the same department. each course has a certain number of credits. credits represent how much effort a student puts into a particular course; instructor: someone who teaches at an institution and belongs to a department; section: an individual course offering, distinguished from other course sections by date, time, location, instructor, delivery mode; teaches: allocations of courses and sections for each semester of learning; student: someone who attends university courses. each student obtains several credits tot cred, in a department; takes: the grade obtained by students in each section and course, in each semester; advisor: each student has an advisor. time_slot: allocation of time slots for the days of the week. day is the first letter of the day of the week; prereq: a course or other requirement that a student must have taken before enrolling in a specific course or program;"
  },
  {
    "db_id": "college_2",
    "query": "SELECT semester, building, room_number FROM SECTION WHERE year <= 2007",
    "query_toks": [
      "SELECT",
      "YEAR",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "year",
      "from",
      "section",
      "group",
      "by",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the semester, building and room number of the courses which ran before or in 2007.",
    "question_toks": [
      "Find",
      "the",
      "year",
      "which",
      "offers",
      "the",
      "largest",
      "number",
      "of",
      "courses",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 4]], "conds": [] },
      "select": [false, [[0, [0, [0, 18, false], null]]]],
      "where": [],
      "groupBy": [[0, 18, false]],
      "having": [],
      "orderBy": ["desc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "classroom: a room in a building, in which classes are held. capacity is a maximum number of students in a class; department: is a division of a university or school, having its budget and located in a building; course: is a series of lessons or lectures on a particular subject, taught by an instructor from the same department. each course has a certain number of credits. credits represent how much effort a student puts into a particular course; instructor: someone who teaches at an institution and belongs to a department; section: an individual course offering, distinguished from other course sections by date, time, location, instructor, delivery mode; teaches: allocations of courses and sections for each semester of learning; student: someone who attends university courses. each student obtains several credits tot cred, in a department; takes: the grade obtained by students in each section and course, in each semester; advisor: each student has an advisor. time_slot: allocation of time slots for the days of the week. day is the first letter of the day of the week; prereq: a course or other requirement that a student must have taken before enrolling in a specific course or program;"
  },
  {
    "db_id": "college_2",
    "query": "SELECT DISTINCT(T2.title) FROM section AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.year >= 2008 AND T1.semester = 'Winter'",
    "query_toks": [
      "SELECT",
      "YEAR",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "year",
      "from",
      "section",
      "group",
      "by",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "List all the different titles of courses offered since 2008 that run in the winter.",
    "question_toks": [
      "Which",
      "year",
      "had",
      "the",
      "greatest",
      "number",
      "of",
      "courses",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 4]], "conds": [] },
      "select": [false, [[0, [0, [0, 18, false], null]]]],
      "where": [],
      "groupBy": [[0, 18, false]],
      "having": [],
      "orderBy": ["desc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "classroom: a room in a building, in which classes are held. capacity is a maximum number of students in a class; department: is a division of a university or school, having its budget and located in a building; course: is a series of lessons or lectures on a particular subject, taught by an instructor from the same department. each course has a certain number of credits. credits represent how much effort a student puts into a particular course; instructor: someone who teaches at an institution and belongs to a department; section: an individual course offering, distinguished from other course sections by date, time, location, instructor, delivery mode; teaches: allocations of courses and sections for each semester of learning; student: someone who attends university courses. each student obtains several credits tot cred, in a department; takes: the grade obtained by students in each section and course, in each semester; advisor: each student has an advisor. time_slot: allocation of time slots for the days of the week. day is the first letter of the day of the week; prereq: a course or other requirement that a student must have taken before enrolling in a specific course or program;"
  },
  {
    "db_id": "college_2",
    "query": "SELECT MAX(end_hr) FROM time_slot",
    "query_toks": [
      "SELECT",
      "semester",
      ",",
      "YEAR",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "semester",
      ",",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "semester",
      ",",
      "year",
      "from",
      "section",
      "group",
      "by",
      "semester",
      ",",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the latest hour a time slot ends?",
    "question_toks": [
      "Find",
      "the",
      "year",
      "and",
      "semester",
      "when",
      "offers",
      "the",
      "largest",
      "number",
      "of",
      "courses",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 4]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 17, false], null]],
          [0, [0, [0, 18, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [
        [0, 17, false],
        [0, 18, false]
      ],
      "having": [],
      "orderBy": ["desc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "classroom: a room in a building, in which classes are held. capacity is a maximum number of students in a class; department: is a division of a university or school, having its budget and located in a building; course: is a series of lessons or lectures on a particular subject, taught by an instructor from the same department. each course has a certain number of credits. credits represent how much effort a student puts into a particular course; instructor: someone who teaches at an institution and belongs to a department; section: an individual course offering, distinguished from other course sections by date, time, location, instructor, delivery mode; teaches: allocations of courses and sections for each semester of learning; student: someone who attends university courses. each student obtains several credits tot cred, in a department; takes: the grade obtained by students in each section and course, in each semester; advisor: each student has an advisor. time_slot: allocation of time slots for the days of the week. day is the first letter of the day of the week; prereq: a course or other requirement that a student must have taken before enrolling in a specific course or program;"
  },
  {
    "db_id": "college_2",
    "query": "SELECT MIN(end_min) FROM time_slot WHERE day = 'M'",
    "query_toks": [
      "SELECT",
      "semester",
      ",",
      "YEAR",
      "FROM",
      "SECTION",
      "GROUP",
      "BY",
      "semester",
      ",",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "semester",
      ",",
      "year",
      "from",
      "section",
      "group",
      "by",
      "semester",
      ",",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "When is the earliest end minute of time slots with day 'M'?",
    "question_toks": [
      "What",
      "is",
      "the",
      "year",
      "and",
      "semester",
      "with",
      "the",
      "most",
      "courses",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 4]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 17, false], null]],
          [0, [0, [0, 18, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [
        [0, 17, false],
        [0, 18, false]
      ],
      "having": [],
      "orderBy": ["desc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "classroom: a room in a building, in which classes are held. capacity is a maximum number of students in a class; department: is a division of a university or school, having its budget and located in a building; course: is a series of lessons or lectures on a particular subject, taught by an instructor from the same department. each course has a certain number of credits. credits represent how much effort a student puts into a particular course; instructor: someone who teaches at an institution and belongs to a department; section: an individual course offering, distinguished from other course sections by date, time, location, instructor, delivery mode; teaches: allocations of courses and sections for each semester of learning; student: someone who attends university courses. each student obtains several credits tot cred, in a department; takes: the grade obtained by students in each section and course, in each semester; advisor: each student has an advisor. time_slot: allocation of time slots for the days of the week. day is the first letter of the day of the week; prereq: a course or other requirement that a student must have taken before enrolling in a specific course or program;"
  },
  {
    "db_id": "college_2",
    "query": "SELECT year, semester FROM takes GROUP BY year, semester ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "semester",
      ",",
      "YEAR",
      "FROM",
      "takes",
      "GROUP",
      "BY",
      "semester",
      ",",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "semester",
      ",",
      "year",
      "from",
      "takes",
      "group",
      "by",
      "semester",
      ",",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "limit",
      "value"
    ],
    "question": "Which year and semester have the most students taking any class?",
    "question_toks": [
      "Find",
      "the",
      "semester",
      "and",
      "year",
      "which",
      "has",
      "the",
      "least",
      "number",
      "of",
      "student",
      "taking",
      "any",
      "class",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 7]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 34, false], null]],
          [0, [0, [0, 35, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [
        [0, 34, false],
        [0, 35, false]
      ],
      "having": [],
      "orderBy": ["asc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "classroom: a room in a building, in which classes are held. capacity is a maximum number of students in a class; department: is a division of a university or school, having its budget and located in a building; course: is a series of lessons or lectures on a particular subject, taught by an instructor from the same department. each course has a certain number of credits. credits represent how much effort a student puts into a particular course; instructor: someone who teaches at an institution and belongs to a department; section: an individual course offering, distinguished from other course sections by date, time, location, instructor, delivery mode; teaches: allocations of courses and sections for each semester of learning; student: someone who attends university courses. each student obtains several credits tot cred, in a department; takes: the grade obtained by students in each section and course, in each semester; advisor: each student has an advisor. time_slot: allocation of time slots for the days of the week. day is the first letter of the day of the week; prereq: a course or other requirement that a student must have taken before enrolling in a specific course or program;"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.grade FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Calculus' AND T1.year = 2008",
    "query_toks": [
      "SELECT",
      "semester",
      ",",
      "YEAR",
      "FROM",
      "takes",
      "GROUP",
      "BY",
      "semester",
      ",",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "semester",
      ",",
      "year",
      "from",
      "takes",
      "group",
      "by",
      "semester",
      ",",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "limit",
      "value"
    ],
    "question": "List all the grades for the Calculus course in the 2008 academic session.",
    "question_toks": [
      "Which",
      "semeseter",
      "and",
      "year",
      "had",
      "the",
      "fewest",
      "students",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 7]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 34, false], null]],
          [0, [0, [0, 35, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [
        [0, 34, false],
        [0, 35, false]
      ],
      "having": [],
      "orderBy": ["asc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "classroom: a room in a building, in which classes are held. capacity is a maximum number of students in a class; department: is a division of a university or school, having its budget and located in a building; course: is a series of lessons or lectures on a particular subject, taught by an instructor from the same department. each course has a certain number of credits. credits represent how much effort a student puts into a particular course; instructor: someone who teaches at an institution and belongs to a department; section: an individual course offering, distinguished from other course sections by date, time, location, instructor, delivery mode; teaches: allocations of courses and sections for each semester of learning; student: someone who attends university courses. each student obtains several credits tot cred, in a department; takes: the grade obtained by students in each section and course, in each semester; advisor: each student has an advisor. time_slot: allocation of time slots for the days of the week. day is the first letter of the day of the week; prereq: a course or other requirement that a student must have taken before enrolling in a specific course or program;"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T2.name, T2.salary FROM teaches AS T1 JOIN instructor AS T2 ON T1.id = T2.id WHERE T1.semester = 'Spring' AND T1.year = 2007",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "student",
      "WHERE",
      "id",
      "IN",
      "(",
      "SELECT",
      "id",
      "FROM",
      "takes",
      "WHERE",
      "semester",
      "=",
      "'Fall",
      "'",
      "AND",
      "YEAR",
      "=",
      "2003",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "student",
      "where",
      "id",
      "in",
      "(",
      "select",
      "id",
      "from",
      "takes",
      "where",
      "semester",
      "=",
      "value",
      "and",
      "year",
      "=",
      "value",
      ")"
    ],
    "question": "What are the names and salaries of instructors who taught any course in the spring of 2007.",
    "question_toks": [
      "Find",
      "the",
      "names",
      "of",
      "students",
      "who",
      "have",
      "taken",
      "any",
      "course",
      "in",
      "the",
      "fall",
      "semester",
      "of",
      "year",
      "2003",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 6]], "conds": [] },
      "select": [false, [[0, [0, [0, 28, false], null]]]],
      "where": [
        [
          false,
          8,
          [0, [0, 27, false], null],
          {
            "from": { "table_units": [["table_unit", 7]], "conds": [] },
            "select": [false, [[0, [0, [0, 31, false], null]]]],
            "where": [
              [false, 2, [0, [0, 34, false], null], "\"Fall\"", null],
              "and",
              [false, 2, [0, [0, 35, false], null], 2003.0, null]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
          },
          null
        ]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "classroom: a room in a building, in which classes are held. capacity is a maximum number of students in a class; department: is a division of a university or school, having its budget and located in a building; course: is a series of lessons or lectures on a particular subject, taught by an instructor from the same department. each course has a certain number of credits. credits represent how much effort a student puts into a particular course; instructor: someone who teaches at an institution and belongs to a department; section: an individual course offering, distinguished from other course sections by date, time, location, instructor, delivery mode; teaches: allocations of courses and sections for each semester of learning; student: someone who attends university courses. each student obtains several credits tot cred, in a department; takes: the grade obtained by students in each section and course, in each semester; advisor: each student has an advisor. time_slot: allocation of time slots for the days of the week. day is the first letter of the day of the week; prereq: a course or other requirement that a student must have taken before enrolling in a specific course or program;"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.title, T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE T2.year BETWEEN 2004 AND 2007",
    "query_toks": [
      "SELECT",
      "T1.title",
      "FROM",
      "course",
      "AS",
      "T1",
      "JOIN",
      "SECTION",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "WHERE",
      "building",
      "=",
      "'Chandler",
      "'",
      "AND",
      "semester",
      "=",
      "'Fall",
      "'",
      "AND",
      "YEAR",
      "=",
      "2010"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "title",
      "from",
      "course",
      "as",
      "t1",
      "join",
      "section",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "where",
      "building",
      "=",
      "value",
      "and",
      "semester",
      "=",
      "value",
      "and",
      "year",
      "=",
      "value"
    ],
    "question": "Give the course title and instructor name of all courses taught from 2004 to 2007 inclusive.",
    "question_toks": [
      "What",
      "is",
      "the",
      "title",
      "of",
      "the",
      "course",
      "that",
      "was",
      "offered",
      "at",
      "building",
      "Chandler",
      "during",
      "the",
      "fall",
      "semester",
      "in",
      "the",
      "year",
      "of",
      "2010",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 2],
          ["table_unit", 4]
        ],
        "conds": [[false, 2, [0, [0, 7, false], null], [0, 15, false], null]]
      },
      "select": [false, [[0, [0, [0, 8, false], null]]]],
      "where": [
        [false, 2, [0, [0, 19, false], null], "\"Chandler\"", null],
        "and",
        [false, 2, [0, [0, 17, false], null], "\"Fall\"", null],
        "and",
        [false, 2, [0, [0, 18, false], null], 2010.0, null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "classroom: a room in a building, in which classes are held. capacity is a maximum number of students in a class; department: is a division of a university or school, having its budget and located in a building; course: is a series of lessons or lectures on a particular subject, taught by an instructor from the same department. each course has a certain number of credits. credits represent how much effort a student puts into a particular course; instructor: someone who teaches at an institution and belongs to a department; section: an individual course offering, distinguished from other course sections by date, time, location, instructor, delivery mode; teaches: allocations of courses and sections for each semester of learning; student: someone who attends university courses. each student obtains several credits tot cred, in a department; takes: the grade obtained by students in each section and course, in each semester; advisor: each student has an advisor. time_slot: allocation of time slots for the days of the week. day is the first letter of the day of the week; prereq: a course or other requirement that a student must have taken before enrolling in a specific course or program;"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T1.year, COUNT(*) FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'World History' GROUP BY T1.year",
    "query_toks": [
      "SELECT",
      "T1.name",
      "FROM",
      "instructor",
      "AS",
      "T1",
      "JOIN",
      "teaches",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.id",
      "JOIN",
      "course",
      "AS",
      "T3",
      "ON",
      "T2.course_id",
      "=",
      "T3.course_id",
      "WHERE",
      "T3.title",
      "=",
      "'C",
      "Programming",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "instructor",
      "as",
      "t1",
      "join",
      "teaches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "id",
      "join",
      "course",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "course_id",
      "=",
      "t3",
      ".",
      "course_id",
      "where",
      "t3",
      ".",
      "title",
      "=",
      "value"
    ],
    "question": "List the year and number of students in the World History course for every year it has ran.",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "the",
      "instructors",
      "who",
      "taught",
      "C",
      "Programming",
      "course",
      "before",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 3],
          ["table_unit", 5],
          ["table_unit", 2]
        ],
        "conds": [
          [false, 2, [0, [0, 11, false], null], [0, 22, false], null],
          "and",
          [false, 2, [0, [0, 23, false], null], [0, 7, false], null]
        ]
      },
      "select": [false, [[0, [0, [0, 12, false], null]]]],
      "where": [
        [false, 2, [0, [0, 8, false], null], "\"C Programming\"", null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "classroom: a room in a building, in which classes are held. capacity is a maximum number of students in a class; department: is a division of a university or school, having its budget and located in a building; course: is a series of lessons or lectures on a particular subject, taught by an instructor from the same department. each course has a certain number of credits. credits represent how much effort a student puts into a particular course; instructor: someone who teaches at an institution and belongs to a department; section: an individual course offering, distinguished from other course sections by date, time, location, instructor, delivery mode; teaches: allocations of courses and sections for each semester of learning; student: someone who attends university courses. each student obtains several credits tot cred, in a department; takes: the grade obtained by students in each section and course, in each semester; advisor: each student has an advisor. time_slot: allocation of time slots for the days of the week. day is the first letter of the day of the week; prereq: a course or other requirement that a student must have taken before enrolling in a specific course or program;"
  },
  {
    "db_id": "college_2",
    "query": "SELECT min(T2.year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Cybernetics'",
    "query_toks": [
      "SELECT",
      "T2.building",
      ",",
      "T2.room_number",
      ",",
      "T2.semester",
      ",",
      "T2.year",
      "FROM",
      "course",
      "AS",
      "T1",
      "JOIN",
      "SECTION",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "WHERE",
      "T1.dept_name",
      "=",
      "'Psychology",
      "'",
      "ORDER",
      "BY",
      "T1.title"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "building",
      ",",
      "t2",
      ".",
      "room_number",
      ",",
      "t2",
      ".",
      "semester",
      ",",
      "t2",
      ".",
      "year",
      "from",
      "course",
      "as",
      "t1",
      "join",
      "section",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "where",
      "t1",
      ".",
      "dept_name",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "title"
    ],
    "question": "When was the earliest year any course was offered by the Cybernetics department?",
    "question_toks": [
      "Find",
      "the",
      "building",
      ",",
      "room",
      "number",
      ",",
      "semester",
      "and",
      "year",
      "of",
      "all",
      "courses",
      "offered",
      "by",
      "Psychology",
      "department",
      "sorted",
      "by",
      "course",
      "titles",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 2],
          ["table_unit", 4]
        ],
        "conds": [[false, 2, [0, [0, 7, false], null], [0, 15, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 19, false], null]],
          [0, [0, [0, 20, false], null]],
          [0, [0, [0, 17, false], null]],
          [0, [0, [0, 18, false], null]]
        ]
      ],
      "where": [[false, 2, [0, [0, 9, false], null], "\"Psychology\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 8, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "classroom: a room in a building, in which classes are held. capacity is a maximum number of students in a class; department: is a division of a university or school, having its budget and located in a building; course: is a series of lessons or lectures on a particular subject, taught by an instructor from the same department. each course has a certain number of credits. credits represent how much effort a student puts into a particular course; instructor: someone who teaches at an institution and belongs to a department; section: an individual course offering, distinguished from other course sections by date, time, location, instructor, delivery mode; teaches: allocations of courses and sections for each semester of learning; student: someone who attends university courses. each student obtains several credits tot cred, in a department; takes: the grade obtained by students in each section and course, in each semester; advisor: each student has an advisor. time_slot: allocation of time slots for the days of the week. day is the first letter of the day of the week; prereq: a course or other requirement that a student must have taken before enrolling in a specific course or program;"
  },
  {
    "db_id": "college_2",
    "query": "SELECT T2.grade FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T1.name = 'Rudolf' ORDER BY T2.year ASC",
    "query_toks": [
      "SELECT",
      "T2.building",
      ",",
      "T2.room_number",
      ",",
      "T2.semester",
      ",",
      "T2.year",
      "FROM",
      "course",
      "AS",
      "T1",
      "JOIN",
      "SECTION",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "WHERE",
      "T1.dept_name",
      "=",
      "'Psychology",
      "'",
      "ORDER",
      "BY",
      "T1.title"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "building",
      ",",
      "t2",
      ".",
      "room_number",
      ",",
      "t2",
      ".",
      "semester",
      ",",
      "t2",
      ".",
      "year",
      "from",
      "course",
      "as",
      "t1",
      "join",
      "section",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "where",
      "t1",
      ".",
      "dept_name",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "title"
    ],
    "question": "List all of Rudolf's grades ordered from earliest to latest",
    "question_toks": [
      "What",
      "are",
      "the",
      "building",
      ",",
      "room",
      "number",
      ",",
      "semester",
      "and",
      "year",
      "of",
      "courses",
      "in",
      "the",
      "Psychology",
      "department",
      ",",
      "sorted",
      "using",
      "course",
      "title",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 2],
          ["table_unit", 4]
        ],
        "conds": [[false, 2, [0, [0, 7, false], null], [0, 15, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 19, false], null]],
          [0, [0, [0, 20, false], null]],
          [0, [0, [0, 17, false], null]],
          [0, [0, [0, 18, false], null]]
        ]
      ],
      "where": [[false, 2, [0, [0, 9, false], null], "\"Psychology\"", null]],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 8, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "classroom: a room in a building, in which classes are held. capacity is a maximum number of students in a class; department: is a division of a university or school, having its budget and located in a building; course: is a series of lessons or lectures on a particular subject, taught by an instructor from the same department. each course has a certain number of credits. credits represent how much effort a student puts into a particular course; instructor: someone who teaches at an institution and belongs to a department; section: an individual course offering, distinguished from other course sections by date, time, location, instructor, delivery mode; teaches: allocations of courses and sections for each semester of learning; student: someone who attends university courses. each student obtains several credits tot cred, in a department; takes: the grade obtained by students in each section and course, in each semester; advisor: each student has an advisor. time_slot: allocation of time slots for the days of the week. day is the first letter of the day of the week; prereq: a course or other requirement that a student must have taken before enrolling in a specific course or program;"
  },
  {
    "db_id": "debate",
    "query": "SELECT Venue, Num_of_Audience FROM debate WHERE Date LIKE '%17'",
    "query_toks": ["SELECT", "Date", ",", "Venue", "FROM", "debate"],
    "query_toks_no_value": ["select", "date", ",", "venue", "from", "debate"],
    "question": "List the venue and audience number of the debates that occurred on a date that ends in '17'",
    "question_toks": [
      "What",
      "are",
      "the",
      "date",
      "and",
      "venue",
      "of",
      "each",
      "debate",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 7, false], null]],
          [0, [0, [0, 8, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "people: a person who is debating, belongs to a party, and is located in a district; debate: is a process that involves formal discourse on a particular topic, often including a moderator and audience; debate_people: in each debate, there are two teams of speakers. affirmative is the people which argue for the topic. negative is the people arguing against the topic. if_afirmative_win is a True if the affirmative team has won, otherwise if the negative team won it is False;"
  },
  {
    "db_id": "debate",
    "query": "SELECT party, AVG(age) FROM people GROUP BY party",
    "query_toks": [
      "SELECT",
      "Party",
      "FROM",
      "people",
      "ORDER",
      "BY",
      "Age",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "party",
      "from",
      "people",
      "order",
      "by",
      "age",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the mean age of people in each party?",
    "question_toks": [
      "What",
      "is",
      "the",
      "party",
      "of",
      "the",
      "youngest",
      "people",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [false, [[0, [0, [0, 4, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 5, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "people: a person who is debating, belongs to a party, and is located in a district; debate: is a process that involves formal discourse on a particular topic, often including a moderator and audience; debate_people: in each debate, there are two teams of speakers. affirmative is the people which argue for the topic. negative is the people arguing against the topic. if_afirmative_win is a True if the affirmative team has won, otherwise if the negative team won it is False;"
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT account_id ,  account_name FROM Accounts ORDER BY date_account_opened",
    "query_toks": [
      "SELECT",
      "account_id",
      ",",
      "date_account_opened",
      ",",
      "account_name",
      ",",
      "other_account_details",
      "FROM",
      "Accounts"
    ],
    "query_toks_no_value": [
      "select",
      "account_id",
      ",",
      "date_account_opened",
      ",",
      "account_name",
      ",",
      "other_account_details",
      "from",
      "accounts"
    ],
    "question": "List the id and name of all accounts in the order they were opened.",
    "question_toks": [
      "Show",
      "the",
      "id",
      ",",
      "the",
      "date",
      "of",
      "account",
      "opened",
      ",",
      "the",
      "account",
      "name",
      ",",
      "and",
      "other",
      "account",
      "detail",
      "for",
      "all",
      "accounts",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 3]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 20, false], null]],
          [0, [0, [0, 22, false], null]],
          [0, [0, [0, 23, false], null]],
          [0, [0, [0, 24, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "customers: persons who buy goods or services from a shop or business; orders: formal orders from the customer which provides details of the amount and due date for a customer's requirement of products; invoices: lists of goods sent or services provided, with a statement of the sum due for these customer invoice is a binding settlement of outstanding amounts and if a bill issued by the seller when that product has been delivered or the service has been completed; accounts: centralized places to manage all billing information about customers; product_categories: a group of similar products that share related characteristics; products: articles or substances that are manufactured or refined for sale. can be derived from parent products. name is the product name; financial_transactions: agreements, or communications, between a buyer and seller to exchange goods, services, or assets for payment; order_items: specify the quantities of product in the context of a sales order; invoice_line_items: for each item is a single entry on an invoice."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT MAX(T1.date_account_opened) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan' AND T2.customer_last_name = 'Keeling'",
    "query_toks": [
      "SELECT",
      "account_id",
      ",",
      "date_account_opened",
      ",",
      "account_name",
      ",",
      "other_account_details",
      "FROM",
      "Accounts"
    ],
    "query_toks_no_value": [
      "select",
      "account_id",
      ",",
      "date_account_opened",
      ",",
      "account_name",
      ",",
      "other_account_details",
      "from",
      "accounts"
    ],
    "question": "When did Meaghan Keeling last open an account?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      ",",
      "date",
      "opened",
      ",",
      "name",
      ",",
      "and",
      "other",
      "details",
      "for",
      "all",
      "accounts",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 3]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 20, false], null]],
          [0, [0, [0, 22, false], null]],
          [0, [0, [0, 23, false], null]],
          [0, [0, [0, 24, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "customers: persons who buy goods or services from a shop or business; orders: formal orders from the customer which provides details of the amount and due date for a customer's requirement of products; invoices: lists of goods sent or services provided, with a statement of the sum due for these customer invoice is a binding settlement of outstanding amounts and if a bill issued by the seller when that product has been delivered or the service has been completed; accounts: centralized places to manage all billing information about customers; product_categories: a group of similar products that share related characteristics; products: articles or substances that are manufactured or refined for sale. can be derived from parent products. name is the product name; financial_transactions: agreements, or communications, between a buyer and seller to exchange goods, services, or assets for payment; order_items: specify the quantities of product in the context of a sales order; invoice_line_items: for each item is a single entry on an invoice."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.invoice_number",
      ",",
      "T2.invoice_date",
      "FROM",
      "Financial_transactions",
      "AS",
      "T1",
      "JOIN",
      "Invoices",
      "AS",
      "T2",
      "ON",
      "T1.invoice_number",
      "=",
      "T2.invoice_number",
      "GROUP",
      "BY",
      "T1.invoice_number",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "invoice_number",
      ",",
      "t2",
      ".",
      "invoice_date",
      "from",
      "financial_transactions",
      "as",
      "t1",
      "join",
      "invoices",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "invoice_number",
      "=",
      "t2",
      ".",
      "invoice_number",
      "group",
      "by",
      "t1",
      ".",
      "invoice_number",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the date of the invoice with the least transactions?",
    "question_toks": [
      "What",
      "is",
      "the",
      "invoice",
      "number",
      "and",
      "invoice",
      "date",
      "for",
      "the",
      "invoice",
      "with",
      "most",
      "number",
      "of",
      "transactions",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 6],
          ["table_unit", 2]
        ],
        "conds": [[false, 2, [0, [0, 37, false], null], [0, 17, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 17, false], null]],
          [0, [0, [0, 19, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [[0, 37, false]],
      "having": [],
      "orderBy": ["desc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "customers: persons who buy goods or services from a shop or business; orders: formal orders from the customer which provides details of the amount and due date for a customer's requirement of products; invoices: lists of goods sent or services provided, with a statement of the sum due for these customer invoice is a binding settlement of outstanding amounts and if a bill issued by the seller when that product has been delivered or the service has been completed; accounts: centralized places to manage all billing information about customers; product_categories: a group of similar products that share related characteristics; products: articles or substances that are manufactured or refined for sale. can be derived from parent products. name is the product name; financial_transactions: agreements, or communications, between a buyer and seller to exchange goods, services, or assets for payment; order_items: specify the quantities of product in the context of a sales order; invoice_line_items: for each item is a single entry on an invoice."
  },
  {
    "db_id": "customers_and_invoices",
    "query": "SELECT account_id, invoice_number, transaction_type, transaction_date, transaction_amount FROM Financial_Transactions ORDER BY transaction_date",
    "query_toks": [
      "SELECT",
      "T2.invoice_number",
      ",",
      "T2.invoice_date",
      "FROM",
      "Financial_transactions",
      "AS",
      "T1",
      "JOIN",
      "Invoices",
      "AS",
      "T2",
      "ON",
      "T1.invoice_number",
      "=",
      "T2.invoice_number",
      "GROUP",
      "BY",
      "T1.invoice_number",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "invoice_number",
      ",",
      "t2",
      ".",
      "invoice_date",
      "from",
      "financial_transactions",
      "as",
      "t1",
      "join",
      "invoices",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "invoice_number",
      "=",
      "t2",
      ".",
      "invoice_number",
      "group",
      "by",
      "t1",
      ".",
      "invoice_number",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the account id, invoice number, type, date and amount of all transactions ordered by date.",
    "question_toks": [
      "What",
      "is",
      "the",
      "invoice",
      "number",
      "and",
      "invoice",
      "date",
      "corresponding",
      "to",
      "the",
      "invoice",
      "with",
      "the",
      "greatest",
      "number",
      "of",
      "transactions",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 6],
          ["table_unit", 2]
        ],
        "conds": [[false, 2, [0, [0, 37, false], null], [0, 17, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 17, false], null]],
          [0, [0, [0, 19, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [[0, 37, false]],
      "having": [],
      "orderBy": ["desc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "customers: persons who buy goods or services from a shop or business; orders: formal orders from the customer which provides details of the amount and due date for a customer's requirement of products; invoices: lists of goods sent or services provided, with a statement of the sum due for these customer invoice is a binding settlement of outstanding amounts and if a bill issued by the seller when that product has been delivered or the service has been completed; accounts: centralized places to manage all billing information about customers; product_categories: a group of similar products that share related characteristics; products: articles or substances that are manufactured or refined for sale. can be derived from parent products. name is the product name; financial_transactions: agreements, or communications, between a buyer and seller to exchange goods, services, or assets for payment; order_items: specify the quantities of product in the context of a sales order; invoice_line_items: for each item is a single entry on an invoice."
  },
  {
    "db_id": "wedding",
    "query": "SELECT name FROM Church ORDER BY open_date ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Church",
      "WHERE",
      "Open_Date",
      "<",
      "1850"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "church",
      "where",
      "open_date",
      "<",
      "value"
    ],
    "question": "What is the name of the oldest church?",
    "question_toks": [
      "How",
      "many",
      "churches",
      "opened",
      "before",
      "1850",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[3, [0, [0, 0, false], null]]]],
      "where": [[false, 4, [0, [0, 9, false], null], 1850.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "people: both women and men are people. country is where people come from. age is the age of a person. gender is 'F' if the person is female, othwerwise if the person is a male, it is 'M'; church: a building used for Christian public worship and for weddings. name is the church name. organized_by is the name of the person who organized the wedding ceremony. open_date is the date in which the church began its activity and opened to the public as a datetime. continuation_of the church is a form of Christian denomination; wedding: a wedding ceremony's prime function is to provide the woman and man an opportunity to make promises to each other. year is the year in which the wedding takes place wedding year;"
  },
  {
    "db_id": "wedding",
    "query": "SELECT * FROM Church ORDER BY open_date",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "open_date",
      ",",
      "organized_by",
      "FROM",
      "Church"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "open_date",
      ",",
      "organized_by",
      "from",
      "church"
    ],
    "question": "Show all church details in the order they opened.",
    "question_toks": [
      "Show",
      "the",
      "name",
      ",",
      "open",
      "date",
      ",",
      "and",
      "organizer",
      "for",
      "all",
      "churches",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 7, false], null]],
          [0, [0, [0, 9, false], null]],
          [0, [0, [0, 8, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "people: both women and men are people. country is where people come from. age is the age of a person. gender is 'F' if the person is female, othwerwise if the person is a male, it is 'M'; church: a building used for Christian public worship and for weddings. name is the church name. organized_by is the name of the person who organized the wedding ceremony. open_date is the date in which the church began its activity and opened to the public as a datetime. continuation_of the church is a form of Christian denomination; wedding: a wedding ceremony's prime function is to provide the woman and man an opportunity to make promises to each other. year is the year in which the wedding takes place wedding year;"
  },
  {
    "db_id": "wedding",
    "query": "SELECT COUNT(*) FROM church WHERE open_date BETWEEN 1800 AND 1899",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "church",
      "ORDER",
      "BY",
      "open_date",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "church",
      "order",
      "by",
      "open_date",
      "desc"
    ],
    "question": "How many churches were built in the 19th century?",
    "question_toks": [
      "List",
      "all",
      "church",
      "names",
      "in",
      "descending",
      "order",
      "of",
      "opening",
      "date",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 7, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 9, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "people: both women and men are people. country is where people come from. age is the age of a person. gender is 'F' if the person is female, othwerwise if the person is a male, it is 'M'; church: a building used for Christian public worship and for weddings. name is the church name. organized_by is the name of the person who organized the wedding ceremony. open_date is the date in which the church began its activity and opened to the public as a datetime. continuation_of the church is a form of Christian denomination; wedding: a wedding ceremony's prime function is to provide the woman and man an opportunity to make promises to each other. year is the year in which the wedding takes place wedding year;"
  },
  {
    "db_id": "wedding",
    "query": "SELECT DISTINCT(open_date) FROM church WHERE name LIKE '%Christ%'",
    "query_toks": [
      "SELECT",
      "open_date",
      "FROM",
      "church",
      "GROUP",
      "BY",
      "open_date",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "open_date",
      "from",
      "church",
      "group",
      "by",
      "open_date",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "List all the different years a church with 'Christ' in its name was opened.",
    "question_toks": [
      "Show",
      "the",
      "opening",
      "year",
      "in",
      "whcih",
      "at",
      "least",
      "two",
      "churches",
      "opened",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 9, false], null]]]],
      "where": [],
      "groupBy": [[0, 9, false]],
      "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "people: both women and men are people. country is where people come from. age is the age of a person. gender is 'F' if the person is female, othwerwise if the person is a male, it is 'M'; church: a building used for Christian public worship and for weddings. name is the church name. organized_by is the name of the person who organized the wedding ceremony. open_date is the date in which the church began its activity and opened to the public as a datetime. continuation_of the church is a form of Christian denomination; wedding: a wedding ceremony's prime function is to provide the woman and man an opportunity to make promises to each other. year is the year in which the wedding takes place wedding year;"
  },
  {
    "db_id": "wedding",
    "query": "SELECT name, organized_by FROM church WHERE open_date BETWEEN 1835 AND 1840",
    "query_toks": [
      "SELECT",
      "open_date",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "church",
      "GROUP",
      "BY",
      "open_date"
    ],
    "query_toks_no_value": [
      "select",
      "open_date",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "church",
      "group",
      "by",
      "open_date"
    ],
    "question": "List the names and organizers of all churches with opening year from 1835 to 1840.",
    "question_toks": [
      "Show",
      "all",
      "opening",
      "years",
      "and",
      "the",
      "number",
      "of",
      "churches",
      "that",
      "opened",
      "in",
      "that",
      "year",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 9, false], null]],
          [3, [0, [0, 0, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [[0, 9, false]],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "people: both women and men are people. country is where people come from. age is the age of a person. gender is 'F' if the person is female, othwerwise if the person is a male, it is 'M'; church: a building used for Christian public worship and for weddings. name is the church name. organized_by is the name of the person who organized the wedding ceremony. open_date is the date in which the church began its activity and opened to the public as a datetime. continuation_of the church is a form of Christian denomination; wedding: a wedding ceremony's prime function is to provide the woman and man an opportunity to make promises to each other. year is the year in which the wedding takes place wedding year;"
  },
  {
    "db_id": "wedding",
    "query": "SELECT id, name FROM church ORDER BY open_date DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "open_date",
      "FROM",
      "church",
      "ORDER",
      "BY",
      "open_date",
      "DESC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "open_date",
      "from",
      "church",
      "order",
      "by",
      "open_date",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the id and name of the newest church?",
    "question_toks": [
      "Show",
      "the",
      "name",
      "and",
      "opening",
      "year",
      "for",
      "three",
      "churches",
      "that",
      "opened",
      "most",
      "recently",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 7, false], null]],
          [0, [0, [0, 9, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 9, false], null]]],
      "limit": 3,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "people: both women and men are people. country is where people come from. age is the age of a person. gender is 'F' if the person is female, othwerwise if the person is a male, it is 'M'; church: a building used for Christian public worship and for weddings. name is the church name. organized_by is the name of the person who organized the wedding ceremony. open_date is the date in which the church began its activity and opened to the public as a datetime. continuation_of the church is a form of Christian denomination; wedding: a wedding ceremony's prime function is to provide the woman and man an opportunity to make promises to each other. year is the year in which the wedding takes place wedding year;"
  },
  {
    "db_id": "wedding",
    "query": "SELECT count(*) FROM people WHERE is_male  =  'T' AND age  >=  27",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "people",
      "WHERE",
      "is_male",
      "=",
      "'F",
      "'",
      "AND",
      "age",
      ">",
      "30"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "people",
      "where",
      "is_male",
      "=",
      "value",
      "and",
      "age",
      ">",
      "value"
    ],
    "question": "Count the number of men who are at least 27 years old.",
    "question_toks": [
      "How",
      "many",
      "female",
      "people",
      "are",
      "older",
      "than",
      "30",
      "in",
      "our",
      "record",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [false, [[3, [0, [0, 0, false], null]]]],
      "where": [
        [false, 2, [0, [0, 4, false], null], "\"F\"", null],
        "and",
        [false, 3, [0, [0, 5, false], null], 30.0, null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "people: both women and men are people. country is where people come from. age is the age of a person. gender is 'F' if the person is female, othwerwise if the person is a male, it is 'M'; church: a building used for Christian public worship and for weddings. name is the church name. organized_by is the name of the person who organized the wedding ceremony. open_date is the date in which the church began its activity and opened to the public as a datetime. continuation_of the church is a form of Christian denomination; wedding: a wedding ceremony's prime function is to provide the woman and man an opportunity to make promises to each other. year is the year in which the wedding takes place wedding year;"
  },
  {
    "db_id": "wedding",
    "query": "SELECT DISTINCT(country) FROM people WHERE age  >  30 EXCEPT SELECT country FROM people WHERE age  <  28",
    "query_toks": [
      "SELECT",
      "country",
      "FROM",
      "people",
      "WHERE",
      "age",
      "<",
      "25",
      "INTERSECT",
      "SELECT",
      "country",
      "FROM",
      "people",
      "WHERE",
      "age",
      ">",
      "30"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      "from",
      "people",
      "where",
      "age",
      "<",
      "value",
      "intersect",
      "select",
      "country",
      "from",
      "people",
      "where",
      "age",
      ">",
      "value"
    ],
    "question": "Which distinct countries have people older than 30 but no people younger than 28?",
    "question_toks": [
      "Show",
      "the",
      "country",
      "where",
      "people",
      "older",
      "than",
      "30",
      "and",
      "younger",
      "than",
      "25",
      "are",
      "from",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [false, [[0, [0, [0, 3, false], null]]]],
      "where": [[false, 4, [0, [0, 5, false], null], 25.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": { "table_units": [["table_unit", 0]], "conds": [] },
        "select": [false, [[0, [0, [0, 3, false], null]]]],
        "where": [[false, 3, [0, [0, 5, false], null], 30.0, null]],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "db_description": "people: both women and men are people. country is where people come from. age is the age of a person. gender is 'F' if the person is female, othwerwise if the person is a male, it is 'M'; church: a building used for Christian public worship and for weddings. name is the church name. organized_by is the name of the person who organized the wedding ceremony. open_date is the date in which the church began its activity and opened to the public as a datetime. continuation_of the church is a form of Christian denomination; wedding: a wedding ceremony's prime function is to provide the woman and man an opportunity to make promises to each other. year is the year in which the wedding takes place wedding year;"
  },
  {
    "db_id": "wedding",
    "query": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  <=  2014",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "T3.name",
      "FROM",
      "wedding",
      "AS",
      "T1",
      "JOIN",
      "people",
      "AS",
      "T2",
      "ON",
      "T1.male_id",
      "=",
      "T2.people_id",
      "JOIN",
      "people",
      "AS",
      "T3",
      "ON",
      "T1.female_id",
      "=",
      "T3.people_id",
      "WHERE",
      "T1.year",
      ">",
      "2014"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t3",
      ".",
      "name",
      "from",
      "wedding",
      "as",
      "t1",
      "join",
      "people",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "male_id",
      "=",
      "t2",
      ".",
      "people_id",
      "join",
      "people",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "female_id",
      "=",
      "t3",
      ".",
      "people_id",
      "where",
      "t1",
      ".",
      "year",
      ">",
      "value"
    ],
    "question": "Show the female names in all weddings before or in the year 2014",
    "question_toks": [
      "Show",
      "the",
      "pair",
      "of",
      "male",
      "and",
      "female",
      "names",
      "in",
      "all",
      "weddings",
      "after",
      "year",
      "2014"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 2],
          ["table_unit", 0],
          ["table_unit", 0]
        ],
        "conds": [
          [false, 2, [0, [0, 12, false], null], [0, 1, false], null],
          "and",
          [false, 2, [0, [0, 13, false], null], [0, 1, false], null]
        ]
      },
      "select": [
        false,
        [
          [0, [0, [0, 2, false], null]],
          [0, [0, [0, 2, false], null]]
        ]
      ],
      "where": [[false, 3, [0, [0, 14, false], null], 2014.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "people: both women and men are people. country is where people come from. age is the age of a person. gender is 'F' if the person is female, othwerwise if the person is a male, it is 'M'; church: a building used for Christian public worship and for weddings. name is the church name. organized_by is the name of the person who organized the wedding ceremony. open_date is the date in which the church began its activity and opened to the public as a datetime. continuation_of the church is a form of Christian denomination; wedding: a wedding ceremony's prime function is to provide the woman and man an opportunity to make promises to each other. year is the year in which the wedding takes place wedding year;"
  },
  {
    "db_id": "wedding",
    "query": "SELECT T1.name, T1.open_date FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T2.church_id ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "church",
      "EXCEPT",
      "SELECT",
      "T1.name",
      "FROM",
      "church",
      "AS",
      "T1",
      "JOIN",
      "wedding",
      "AS",
      "T2",
      "ON",
      "T1.church_id",
      "=",
      "T2.church_id",
      "WHERE",
      "T2.year",
      "=",
      "2015"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "church",
      "except",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "church",
      "as",
      "t1",
      "join",
      "wedding",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "church_id",
      "=",
      "t2",
      ".",
      "church_id",
      "where",
      "t2",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "What is the name and open date of the church which had the most weddings?",
    "question_toks": [
      "Show",
      "all",
      "church",
      "names",
      "except",
      "for",
      "those",
      "that",
      "had",
      "a",
      "wedding",
      "in",
      "year",
      "2015",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 7, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": {
        "from": {
          "table_units": [
            ["table_unit", 1],
            ["table_unit", 2]
          ],
          "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]
        },
        "select": [false, [[0, [0, [0, 7, false], null]]]],
        "where": [[false, 2, [0, [0, 14, false], null], 2015.0, null]],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      }
    },
    "db_description": "people: both women and men are people. country is where people come from. age is the age of a person. gender is 'F' if the person is female, othwerwise if the person is a male, it is 'M'; church: a building used for Christian public worship and for weddings. name is the church name. organized_by is the name of the person who organized the wedding ceremony. open_date is the date in which the church began its activity and opened to the public as a datetime. continuation_of the church is a form of Christian denomination; wedding: a wedding ceremony's prime function is to provide the woman and man an opportunity to make promises to each other. year is the year in which the wedding takes place wedding year;"
  },
  {
    "db_id": "wedding",
    "query": "SELECT COUNT(*) FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN church AS T3 ON T1.church_id = T3.church_id WHERE T2.is_male  =  'T' AND T2.age > 27 AND T1.year = 2016 AND T3.open_date = 1837",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "wedding",
      "AS",
      "T1",
      "JOIN",
      "people",
      "AS",
      "T2",
      "ON",
      "T1.female_id",
      "=",
      "T2.people_id",
      "WHERE",
      "T1.year",
      "=",
      "2016",
      "AND",
      "T2.is_male",
      "=",
      "'F",
      "'",
      "AND",
      "T2.country",
      "=",
      "'Canada",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "wedding",
      "as",
      "t1",
      "join",
      "people",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "female_id",
      "=",
      "t2",
      ".",
      "people_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "is_male",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "country",
      "=",
      "value"
    ],
    "question": "How many male people of age greater than 27 had a wedding in the year 2016 in a church with open date 1837?",
    "question_toks": [
      "Show",
      "the",
      "names",
      "for",
      "all",
      "females",
      "from",
      "Canada",
      "having",
      "a",
      "wedding",
      "in",
      "year",
      "2016",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 2],
          ["table_unit", 0]
        ],
        "conds": [[false, 2, [0, [0, 13, false], null], [0, 1, false], null]]
      },
      "select": [false, [[0, [0, [0, 2, false], null]]]],
      "where": [
        [false, 2, [0, [0, 14, false], null], 2016.0, null],
        "and",
        [false, 2, [0, [0, 4, false], null], "\"F\"", null],
        "and",
        [false, 2, [0, [0, 3, false], null], "\"Canada\"", null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "people: both women and men are people. country is where people come from. age is the age of a person. gender is 'F' if the person is female, othwerwise if the person is a male, it is 'M'; church: a building used for Christian public worship and for weddings. name is the church name. organized_by is the name of the person who organized the wedding ceremony. open_date is the date in which the church began its activity and opened to the public as a datetime. continuation_of the church is a form of Christian denomination; wedding: a wedding ceremony's prime function is to provide the woman and man an opportunity to make promises to each other. year is the year in which the wedding takes place wedding year;"
  },
  {
    "db_id": "wedding",
    "query": "SELECT COUNT(*) FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN church AS T3 ON T1.church_id = T3.church_id WHERE T2.is_male  =  'T' AND T2.age > 27 AND T1.year = 2016 AND T3.open_date = 1837",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "wedding",
      "WHERE",
      "YEAR",
      "=",
      "2016"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "wedding",
      "where",
      "year",
      "=",
      "value"
    ],
    "question": "How many men who are older than 27 got married in 2016 in a church which opened in 1837?",
    "question_toks": [
      "How",
      "many",
      "weddings",
      "are",
      "there",
      "in",
      "year",
      "2016",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 2]], "conds": [] },
      "select": [false, [[3, [0, [0, 0, false], null]]]],
      "where": [[false, 2, [0, [0, 14, false], null], 2016.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "people: both women and men are people. country is where people come from. age is the age of a person. gender is 'F' if the person is female, othwerwise if the person is a male, it is 'M'; church: a building used for Christian public worship and for weddings. name is the church name. organized_by is the name of the person who organized the wedding ceremony. open_date is the date in which the church began its activity and opened to the public as a datetime. continuation_of the church is a form of Christian denomination; wedding: a wedding ceremony's prime function is to provide the woman and man an opportunity to make promises to each other. year is the year in which the wedding takes place wedding year;"
  },
  {
    "db_id": "wedding",
    "query": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30",
    "query_toks": [
      "SELECT",
      "T4.name",
      "FROM",
      "wedding",
      "AS",
      "T1",
      "JOIN",
      "people",
      "AS",
      "T2",
      "ON",
      "T1.male_id",
      "=",
      "T2.people_id",
      "JOIN",
      "people",
      "AS",
      "T3",
      "ON",
      "T1.female_id",
      "=",
      "T3.people_id",
      "JOIN",
      "church",
      "AS",
      "T4",
      "ON",
      "T4.church_id",
      "=",
      "T1.church_id",
      "WHERE",
      "T2.age",
      ">",
      "30",
      "OR",
      "T3.age",
      ">",
      "30"
    ],
    "query_toks_no_value": [
      "select",
      "t4",
      ".",
      "name",
      "from",
      "wedding",
      "as",
      "t1",
      "join",
      "people",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "male_id",
      "=",
      "t2",
      ".",
      "people_id",
      "join",
      "people",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "female_id",
      "=",
      "t3",
      ".",
      "people_id",
      "join",
      "church",
      "as",
      "t4",
      "on",
      "t4",
      ".",
      "church_id",
      "=",
      "t1",
      ".",
      "church_id",
      "where",
      "t2",
      ".",
      "age",
      ">",
      "value",
      "or",
      "t3",
      ".",
      "age",
      ">",
      "value"
    ],
    "question": "List the names of churches for the weddings of everyone who is more than 30 years of age.",
    "question_toks": [
      "Show",
      "the",
      "church",
      "names",
      "for",
      "the",
      "weddings",
      "of",
      "all",
      "people",
      "older",
      "than",
      "30",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 2],
          ["table_unit", 0],
          ["table_unit", 0],
          ["table_unit", 1]
        ],
        "conds": [
          [false, 2, [0, [0, 12, false], null], [0, 1, false], null],
          "and",
          [false, 2, [0, [0, 13, false], null], [0, 1, false], null],
          "and",
          [false, 2, [0, [0, 6, false], null], [0, 11, false], null]
        ]
      },
      "select": [false, [[0, [0, [0, 7, false], null]]]],
      "where": [
        [false, 3, [0, [0, 5, false], null], 30.0, null],
        "or",
        [false, 3, [0, [0, 5, false], null], 30.0, null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "people: both women and men are people. country is where people come from. age is the age of a person. gender is 'F' if the person is female, othwerwise if the person is a male, it is 'M'; church: a building used for Christian public worship and for weddings. name is the church name. organized_by is the name of the person who organized the wedding ceremony. open_date is the date in which the church began its activity and opened to the public as a datetime. continuation_of the church is a form of Christian denomination; wedding: a wedding ceremony's prime function is to provide the woman and man an opportunity to make promises to each other. year is the year in which the wedding takes place wedding year;"
  },
  {
    "db_id": "wedding",
    "query": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  <  2016",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "church_id",
      ")",
      "FROM",
      "wedding",
      "WHERE",
      "YEAR",
      "=",
      "2016"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "church_id",
      ")",
      "from",
      "wedding",
      "where",
      "year",
      "=",
      "value"
    ],
    "question": "Count the number of churches that had a wedding prior to 2016?",
    "question_toks": [
      "How",
      "many",
      "churches",
      "have",
      "a",
      "wedding",
      "in",
      "year",
      "2016",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 2]], "conds": [] },
      "select": [false, [[3, [0, [0, 11, true], null]]]],
      "where": [[false, 2, [0, [0, 14, false], null], 2016.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "people: both women and men are people. country is where people come from. age is the age of a person. gender is 'F' if the person is female, othwerwise if the person is a male, it is 'M'; church: a building used for Christian public worship and for weddings. name is the church name. organized_by is the name of the person who organized the wedding ceremony. open_date is the date in which the church began its activity and opened to the public as a datetime. continuation_of the church is a form of Christian denomination; wedding: a wedding ceremony's prime function is to provide the woman and man an opportunity to make promises to each other. year is the year in which the wedding takes place wedding year;"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT name  ,  country FROM artist ORDER BY Year_Join ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "age",
      ",",
      "country",
      "FROM",
      "artist",
      "ORDER",
      "BY",
      "Year_Join"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "age",
      ",",
      "country",
      "from",
      "artist",
      "order",
      "by",
      "year_join"
    ],
    "question": "What is the name and country of the artist who joined first?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      ",",
      "ages",
      ",",
      "and",
      "countries",
      "of",
      "artists",
      ",",
      "sorted",
      "by",
      "the",
      "year",
      "they",
      "joined",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 2, false], null]],
          [0, [0, [0, 5, false], null]],
          [0, [0, [0, 3, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 4, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artist: a person who produces works in any of the arts that are primarily subject to aesthetic criteria. country is the geographical place where the artist was born. year_join is when the artist joined as a datetime; exhibition: a public event at which pictures, sculptures, or other objects of interest are displayed, for example at a museum or art gallery. ticket_price is the full price paid for a ticket at the exhibition; attendance_record: the record of how often a person has attended an exhibition on a specific date. attendance is the number of people;"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT name FROM artist WHERE year_join = 1991 AND age >= 50",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "year_join",
      "FROM",
      "artist",
      "WHERE",
      "country",
      "!",
      "=",
      "'United",
      "States",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "year_join",
      "from",
      "artist",
      "where",
      "country",
      "!",
      "=",
      "value"
    ],
    "question": "Show all artist names who joined in 1991 and who are aged 50 or over.",
    "question_toks": [
      "Show",
      "all",
      "artist",
      "names",
      "and",
      "the",
      "year",
      "joined",
      "who",
      "are",
      "not",
      "from",
      "United",
      "States",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 2, false], null]],
          [0, [0, [0, 4, false], null]]
        ]
      ],
      "where": [
        [false, 7, [0, [0, 3, false], null], "\"United States\"", null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artist: a person who produces works in any of the arts that are primarily subject to aesthetic criteria. country is the geographical place where the artist was born. year_join is when the artist joined as a datetime; exhibition: a public event at which pictures, sculptures, or other objects of interest are displayed, for example at a museum or art gallery. ticket_price is the full price paid for a ticket at the exhibition; attendance_record: the record of how often a person has attended an exhibition on a specific date. attendance is the number of people;"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT name FROM artist WHERE age = (SELECT MIN(age) FROM artist) UNION SELECT name FROM artist WHERE year_join = (SELECT MAX(year_join) FROM artist);",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "year_join",
      "FROM",
      "artist",
      "WHERE",
      "country",
      "!",
      "=",
      "'United",
      "States",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "year_join",
      "from",
      "artist",
      "where",
      "country",
      "!",
      "=",
      "value"
    ],
    "question": "Give me the names of the youngest artist and the latest artist to join",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "year",
      "of",
      "joining",
      "for",
      "artists",
      "that",
      "do",
      "not",
      "have",
      "the",
      "country",
      "``",
      "United",
      "States",
      "''",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 2, false], null]],
          [0, [0, [0, 4, false], null]]
        ]
      ],
      "where": [
        [false, 7, [0, [0, 3, false], null], "\"United States\"", null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artist: a person who produces works in any of the arts that are primarily subject to aesthetic criteria. country is the geographical place where the artist was born. year_join is when the artist joined as a datetime; exhibition: a public event at which pictures, sculptures, or other objects of interest are displayed, for example at a museum or art gallery. ticket_price is the full price paid for a ticket at the exhibition; attendance_record: the record of how often a person has attended an exhibition on a specific date. attendance is the number of people;"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT count(*) FROM artist WHERE age  >  46 AND country = 'United States'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "artist",
      "WHERE",
      "age",
      ">",
      "46",
      "AND",
      "year_join",
      ">",
      "1990"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "artist",
      "where",
      "age",
      ">",
      "value",
      "and",
      "year_join",
      ">",
      "value"
    ],
    "question": "How many artists older than 46 are from the United States?",
    "question_toks": [
      "How",
      "many",
      "artists",
      "are",
      "above",
      "age",
      "46",
      "and",
      "joined",
      "after",
      "1990",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [false, [[3, [0, [0, 0, false], null]]]],
      "where": [
        [false, 3, [0, [0, 5, false], null], 46.0, null],
        "and",
        [false, 3, [0, [0, 4, false], null], 1990.0, null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artist: a person who produces works in any of the arts that are primarily subject to aesthetic criteria. country is the geographical place where the artist was born. year_join is when the artist joined as a datetime; exhibition: a public event at which pictures, sculptures, or other objects of interest are displayed, for example at a museum or art gallery. ticket_price is the full price paid for a ticket at the exhibition; attendance_record: the record of how often a person has attended an exhibition on a specific date. attendance is the number of people;"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T1.name FROM artist AS T1 JOIN exhibition AS T2 ON T1.artist_id = T2.artist_id WHERE T2.year <= 2006",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "artist",
      "WHERE",
      "age",
      ">",
      "46",
      "AND",
      "year_join",
      ">",
      "1990"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "artist",
      "where",
      "age",
      ">",
      "value",
      "and",
      "year_join",
      ">",
      "value"
    ],
    "question": "Give all the names of artists who had an exhibition in 2006 or before.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "artists",
      "who",
      "are",
      "older",
      "than",
      "46",
      "and",
      "joined",
      "after",
      "1990",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [false, [[3, [0, [0, 0, false], null]]]],
      "where": [
        [false, 3, [0, [0, 5, false], null], 46.0, null],
        "and",
        [false, 3, [0, [0, 4, false], null], 1990.0, null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artist: a person who produces works in any of the arts that are primarily subject to aesthetic criteria. country is the geographical place where the artist was born. year_join is when the artist joined as a datetime; exhibition: a public event at which pictures, sculptures, or other objects of interest are displayed, for example at a museum or art gallery. ticket_price is the full price paid for a ticket at the exhibition; attendance_record: the record of how often a person has attended an exhibition on a specific date. attendance is the number of people;"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT name, age, country FROM artist EXCEPT SELECT T1.name, T1.age, T1.country FROM artist AS T1 JOIN exhibition AS T2 ON T1.artist_id = T2.artist_id WHERE T2.year > 2005",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "artist",
      "ORDER",
      "BY",
      "year_join",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "artist",
      "order",
      "by",
      "year_join",
      "desc",
      "limit",
      "value"
    ],
    "question": "Give the name, age and country of artists who have not had an exhibition since 2005.",
    "question_toks": [
      "Return",
      "the",
      "name",
      "of",
      "the",
      "artist",
      "who",
      "has",
      "the",
      "latest",
      "join",
      "year",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 0]], "conds": [] },
      "select": [false, [[0, [0, [0, 2, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 4, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artist: a person who produces works in any of the arts that are primarily subject to aesthetic criteria. country is the geographical place where the artist was born. year_join is when the artist joined as a datetime; exhibition: a public event at which pictures, sculptures, or other objects of interest are displayed, for example at a museum or art gallery. ticket_price is the full price paid for a ticket at the exhibition; attendance_record: the record of how often a person has attended an exhibition on a specific date. attendance is the number of people;"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT AVG(T1.age) FROM artist AS T1 JOIN exhibition AS T2 ON T1.artist_id = T2.artist_id WHERE T2.year BETWEEN 2005 AND 2008",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "exhibition",
      "WHERE",
      "YEAR",
      ">",
      "=",
      "2005"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "exhibition",
      "where",
      "year",
      ">",
      "=",
      "value"
    ],
    "question": "What is the average age of artists who had an exhibition from 2005 to 2008?",
    "question_toks": [
      "How",
      "many",
      "exhibition",
      "are",
      "there",
      "in",
      "year",
      "2005",
      "or",
      "after",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[3, [0, [0, 0, false], null]]]],
      "where": [[false, 5, [0, [0, 7, false], null], 2005.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artist: a person who produces works in any of the arts that are primarily subject to aesthetic criteria. country is the geographical place where the artist was born. year_join is when the artist joined as a datetime; exhibition: a public event at which pictures, sculptures, or other objects of interest are displayed, for example at a museum or art gallery. ticket_price is the full price paid for a ticket at the exhibition; attendance_record: the record of how often a person has attended an exhibition on a specific date. attendance is the number of people;"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT year, theme FROM exhibition WHERE YEAR  >=  2007",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "exhibition",
      "WHERE",
      "YEAR",
      ">",
      "=",
      "2005"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "exhibition",
      "where",
      "year",
      ">",
      "=",
      "value"
    ],
    "question": "Give the year and theme of exhibitions that occurred after or in 2007.",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "exhibitions",
      "that",
      "happened",
      "in",
      "or",
      "after",
      "2005",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[3, [0, [0, 0, false], null]]]],
      "where": [[false, 5, [0, [0, 7, false], null], 2005.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artist: a person who produces works in any of the arts that are primarily subject to aesthetic criteria. country is the geographical place where the artist was born. year_join is when the artist joined as a datetime; exhibition: a public event at which pictures, sculptures, or other objects of interest are displayed, for example at a museum or art gallery. ticket_price is the full price paid for a ticket at the exhibition; attendance_record: the record of how often a person has attended an exhibition on a specific date. attendance is the number of people;"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT YEAR FROM exhibition WHERE ticket_price  <  15",
    "query_toks": [
      "SELECT",
      "theme",
      ",",
      "YEAR",
      "FROM",
      "exhibition",
      "WHERE",
      "ticket_price",
      "<",
      "15"
    ],
    "query_toks_no_value": [
      "select",
      "theme",
      ",",
      "year",
      "from",
      "exhibition",
      "where",
      "ticket_price",
      "<",
      "value"
    ],
    "question": "In which years did the ticket price for exhibitions drop below 15?",
    "question_toks": [
      "Show",
      "theme",
      "and",
      "year",
      "for",
      "all",
      "exhibitions",
      "with",
      "ticket",
      "prices",
      "lower",
      "than",
      "15",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 8, false], null]],
          [0, [0, [0, 7, false], null]]
        ]
      ],
      "where": [[false, 4, [0, [0, 10, false], null], 15.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artist: a person who produces works in any of the arts that are primarily subject to aesthetic criteria. country is the geographical place where the artist was born. year_join is when the artist joined as a datetime; exhibition: a public event at which pictures, sculptures, or other objects of interest are displayed, for example at a museum or art gallery. ticket_price is the full price paid for a ticket at the exhibition; attendance_record: the record of how often a person has attended an exhibition on a specific date. attendance is the number of people;"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT year, theme, ticket_price FROM exhibition WHERE theme LIKE '%Santa%'",
    "query_toks": [
      "SELECT",
      "theme",
      ",",
      "YEAR",
      "FROM",
      "exhibition",
      "WHERE",
      "ticket_price",
      "<",
      "15"
    ],
    "query_toks_no_value": [
      "select",
      "theme",
      ",",
      "year",
      "from",
      "exhibition",
      "where",
      "ticket_price",
      "<",
      "value"
    ],
    "question": "Which exhibitions had a theme involving Santa? Give the year, theme and ticket price.",
    "question_toks": [
      "What",
      "are",
      "the",
      "theme",
      "and",
      "year",
      "for",
      "all",
      "exhibitions",
      "that",
      "have",
      "a",
      "ticket",
      "price",
      "under",
      "15",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 8, false], null]],
          [0, [0, [0, 7, false], null]]
        ]
      ],
      "where": [[false, 4, [0, [0, 10, false], null], 15.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artist: a person who produces works in any of the arts that are primarily subject to aesthetic criteria. country is the geographical place where the artist was born. year_join is when the artist joined as a datetime; exhibition: a public event at which pictures, sculptures, or other objects of interest are displayed, for example at a museum or art gallery. ticket_price is the full price paid for a ticket at the exhibition; attendance_record: the record of how often a person has attended an exhibition on a specific date. attendance is the number of people;"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT year, AVG(ticket_price) FROM exhibition GROUP BY year ORDER BY AVG(ticket_price) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "ticket_price",
      ")",
      ",",
      "min",
      "(",
      "ticket_price",
      ")",
      ",",
      "max",
      "(",
      "ticket_price",
      ")",
      "FROM",
      "exhibition",
      "WHERE",
      "YEAR",
      "<",
      "2009"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "ticket_price",
      ")",
      ",",
      "min",
      "(",
      "ticket_price",
      ")",
      ",",
      "max",
      "(",
      "ticket_price",
      ")",
      "from",
      "exhibition",
      "where",
      "year",
      "<",
      "value"
    ],
    "question": "Which year had the cheapest average ticket price for exhibitions? Return the year and average ticket price.",
    "question_toks": [
      "Show",
      "the",
      "average",
      ",",
      "minimum",
      ",",
      "and",
      "maximum",
      "ticket",
      "prices",
      "for",
      "exhibitions",
      "for",
      "all",
      "years",
      "before",
      "2009",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [5, [0, [0, 10, false], null]],
          [2, [0, [0, 10, false], null]],
          [1, [0, [0, 10, false], null]]
        ]
      ],
      "where": [[false, 4, [0, [0, 7, false], null], 2009.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artist: a person who produces works in any of the arts that are primarily subject to aesthetic criteria. country is the geographical place where the artist was born. year_join is when the artist joined as a datetime; exhibition: a public event at which pictures, sculptures, or other objects of interest are displayed, for example at a museum or art gallery. ticket_price is the full price paid for a ticket at the exhibition; attendance_record: the record of how often a person has attended an exhibition on a specific date. attendance is the number of people;"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT * FROM exhibition ORDER BY year DESC",
    "query_toks": [
      "SELECT",
      "theme",
      ",",
      "YEAR",
      "FROM",
      "exhibition",
      "ORDER",
      "BY",
      "ticket_price",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "theme",
      ",",
      "year",
      "from",
      "exhibition",
      "order",
      "by",
      "ticket_price",
      "desc"
    ],
    "question": "Show all exhibition details ordered from most recent to least recent exhibition.",
    "question_toks": [
      "Show",
      "theme",
      "and",
      "year",
      "for",
      "all",
      "exhibitions",
      "in",
      "an",
      "descending",
      "order",
      "of",
      "ticket",
      "price",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 8, false], null]],
          [0, [0, [0, 7, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 10, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artist: a person who produces works in any of the arts that are primarily subject to aesthetic criteria. country is the geographical place where the artist was born. year_join is when the artist joined as a datetime; exhibition: a public event at which pictures, sculptures, or other objects of interest are displayed, for example at a museum or art gallery. ticket_price is the full price paid for a ticket at the exhibition; attendance_record: the record of how often a person has attended an exhibition on a specific date. attendance is the number of people;"
  },
  {
    "db_id": "theme_gallery",
    "query": "SELECT T2.theme, T1.date FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id ORDER BY T2.year ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.theme",
      ",",
      "T1.date",
      ",",
      "T1.attendance",
      "FROM",
      "exhibition_record",
      "AS",
      "T1",
      "JOIN",
      "exhibition",
      "AS",
      "T2",
      "ON",
      "T1.exhibition_id",
      "=",
      "T2.exhibition_id",
      "WHERE",
      "T2.year",
      "=",
      "2004"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "theme",
      ",",
      "t1",
      ".",
      "date",
      ",",
      "t1",
      ".",
      "attendance",
      "from",
      "exhibition_record",
      "as",
      "t1",
      "join",
      "exhibition",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "exhibition_id",
      "=",
      "t2",
      ".",
      "exhibition_id",
      "where",
      "t2",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "What is the theme and date of the first ever exhibition?",
    "question_toks": [
      "What",
      "is",
      "the",
      "theme",
      ",",
      "date",
      ",",
      "and",
      "attendance",
      "for",
      "the",
      "exhibition",
      "in",
      "year",
      "2004",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 2],
          ["table_unit", 1]
        ],
        "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 8, false], null]],
          [0, [0, [0, 12, false], null]],
          [0, [0, [0, 13, false], null]]
        ]
      ],
      "where": [[false, 2, [0, [0, 7, false], null], 2004.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "artist: a person who produces works in any of the arts that are primarily subject to aesthetic criteria. country is the geographical place where the artist was born. year_join is when the artist joined as a datetime; exhibition: a public event at which pictures, sculptures, or other objects of interest are displayed, for example at a museum or art gallery. ticket_price is the full price paid for a ticket at the exhibition; attendance_record: the record of how often a person has attended an exhibition on a specific date. attendance is the number of people;"
  },
  {
    "db_id": "riding_club",
    "query": "SELECT T3.Player_name ,  T3.gender ,  T3.rank FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  <=  2011 ORDER BY T1.Starting_year",
    "query_toks": [
      "SELECT",
      "T3.Player_name",
      ",",
      "T3.gender",
      "FROM",
      "player_coach",
      "AS",
      "T1",
      "JOIN",
      "coach",
      "AS",
      "T2",
      "ON",
      "T1.Coach_ID",
      "=",
      "T2.Coach_ID",
      "JOIN",
      "player",
      "AS",
      "T3",
      "ON",
      "T1.Player_ID",
      "=",
      "T3.Player_ID",
      "WHERE",
      "T1.Starting_year",
      ">",
      "2011"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "player_name",
      ",",
      "t3",
      ".",
      "gender",
      "from",
      "player_coach",
      "as",
      "t1",
      "join",
      "coach",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "coach_id",
      "=",
      "t2",
      ".",
      "coach_id",
      "join",
      "player",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t3",
      ".",
      "player_id",
      "where",
      "t1",
      ".",
      "starting_year",
      ">",
      "value"
    ],
    "question": "Give the name, gender and rank of players with a coach starting in or before 2011. Sort by the coach starting year.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "genders",
      "of",
      "players",
      "with",
      "a",
      "coach",
      "starting",
      "after",
      "2011",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 3],
          ["table_unit", 2],
          ["table_unit", 0]
        ],
        "conds": [
          [false, 2, [0, [0, 19, false], null], [0, 13, false], null],
          "and",
          [false, 2, [0, [0, 18, false], null], [0, 1, false], null]
        ]
      },
      "select": [
        false,
        [
          [0, [0, [0, 3, false], null]],
          [0, [0, [0, 4, false], null]]
        ]
      ],
      "where": [[false, 3, [0, [0, 20, false], null], 2011.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "player: a person who rides horses as a sport. the sponsor makes a regular financial contribution to the player. gender is 'M' if the player is male, otherwise it is 'F' if the player is female. residence is the address they live at. occupation which is the player's job. votes are the number of people that have voted the players will win. rank is a measure of how good the players are; club: a sports association, located in a specific region and founded in a start year; coach: has the role to train the players, and each player has one coach. club_id is the id of the club to which a coach is associated with. rank is the rank of the coach; player_coach: the association between the player and the coach. starting_year when a player started being coached; match_result: the results of the matches between players. rank is the position in the ranking. gold is how many golds. big_silver number of big silver medals. small_silver number of small silver medals. bronze is the number of bronze medals each club has. points is the total number of points accumulated by each club; "
  },
  {
    "db_id": "gymnast",
    "query": "SELECT Height FROM People ORDER BY Age ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "People",
      "ORDER",
      "BY",
      "Age",
      "DESC",
      "LIMIT",
      "5"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "people",
      "order",
      "by",
      "age",
      "desc",
      "limit",
      "value"
    ],
    "question": "What height is the youngest gymnast?",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "the",
      "top",
      "5",
      "oldest",
      "people",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 10, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 11, false], null]]],
      "limit": 5,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "gymnast: people trained or skilled in physical exercises designed to develop strength and coordination. floor_exercise_points represent the grade given for floor exercises (movements are performed on the floor in an area of 12 meters or 40 feet square). pommel_horse points_represent the grade given for pommel horse exercises. rings_points represent the grade given for rings exercises. vault_points represent the grade given for vaulting exercises. parallel_bars_points represent the grade given for parallel bars exercises. parallel_bar_points are total points given for parallel bar movements. horizontal_bar_points represent the grade given for horizontal bar exercises. total_points is the sum of points given to a gymnast in a competition. people: the gymnast is a people. people have a name, an age, a height. age is the age of the gymnast. hometown is where they reside;"
  },
  {
    "db_id": "gymnast",
    "query": "SELECT Name FROM People WHERE Age < 22",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "People",
      "ORDER",
      "BY",
      "Age",
      "DESC",
      "LIMIT",
      "5"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "people",
      "order",
      "by",
      "age",
      "desc",
      "limit",
      "value"
    ],
    "question": "Give the names of the people under the age of 22.",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "five",
      "oldest",
      "people",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 10, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 11, false], null]]],
      "limit": 5,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "gymnast: people trained or skilled in physical exercises designed to develop strength and coordination. floor_exercise_points represent the grade given for floor exercises (movements are performed on the floor in an area of 12 meters or 40 feet square). pommel_horse points_represent the grade given for pommel horse exercises. rings_points represent the grade given for rings exercises. vault_points represent the grade given for vaulting exercises. parallel_bars_points represent the grade given for parallel bars exercises. parallel_bar_points are total points given for parallel bar movements. horizontal_bar_points represent the grade given for horizontal bar exercises. total_points is the sum of points given to a gymnast in a competition. people: the gymnast is a people. people have a name, an age, a height. age is the age of the gymnast. hometown is where they reside;"
  },
  {
    "db_id": "gymnast",
    "query": "SELECT MAX(T1.Horizontal_Bar_Points) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Age = 21",
    "query_toks": [
      "SELECT",
      "T1.Total_Points",
      "FROM",
      "gymnast",
      "AS",
      "T1",
      "JOIN",
      "people",
      "AS",
      "T2",
      "ON",
      "T1.Gymnast_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Age",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "total_points",
      "from",
      "gymnast",
      "as",
      "t1",
      "join",
      "people",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "gymnast_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "age",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the highest horizontal bar points out of all 21 year olds?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "point",
      "count",
      "of",
      "the",
      "youngest",
      "gymnast",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 0],
          ["table_unit", 1]
        ],
        "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]
      },
      "select": [false, [[0, [0, [0, 8, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 11, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "gymnast: people trained or skilled in physical exercises designed to develop strength and coordination. floor_exercise_points represent the grade given for floor exercises (movements are performed on the floor in an area of 12 meters or 40 feet square). pommel_horse points_represent the grade given for pommel horse exercises. rings_points represent the grade given for rings exercises. vault_points represent the grade given for vaulting exercises. parallel_bars_points represent the grade given for parallel bars exercises. parallel_bar_points are total points given for parallel bar movements. horizontal_bar_points represent the grade given for horizontal bar exercises. total_points is the sum of points given to a gymnast in a competition. people: the gymnast is a people. people have a name, an age, a height. age is the age of the gymnast. hometown is where they reside;"
  },
  {
    "db_id": "gymnast",
    "query": "SELECT Hometown FROM people EXCEPT SELECT Hometown FROM people WHERE Age  <  21",
    "query_toks": [
      "SELECT",
      "Hometown",
      "FROM",
      "people",
      "WHERE",
      "Age",
      ">",
      "23",
      "INTERSECT",
      "SELECT",
      "Hometown",
      "FROM",
      "people",
      "WHERE",
      "Age",
      "<",
      "20"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      "from",
      "people",
      "where",
      "age",
      ">",
      "value",
      "intersect",
      "select",
      "hometown",
      "from",
      "people",
      "where",
      "age",
      "<",
      "value"
    ],
    "question": "Which hometowns have no people younger than 21?",
    "question_toks": [
      "Show",
      "the",
      "hometowns",
      "shared",
      "by",
      "people",
      "older",
      "than",
      "23",
      "and",
      "younger",
      "than",
      "20",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 13, false], null]]]],
      "where": [[false, 3, [0, [0, 11, false], null], 23.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": { "table_units": [["table_unit", 1]], "conds": [] },
        "select": [false, [[0, [0, [0, 13, false], null]]]],
        "where": [[false, 4, [0, [0, 11, false], null], 20.0, null]],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "db_description": "gymnast: people trained or skilled in physical exercises designed to develop strength and coordination. floor_exercise_points represent the grade given for floor exercises (movements are performed on the floor in an area of 12 meters or 40 feet square). pommel_horse points_represent the grade given for pommel horse exercises. rings_points represent the grade given for rings exercises. vault_points represent the grade given for vaulting exercises. parallel_bars_points represent the grade given for parallel bars exercises. parallel_bar_points are total points given for parallel bar movements. horizontal_bar_points represent the grade given for horizontal bar exercises. total_points is the sum of points given to a gymnast in a competition. people: the gymnast is a people. people have a name, an age, a height. age is the age of the gymnast. hometown is where they reside;"
  },
  {
    "db_id": "gymnast",
    "query": "SELECT name, MAX(height), age FROM people GROUP BY age",
    "query_toks": [
      "SELECT",
      "Hometown",
      "FROM",
      "people",
      "WHERE",
      "Age",
      ">",
      "23",
      "INTERSECT",
      "SELECT",
      "Hometown",
      "FROM",
      "people",
      "WHERE",
      "Age",
      "<",
      "20"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      "from",
      "people",
      "where",
      "age",
      ">",
      "value",
      "intersect",
      "select",
      "hometown",
      "from",
      "people",
      "where",
      "age",
      "<",
      "value"
    ],
    "question": "List the name, height and age of the tallest gymnast for every age.",
    "question_toks": [
      "From",
      "which",
      "hometowns",
      "did",
      "both",
      "people",
      "older",
      "than",
      "23",
      "and",
      "younger",
      "than",
      "20",
      "come",
      "from",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 13, false], null]]]],
      "where": [[false, 3, [0, [0, 11, false], null], 23.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": { "table_units": [["table_unit", 1]], "conds": [] },
        "select": [false, [[0, [0, [0, 13, false], null]]]],
        "where": [[false, 4, [0, [0, 11, false], null], 20.0, null]],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "db_description": "gymnast: people trained or skilled in physical exercises designed to develop strength and coordination. floor_exercise_points represent the grade given for floor exercises (movements are performed on the floor in an area of 12 meters or 40 feet square). pommel_horse points_represent the grade given for pommel horse exercises. rings_points represent the grade given for rings exercises. vault_points represent the grade given for vaulting exercises. parallel_bars_points represent the grade given for parallel bars exercises. parallel_bar_points are total points given for parallel bar movements. horizontal_bar_points represent the grade given for horizontal bar exercises. total_points is the sum of points given to a gymnast in a competition. people: the gymnast is a people. people have a name, an age, a height. age is the age of the gymnast. hometown is where they reside;"
  },
  {
    "db_id": "browser_web",
    "query": "SELECT COUNT(*) FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'Fasterfox' AND T2.compatible_since_year  <=  2007",
    "query_toks": [
      "SELECT",
      "T1.name",
      "FROM",
      "browser",
      "AS",
      "T1",
      "JOIN",
      "accelerator_compatible_browser",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.browser_id",
      "JOIN",
      "web_client_accelerator",
      "AS",
      "T3",
      "ON",
      "T2.accelerator_id",
      "=",
      "T3.id",
      "WHERE",
      "T3.name",
      "=",
      "'CProxy",
      "'",
      "AND",
      "T2.compatible_since_year",
      ">",
      "1998"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "browser",
      "as",
      "t1",
      "join",
      "accelerator_compatible_browser",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "browser_id",
      "join",
      "web_client_accelerator",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "accelerator_id",
      "=",
      "t3",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "name",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "compatible_since_year",
      ">",
      "value"
    ],
    "question": "How many different browsers have been compatible with the 'Fasterfox' accelerator since 2007 or earlier?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "browser",
      "that",
      "became",
      "compatible",
      "with",
      "the",
      "accelerator",
      "'CProxy",
      "'",
      "after",
      "year",
      "1998",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 1],
          ["table_unit", 2],
          ["table_unit", 0]
        ],
        "conds": [
          [false, 2, [0, [0, 6, false], null], [0, 10, false], null],
          "and",
          [false, 2, [0, [0, 9, false], null], [0, 1, false], null]
        ]
      },
      "select": [false, [[0, [0, [0, 7, false], null]]]],
      "where": [
        [false, 2, [0, [0, 2, false], null], "\"CProxy\"", null],
        "and",
        [false, 3, [0, [0, 11, false], null], 1998.0, null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "web_client_accelerator: are used to reduce the amount of time it takes client-side for users to access websites or web applications. operating-system is a operating system software that controls the operation of a computer and directs the processing of programs and usually is Linux or Windows. client can be an Internet service provider, end-user, or all users who are using the web client accelerator. connection_type is the means that clients use to connect to the internet such as Broadband, Satellite, Wireless, Fiber, DSL; browser: a browser is used by clients to navigate between web pages and can be Chrome, Mozilla, Opera, Safari, etc. market_share is the portion of a market controlled by a particular company or product; accelerator_compatible_browser: are a form of selection-based search that allows a user to invoke an online service from any other page using only the mouse. compatible_since_year is the year in which support for accelerators was introduced in that browser; "
  },
  {
    "db_id": "browser_web",
    "query": "SELECT T3.name ,  T3.operating_system FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T2.name = 'Safari' ORDER BY T1.compatible_since_year",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "T3.name",
      "FROM",
      "accelerator_compatible_browser",
      "AS",
      "T1",
      "JOIN",
      "browser",
      "AS",
      "T2",
      "ON",
      "T1.browser_id",
      "=",
      "T2.id",
      "JOIN",
      "web_client_accelerator",
      "AS",
      "T3",
      "ON",
      "T1.accelerator_id",
      "=",
      "T3.id",
      "ORDER",
      "BY",
      "T1.compatible_since_year",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t3",
      ".",
      "name",
      "from",
      "accelerator_compatible_browser",
      "as",
      "t1",
      "join",
      "browser",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "browser_id",
      "=",
      "t2",
      ".",
      "id",
      "join",
      "web_client_accelerator",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "accelerator_id",
      "=",
      "t3",
      ".",
      "id",
      "order",
      "by",
      "t1",
      ".",
      "compatible_since_year",
      "desc"
    ],
    "question": "List the names and operating systems of accelerators that Safari is compatible with in the order they became compatible.",
    "question_toks": [
      "give",
      "me",
      "names",
      "of",
      "all",
      "compatible",
      "browsers",
      "and",
      "accelerators",
      "in",
      "the",
      "descending",
      "order",
      "of",
      "compatible",
      "year"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 2],
          ["table_unit", 1],
          ["table_unit", 0]
        ],
        "conds": [
          [false, 2, [0, [0, 10, false], null], [0, 6, false], null],
          "and",
          [false, 2, [0, [0, 9, false], null], [0, 1, false], null]
        ]
      },
      "select": [
        false,
        [
          [0, [0, [0, 7, false], null]],
          [0, [0, [0, 2, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 11, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "web_client_accelerator: are used to reduce the amount of time it takes client-side for users to access websites or web applications. operating-system is a operating system software that controls the operation of a computer and directs the processing of programs and usually is Linux or Windows. client can be an Internet service provider, end-user, or all users who are using the web client accelerator. connection_type is the means that clients use to connect to the internet such as Broadband, Satellite, Wireless, Fiber, DSL; browser: a browser is used by clients to navigate between web pages and can be Chrome, Mozilla, Opera, Safari, etc. market_share is the portion of a market controlled by a particular company or product; accelerator_compatible_browser: are a form of selection-based search that allows a user to invoke an online service from any other page using only the mouse. compatible_since_year is the year in which support for accelerators was introduced in that browser; "
  },
  {
    "db_id": "school_finance",
    "query": "SELECT year FROM budget ORDER BY budgeted DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "budget",
      "WHERE",
      "budgeted",
      ">",
      "3000",
      "AND",
      "YEAR",
      "<",
      "=",
      "2001"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "budget",
      "where",
      "budgeted",
      ">",
      "value",
      "and",
      "year",
      "<",
      "=",
      "value"
    ],
    "question": "What year has the greatest amount budgeted?",
    "question_toks": [
      "How",
      "many",
      "budgets",
      "are",
      "above",
      "3000",
      "in",
      "year",
      "2001",
      "or",
      "before",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[3, [0, [0, 0, false], null]]]],
      "where": [
        [false, 3, [0, [0, 11, false], null], 3000.0, null],
        "and",
        [false, 6, [0, [0, 10, false], null], 2001.0, null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "school: is an institution for teaching children. school_name is the name of the school. location is the address the school is situated. mascot is school mascot animal representing the sports teams.  enrollment is how many students are currently enrolled. ihsaa_football_class is the class participating in the IHSAA competition for football; budget: is an estimation of revenue and expenses over a specified future period and utilized by schools. budgeted is a total sum the school has received in that year. total_budget_percent budgeted is a percentage of the budgeted amount of the total budget. invested is the total sum of the invested money. total_budget_percent invested is the percentage of invested money from the total money; Endowment: university endowments are comprised of money or other financial assets that are donated to academic institutions. donator_name is the name of the person making the donations/ endowments to the school. amount is the total sum of money being donated to the school;"
  },
  {
    "db_id": "school_finance",
    "query": "SELECT SUM(invested) FROM budget WHERE year  <  2001",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "budget",
      "WHERE",
      "budgeted",
      ">",
      "3000",
      "AND",
      "YEAR",
      "<",
      "=",
      "2001"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "budget",
      "where",
      "budgeted",
      ">",
      "value",
      "and",
      "year",
      "<",
      "=",
      "value"
    ],
    "question": "What is the total amount invested in all budgets prior to year 2001?",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "budgets",
      "in",
      "year",
      "2001",
      "or",
      "before",
      "whose",
      "budgeted",
      "amount",
      "is",
      "greater",
      "than",
      "3000"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[3, [0, [0, 0, false], null]]]],
      "where": [
        [false, 3, [0, [0, 11, false], null], 3000.0, null],
        "and",
        [false, 6, [0, [0, 10, false], null], 2001.0, null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "school: is an institution for teaching children. school_name is the name of the school. location is the address the school is situated. mascot is school mascot animal representing the sports teams.  enrollment is how many students are currently enrolled. ihsaa_football_class is the class participating in the IHSAA competition for football; budget: is an estimation of revenue and expenses over a specified future period and utilized by schools. budgeted is a total sum the school has received in that year. total_budget_percent budgeted is a percentage of the budgeted amount of the total budget. invested is the total sum of the invested money. total_budget_percent invested is the percentage of invested money from the total money; Endowment: university endowments are comprised of money or other financial assets that are donated to academic institutions. donator_name is the name of the person making the donations/ endowments to the school. amount is the total sum of money being donated to the school;"
  },
  {
    "db_id": "school_finance",
    "query": "SELECT T2.school_name ,  T2.enrollment FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.invested > 10000 AND T1.year BETWEEN 2000 AND 2099",
    "query_toks": [
      "SELECT",
      "T2.school_name",
      ",",
      "T1.budgeted",
      ",",
      "T1.invested",
      "FROM",
      "budget",
      "AS",
      "T1",
      "JOIN",
      "school",
      "AS",
      "T2",
      "ON",
      "T1.school_id",
      "=",
      "T2.school_id",
      "WHERE",
      "T1.year",
      ">",
      "=",
      "2002"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "school_name",
      ",",
      "t1",
      ".",
      "budgeted",
      ",",
      "t1",
      ".",
      "invested",
      "from",
      "budget",
      "as",
      "t1",
      "join",
      "school",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "school_id",
      "=",
      "t2",
      ".",
      "school_id",
      "where",
      "t1",
      ".",
      "year",
      ">",
      "=",
      "value"
    ],
    "question": "List the name and enrollment of all the schools that invested more than 10000 in the 21st century.",
    "question_toks": [
      "Show",
      "each",
      "school",
      "name",
      ",",
      "its",
      "budgeted",
      "amount",
      ",",
      "and",
      "invested",
      "amount",
      "in",
      "year",
      "2002",
      "or",
      "after",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 1],
          ["table_unit", 0]
        ],
        "conds": [[false, 2, [0, [0, 9, false], null], [0, 1, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 2, false], null]],
          [0, [0, [0, 11, false], null]],
          [0, [0, [0, 13, false], null]]
        ]
      ],
      "where": [[false, 5, [0, [0, 10, false], null], 2002.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "school: is an institution for teaching children. school_name is the name of the school. location is the address the school is situated. mascot is school mascot animal representing the sports teams.  enrollment is how many students are currently enrolled. ihsaa_football_class is the class participating in the IHSAA competition for football; budget: is an estimation of revenue and expenses over a specified future period and utilized by schools. budgeted is a total sum the school has received in that year. total_budget_percent budgeted is a percentage of the budgeted amount of the total budget. invested is the total sum of the invested money. total_budget_percent invested is the percentage of invested money from the total money; Endowment: university endowments are comprised of money or other financial assets that are donated to academic institutions. donator_name is the name of the person making the donations/ endowments to the school. amount is the total sum of money being donated to the school;"
  },
  {
    "db_id": "school_finance",
    "query": "SELECT DISTINCT(T1.school_id) , T1.School_name ,  T1.County ,  T1.IHSAA_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE year  <=  2003 ORDER BY T2.total_budget_percent_budgeted",
    "query_toks": [
      "SELECT",
      "T1.School_name",
      ",",
      "T1.Mascot",
      ",",
      "T1.IHSAA_Football_Class",
      "FROM",
      "school",
      "AS",
      "T1",
      "JOIN",
      "budget",
      "AS",
      "T2",
      "ON",
      "T1.school_id",
      "=",
      "T2.school_id",
      "WHERE",
      "Budgeted",
      ">",
      "6000",
      "OR",
      "YEAR",
      "<",
      "2003",
      "ORDER",
      "BY",
      "T2.total_budget_percent_invested",
      ",",
      "T2.total_budget_percent_budgeted"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "school_name",
      ",",
      "t1",
      ".",
      "mascot",
      ",",
      "t1",
      ".",
      "ihsaa_football_class",
      "from",
      "school",
      "as",
      "t1",
      "join",
      "budget",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "school_id",
      "=",
      "t2",
      ".",
      "school_id",
      "where",
      "budgeted",
      ">",
      "value",
      "or",
      "year",
      "<",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "total_budget_percent_invested",
      ",",
      "t2",
      ".",
      "total_budget_percent_budgeted"
    ],
    "question": "Give the id, name, county and IHSAA Class of all distinct schools with a budget before or in 2003, ordered by percent of total budgeted budget.",
    "question_toks": [
      "List",
      "the",
      "name",
      ",",
      "IHSAA",
      "Football",
      "Class",
      ",",
      "and",
      "Mascot",
      "of",
      "the",
      "schools",
      "that",
      "have",
      "more",
      "than",
      "6000",
      "of",
      "budgeted",
      "amount",
      "or",
      "were",
      "founded",
      "before",
      "2003",
      ",",
      "in",
      "the",
      "order",
      "of",
      "percent",
      "of",
      "total",
      "invested",
      "budget",
      "and",
      "total",
      "budgeted",
      "budget",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 0],
          ["table_unit", 1]
        ],
        "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 2, false], null]],
          [0, [0, [0, 4, false], null]],
          [0, [0, [0, 7, false], null]]
        ]
      ],
      "where": [
        [false, 3, [0, [0, 11, false], null], 6000.0, null],
        "or",
        [false, 4, [0, [0, 10, false], null], 2003.0, null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [
        "asc",
        [
          [0, [0, 14, false], null],
          [0, [0, 12, false], null]
        ]
      ],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "school: is an institution for teaching children. school_name is the name of the school. location is the address the school is situated. mascot is school mascot animal representing the sports teams.  enrollment is how many students are currently enrolled. ihsaa_football_class is the class participating in the IHSAA competition for football; budget: is an estimation of revenue and expenses over a specified future period and utilized by schools. budgeted is a total sum the school has received in that year. total_budget_percent budgeted is a percentage of the budgeted amount of the total budget. invested is the total sum of the invested money. total_budget_percent invested is the percentage of invested money from the total money; Endowment: university endowments are comprised of money or other financial assets that are donated to academic institutions. donator_name is the name of the person making the donations/ endowments to the school. amount is the total sum of money being donated to the school;"
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT institution ,  founded FROM institution WHERE floors  =  3 ORDER BY founded",
    "query_toks": [
      "SELECT",
      "institution",
      ",",
      "LOCATION",
      "FROM",
      "institution",
      "WHERE",
      "founded",
      ">",
      "1990",
      "AND",
      "TYPE",
      "=",
      "'Private",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "institution",
      ",",
      "location",
      "from",
      "institution",
      "where",
      "founded",
      ">",
      "value",
      "and",
      "type",
      "=",
      "value"
    ],
    "question": "What are the names and founding years of institutions with 3 floors? Order the results by the year founded.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "locations",
      "of",
      "institutions",
      "that",
      "are",
      "founded",
      "after",
      "1990",
      "and",
      "have",
      "the",
      "type",
      "``",
      "Private",
      "''",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 8, false], null]],
          [0, [0, [0, 9, false], null]]
        ]
      ],
      "where": [
        [false, 3, [0, [0, 10, false], null], 1990.0, null],
        "and",
        [false, 2, [0, [0, 11, false], null], "\"Private\"", null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "building: is a usually roofed and walled structure built for permanent use. the building has a name, street_address is the location of the building. years_as_tallest is a range of years when the building was the tallest. height_feet is the size of the building in feet. floors are the number of levels of the building; institution: inside the building one or several institutions operate. location is the institution's address. founded is the year of founding the institution. type of institution is either 'public' if they are founded by state governments, otherwise, if they rely on tuition fees, it is 'private'. enrollment is the total number of students enrolled in an institution. team is the name of the team. primary_conference is a meeting of people from institutions at which the first steps are taken towards the nomination of candidates; protein: is a naturally occurring, extremely complex substance, which is studied in an institution. common name. scientific name is protein official name. divergence_from_human_lineage is number divergence from human lineage. sequence_length identity to human protein shows, in percents, the level of identification of the studied protein with human protein;"
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT * FROM institution WHERE founded BETWEEN 1800 AND 1899",
    "query_toks": [
      "SELECT",
      "TYPE",
      "FROM",
      "institution",
      "WHERE",
      "founded",
      ">",
      "1990",
      "AND",
      "enrollment",
      ">",
      "=",
      "1000"
    ],
    "query_toks_no_value": [
      "select",
      "type",
      "from",
      "institution",
      "where",
      "founded",
      ">",
      "value",
      "and",
      "enrollment",
      ">",
      "=",
      "value"
    ],
    "question": "List all information about institutions founded in the 19th century.",
    "question_toks": [
      "Show",
      "the",
      "institution",
      "type",
      "with",
      "an",
      "institution",
      "founded",
      "after",
      "1990",
      "and",
      "an",
      "institution",
      "with",
      "at",
      "least",
      "1000",
      "enrollment",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 11, false], null]]]],
      "where": [
        [false, 3, [0, [0, 10, false], null], 1990.0, null],
        "and",
        [false, 5, [0, [0, 12, false], null], 1000.0, null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "building: is a usually roofed and walled structure built for permanent use. the building has a name, street_address is the location of the building. years_as_tallest is a range of years when the building was the tallest. height_feet is the size of the building in feet. floors are the number of levels of the building; institution: inside the building one or several institutions operate. location is the institution's address. founded is the year of founding the institution. type of institution is either 'public' if they are founded by state governments, otherwise, if they rely on tuition fees, it is 'private'. enrollment is the total number of students enrolled in an institution. team is the name of the team. primary_conference is a meeting of people from institutions at which the first steps are taken towards the nomination of candidates; protein: is a naturally occurring, extremely complex substance, which is studied in an institution. common name. scientific name is protein official name. divergence_from_human_lineage is number divergence from human lineage. sequence_length identity to human protein shows, in percents, the level of identification of the studied protein with human protein;"
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT T2.institution_id, T1.name, T1.years_as_tallest FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.type = 'Private'",
    "query_toks": [
      "SELECT",
      "T1.name",
      ",",
      "T1.height_feet",
      "FROM",
      "building",
      "AS",
      "T1",
      "JOIN",
      "institution",
      "AS",
      "T2",
      "ON",
      "T1.building_id",
      "=",
      "T2.building_id",
      "WHERE",
      "T2.founded",
      ">",
      "1880",
      "GROUP",
      "BY",
      "T1.building_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "height_feet",
      "from",
      "building",
      "as",
      "t1",
      "join",
      "institution",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "building_id",
      "=",
      "t2",
      ".",
      "building_id",
      "where",
      "t2",
      ".",
      "founded",
      ">",
      "value",
      "group",
      "by",
      "t1",
      ".",
      "building_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "For how long was each building with a private type institution the tallest? Show the institution id, building name, and years it was tallest.",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "heights",
      "of",
      "buildings",
      "with",
      "at",
      "least",
      "two",
      "institutions",
      "founded",
      "after",
      "1880",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 0],
          ["table_unit", 1]
        ],
        "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]]
      },
      "select": [
        false,
        [
          [0, [0, [0, 2, false], null]],
          [0, [0, [0, 5, false], null]]
        ]
      ],
      "where": [[false, 3, [0, [0, 10, false], null], 1880.0, null]],
      "groupBy": [[0, 1, false]],
      "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "building: is a usually roofed and walled structure built for permanent use. the building has a name, street_address is the location of the building. years_as_tallest is a range of years when the building was the tallest. height_feet is the size of the building in feet. floors are the number of levels of the building; institution: inside the building one or several institutions operate. location is the institution's address. founded is the year of founding the institution. type of institution is either 'public' if they are founded by state governments, otherwise, if they rely on tuition fees, it is 'private'. enrollment is the total number of students enrolled in an institution. team is the name of the team. primary_conference is a meeting of people from institutions at which the first steps are taken towards the nomination of candidates; protein: is a naturally occurring, extremely complex substance, which is studied in an institution. common name. scientific name is protein official name. divergence_from_human_lineage is number divergence from human lineage. sequence_length identity to human protein shows, in percents, the level of identification of the studied protein with human protein;"
  },
  {
    "db_id": "protein_institute",
    "query": "SELECT T2.protein_name, T2.sequence_length FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  <  1900 ORDER BY T2.sequence_length DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "institution",
      "AS",
      "T1",
      "JOIN",
      "protein",
      "AS",
      "T2",
      "ON",
      "T1.institution_id",
      "=",
      "T2.institution_id",
      "WHERE",
      "T1.founded",
      ">",
      "1880",
      "OR",
      "T1.type",
      "=",
      "'Private",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "institution",
      "as",
      "t1",
      "join",
      "protein",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "institution_id",
      "=",
      "t2",
      ".",
      "institution_id",
      "where",
      "t1",
      ".",
      "founded",
      ">",
      "value",
      "or",
      "t1",
      ".",
      "type",
      "=",
      "value"
    ],
    "question": "What is the name and sequence length of the protein with the greatest sequence length associated with an institution founded before 1900?",
    "question_toks": [
      "How",
      "many",
      "proteins",
      "are",
      "associated",
      "with",
      "an",
      "institution",
      "founded",
      "after",
      "1880",
      "or",
      "an",
      "institution",
      "with",
      "type",
      "``",
      "Private",
      "''",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 1],
          ["table_unit", 2]
        ],
        "conds": [[false, 2, [0, [0, 7, false], null], [0, 22, false], null]]
      },
      "select": [false, [[3, [0, [0, 0, false], null]]]],
      "where": [
        [false, 3, [0, [0, 10, false], null], 1880.0, null],
        "or",
        [false, 2, [0, [0, 11, false], null], "\"Private\"", null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "building: is a usually roofed and walled structure built for permanent use. the building has a name, street_address is the location of the building. years_as_tallest is a range of years when the building was the tallest. height_feet is the size of the building in feet. floors are the number of levels of the building; institution: inside the building one or several institutions operate. location is the institution's address. founded is the year of founding the institution. type of institution is either 'public' if they are founded by state governments, otherwise, if they rely on tuition fees, it is 'private'. enrollment is the total number of students enrolled in an institution. team is the name of the team. primary_conference is a meeting of people from institutions at which the first steps are taken towards the nomination of candidates; protein: is a naturally occurring, extremely complex substance, which is studied in an institution. common name. scientific name is protein official name. divergence_from_human_lineage is number divergence from human lineage. sequence_length identity to human protein shows, in percents, the level of identification of the studied protein with human protein;"
  },
  {
    "db_id": "cinema",
    "query": "SELECT title, directed_by FROM film WHERE original_air_date LIKE '%October%'",
    "query_toks": [
      "SELECT",
      "LOCATION",
      "FROM",
      "cinema",
      "WHERE",
      "openning_year",
      "=",
      "2010",
      "INTERSECT",
      "SELECT",
      "LOCATION",
      "FROM",
      "cinema",
      "WHERE",
      "openning_year",
      "=",
      "2011"
    ],
    "query_toks_no_value": [
      "select",
      "location",
      "from",
      "cinema",
      "where",
      "openning_year",
      "=",
      "value",
      "intersect",
      "select",
      "location",
      "from",
      "cinema",
      "where",
      "openning_year",
      "=",
      "value"
    ],
    "question": "Show the title and director of films which first aired in October.",
    "question_toks": [
      "Show",
      "all",
      "the",
      "locations",
      "where",
      "some",
      "cinemas",
      "were",
      "opened",
      "in",
      "both",
      "year",
      "2010",
      "and",
      "year",
      "2011",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 12, false], null]]]],
      "where": [[false, 2, [0, [0, 10, false], null], 2010.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": {
        "from": { "table_units": [["table_unit", 1]], "conds": [] },
        "select": [false, [[0, [0, [0, 12, false], null]]]],
        "where": [[false, 2, [0, [0, 10, false], null], 2011.0, null]],
        "groupBy": [],
        "having": [],
        "orderBy": [],
        "limit": null,
        "intersect": null,
        "union": null,
        "except": null
      },
      "union": null,
      "except": null
    },
    "db_description": "film: is a movie scheduled to be shown in cinemas. rank_in_series is number in the film series. directed_by is the name of director who is directing the film. original_air_date is the date when the movie was broadcast as a datetime; Cinema: a space specially designed for watching films. openning_year is the year when the cinema opened. capacity is the total number of seats available. location is the address where the cinema is located; schedule: films can be seen in the cinema at a certain date, according to a schedule. date is the date when the film is shown. show_times_per_day is the number of times the film is shown at the cinema. price is the price of the entrance ticket for watching the movie;"
  },
  {
    "db_id": "cinema",
    "query": "SELECT name , capacity FROM cinema ORDER BY openning_year",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "openning_year",
      ",",
      "capacity",
      "FROM",
      "cinema"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "openning_year",
      ",",
      "capacity",
      "from",
      "cinema"
    ],
    "question": "List the names and capacities of cinemas in the order they opened.",
    "question_toks": [
      "Show",
      "name",
      ",",
      "opening",
      "year",
      ",",
      "and",
      "capacity",
      "for",
      "each",
      "cinema",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 9, false], null]],
          [0, [0, [0, 10, false], null]],
          [0, [0, [0, 11, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "film: is a movie scheduled to be shown in cinemas. rank_in_series is number in the film series. directed_by is the name of director who is directing the film. original_air_date is the date when the movie was broadcast as a datetime; Cinema: a space specially designed for watching films. openning_year is the year when the cinema opened. capacity is the total number of seats available. location is the address where the cinema is located; schedule: films can be seen in the cinema at a certain date, according to a schedule. date is the date when the film is shown. show_times_per_day is the number of times the film is shown at the cinema. price is the price of the entrance ticket for watching the movie;"
  },
  {
    "db_id": "cinema",
    "query": "SELECT openning_year FROM cinema GROUP BY openning_year HAVING COUNT(*) = 3",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "openning_year",
      "FROM",
      "cinema",
      "ORDER",
      "BY",
      "openning_year",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "openning_year",
      "from",
      "cinema",
      "order",
      "by",
      "openning_year",
      "desc"
    ],
    "question": "In which years did exactly 3 cinemas open?",
    "question_toks": [
      "Show",
      "all",
      "the",
      "cinema",
      "names",
      "and",
      "opening",
      "years",
      "in",
      "descending",
      "order",
      "of",
      "opening",
      "year",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 9, false], null]],
          [0, [0, [0, 10, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["desc", [[0, [0, 10, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "film: is a movie scheduled to be shown in cinemas. rank_in_series is number in the film series. directed_by is the name of director who is directing the film. original_air_date is the date when the movie was broadcast as a datetime; Cinema: a space specially designed for watching films. openning_year is the year when the cinema opened. capacity is the total number of seats available. location is the address where the cinema is located; schedule: films can be seen in the cinema at a certain date, according to a schedule. date is the date when the film is shown. show_times_per_day is the number of times the film is shown at the cinema. price is the price of the entrance ticket for watching the movie;"
  },
  {
    "db_id": "cinema",
    "query": "SELECT location FROM cinema WHERE openning_year  =  2011 GROUP BY location ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "min",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "cinema",
      "WHERE",
      "openning_year",
      ">",
      "=",
      "2011"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "min",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "from",
      "cinema",
      "where",
      "openning_year",
      ">",
      "=",
      "value"
    ],
    "question": "In which location did the most cinemas open in 2011?",
    "question_toks": [
      "Show",
      "the",
      "average",
      ",",
      "minimum",
      ",",
      "and",
      "maximum",
      "capacity",
      "for",
      "all",
      "the",
      "cinemas",
      "opened",
      "in",
      "year",
      "2011",
      "or",
      "later",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [5, [0, [0, 11, false], null]],
          [2, [0, [0, 11, false], null]],
          [1, [0, [0, 11, false], null]]
        ]
      ],
      "where": [[false, 5, [0, [0, 10, false], null], 2011.0, null]],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "film: is a movie scheduled to be shown in cinemas. rank_in_series is number in the film series. directed_by is the name of director who is directing the film. original_air_date is the date when the movie was broadcast as a datetime; Cinema: a space specially designed for watching films. openning_year is the year when the cinema opened. capacity is the total number of seats available. location is the address where the cinema is located; schedule: films can be seen in the cinema at a certain date, according to a schedule. date is the date when the film is shown. show_times_per_day is the number of times the film is shown at the cinema. price is the price of the entrance ticket for watching the movie;"
  },
  {
    "db_id": "cinema",
    "query": "SELECT name, openning_year FROM cinema WHERE openning_year  !=  2011",
    "query_toks": [
      "SELECT",
      "LOCATION",
      "FROM",
      "cinema",
      "WHERE",
      "openning_year",
      ">",
      "=",
      "2010",
      "GROUP",
      "BY",
      "LOCATION",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "location",
      "from",
      "cinema",
      "where",
      "openning_year",
      ">",
      "=",
      "value",
      "group",
      "by",
      "location",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the names and opening years of cinemas which opened before or after 2011, but not during 2011?",
    "question_toks": [
      "What",
      "is",
      "the",
      "location",
      "with",
      "the",
      "most",
      "cinemas",
      "opened",
      "in",
      "year",
      "2010",
      "or",
      "later",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 12, false], null]]]],
      "where": [[false, 5, [0, [0, 10, false], null], 2010.0, null]],
      "groupBy": [[0, 12, false]],
      "having": [],
      "orderBy": ["desc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "film: is a movie scheduled to be shown in cinemas. rank_in_series is number in the film series. directed_by is the name of director who is directing the film. original_air_date is the date when the movie was broadcast as a datetime; Cinema: a space specially designed for watching films. openning_year is the year when the cinema opened. capacity is the total number of seats available. location is the address where the cinema is located; schedule: films can be seen in the cinema at a certain date, according to a schedule. date is the date when the film is shown. show_times_per_day is the number of times the film is shown at the cinema. price is the price of the entrance ticket for watching the movie;"
  },
  {
    "db_id": "cinema",
    "query": "SELECT T3.name ,  T2.title FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id WHERE T1.date = '21 May'",
    "query_toks": [
      "SELECT",
      "T3.name",
      ",",
      "T2.title",
      ",",
      "T1.date",
      ",",
      "T1.price",
      "FROM",
      "schedule",
      "AS",
      "T1",
      "JOIN",
      "film",
      "AS",
      "T2",
      "ON",
      "T1.film_id",
      "=",
      "T2.film_id",
      "JOIN",
      "cinema",
      "AS",
      "T3",
      "ON",
      "T1.cinema_id",
      "=",
      "T3.cinema_id"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "title",
      ",",
      "t1",
      ".",
      "date",
      ",",
      "t1",
      ".",
      "price",
      "from",
      "schedule",
      "as",
      "t1",
      "join",
      "film",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "film_id",
      "=",
      "t2",
      ".",
      "film_id",
      "join",
      "cinema",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "cinema_id",
      "=",
      "t3",
      ".",
      "cinema_id"
    ],
    "question": "Give the cinema name and film title of all records films scheduled on 21 May.",
    "question_toks": [
      "Show",
      "cinema",
      "name",
      ",",
      "film",
      "title",
      ",",
      "date",
      ",",
      "and",
      "price",
      "for",
      "each",
      "record",
      "in",
      "schedule",
      "."
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 2],
          ["table_unit", 0],
          ["table_unit", 1]
        ],
        "conds": [
          [false, 2, [0, [0, 14, false], null], [0, 1, false], null],
          "and",
          [false, 2, [0, [0, 13, false], null], [0, 8, false], null]
        ]
      },
      "select": [
        false,
        [
          [0, [0, [0, 9, false], null]],
          [0, [0, [0, 4, false], null]],
          [0, [0, [0, 15, false], null]],
          [0, [0, [0, 17, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "film: is a movie scheduled to be shown in cinemas. rank_in_series is number in the film series. directed_by is the name of director who is directing the film. original_air_date is the date when the movie was broadcast as a datetime; Cinema: a space specially designed for watching films. openning_year is the year when the cinema opened. capacity is the total number of seats available. location is the address where the cinema is located; schedule: films can be seen in the cinema at a certain date, according to a schedule. date is the date when the film is shown. show_times_per_day is the number of times the film is shown at the cinema. price is the price of the entrance ticket for watching the movie;"
  },
  {
    "db_id": "products_for_hire",
    "query": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'",
    "query_toks": [
      "SELECT",
      "T3.booking_start_date",
      ",",
      "T3.booking_end_date",
      "FROM",
      "Products_for_hire",
      "AS",
      "T1",
      "JOIN",
      "products_booked",
      "AS",
      "T2",
      "ON",
      "T1.product_id",
      "=",
      "T2.product_id",
      "JOIN",
      "bookings",
      "AS",
      "T3",
      "ON",
      "T2.booking_id",
      "=",
      "T3.booking_id",
      "WHERE",
      "T1.product_name",
      "=",
      "'Book",
      "collection",
      "A",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "booking_start_date",
      ",",
      "t3",
      ".",
      "booking_end_date",
      "from",
      "products_for_hire",
      "as",
      "t1",
      "join",
      "products_booked",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "product_id",
      "=",
      "t2",
      ".",
      "product_id",
      "join",
      "bookings",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "booking_id",
      "=",
      "t3",
      ".",
      "booking_id",
      "where",
      "t1",
      ".",
      "product_name",
      "=",
      "value"
    ],
    "question": "Give the date period of all the bookings that have booked the product named 'DVD collection B'?",
    "question_toks": [
      "What",
      "are",
      "the",
      "start",
      "date",
      "and",
      "end",
      "date",
      "of",
      "the",
      "booking",
      "that",
      "has",
      "booked",
      "the",
      "product",
      "named",
      "'Book",
      "collection",
      "A",
      "'",
      "?"
    ],
    "sql": {
      "from": {
        "table_units": [
          ["table_unit", 3],
          ["table_unit", 5],
          ["table_unit", 2]
        ],
        "conds": [
          [false, 2, [0, [0, 23, false], null], [0, 37, false], null],
          "and",
          [false, 2, [0, [0, 36, false], null], [0, 12, false], null]
        ]
      },
      "select": [
        false,
        [
          [0, [0, [0, 16, false], null]],
          [0, [0, [0, 17, false], null]]
        ]
      ],
      "where": [
        [false, 2, [0, [0, 26, false], null], "\"Book collection A\"", null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "discount_coupons: a reduction in price or an extra benefit given to a customer. coupon is a ticket or document that can be redeemed for a financial discount or rebate when purchasing a product. date_issued is datetime; customers: persons who can hire or buy products or services. customers make a booking of products, and if anything it is damaged they would have to pay extra money. good_or_bad_customer can be only 'good' or 'bad'. gender is '0' if the customer is male, or '1' if the customer is female. date_became_customer is the date when they became a customer as a datetime. date_last_hire is datetime; bookings: acts of reserving products in advance. each booking is associated with one or multiple hired products. returned_damaged_yn is '1' if the product is returned damaged, otherwise is '0'. booking_start_date is the date when the booking started as a datetime. booking_end_date is the end date of the booking as a datetime; products_for_hire: the available products, that have not yet been booked. each product has a daily hire cost; payments: amount paid for each product booked. amount_paid_in_full_yn is '1' if the product is fully paid, otherwise it is '0' if it is partially paid. 'payment date' is the date of payment as datetime; products_booked: are products hired during a specific booking. the late returned products and booked amounts are tracked. returned_yn '1' if the product is returned, otherwise is '0'. returned_late_yn can be '1' if the product is returned late, otherwise is '0'; view_product_availability: shows if the product is available for booking. 'status date' datetime. available_yn can be '1' if the product is available, otherwise is '0';"
  },
  {
    "db_id": "products_for_hire",
    "query": "SELECT booking_id, payment_date FROM payments WHERE amount_due >  300 ORDER BY payment_date ASC",
    "query_toks": [
      "SELECT",
      "payment_date",
      "FROM",
      "payments",
      "WHERE",
      "amount_paid",
      ">",
      "300",
      "OR",
      "payment_type_code",
      "=",
      "'Check",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "payment_date",
      "from",
      "payments",
      "where",
      "amount_paid",
      ">",
      "value",
      "or",
      "payment_type_code",
      "=",
      "value"
    ],
    "question": "List the booking id and date of all payments with amount due greater than 300 ordered from earliest to latest.",
    "question_toks": [
      "What",
      "are",
      "the",
      "payment",
      "date",
      "of",
      "the",
      "payment",
      "with",
      "amount",
      "paid",
      "higher",
      "than",
      "300",
      "or",
      "with",
      "payment",
      "type",
      "is",
      "'Check",
      "'"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 4]], "conds": [] },
      "select": [false, [[0, [0, [0, 33, false], null]]]],
      "where": [
        [false, 3, [0, [0, 35, false], null], 300.0, null],
        "or",
        [false, 2, [0, [0, 31, false], null], "\"Check\"", null]
      ],
      "groupBy": [],
      "having": [],
      "orderBy": [],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "discount_coupons: a reduction in price or an extra benefit given to a customer. coupon is a ticket or document that can be redeemed for a financial discount or rebate when purchasing a product. date_issued is datetime; customers: persons who can hire or buy products or services. customers make a booking of products, and if anything it is damaged they would have to pay extra money. good_or_bad_customer can be only 'good' or 'bad'. gender is '0' if the customer is male, or '1' if the customer is female. date_became_customer is the date when they became a customer as a datetime. date_last_hire is datetime; bookings: acts of reserving products in advance. each booking is associated with one or multiple hired products. returned_damaged_yn is '1' if the product is returned damaged, otherwise is '0'. booking_start_date is the date when the booking started as a datetime. booking_end_date is the end date of the booking as a datetime; products_for_hire: the available products, that have not yet been booked. each product has a daily hire cost; payments: amount paid for each product booked. amount_paid_in_full_yn is '1' if the product is fully paid, otherwise it is '0' if it is partially paid. 'payment date' is the date of payment as datetime; products_booked: are products hired during a specific booking. the late returned products and booked amounts are tracked. returned_yn '1' if the product is returned, otherwise is '0'. returned_late_yn can be '1' if the product is returned late, otherwise is '0'; view_product_availability: shows if the product is available for booking. 'status date' datetime. available_yn can be '1' if the product is available, otherwise is '0';"
  },
  {
    "db_id": "gas_company",
    "query": "SELECT  LOCATION ,  manager_name FROM gas_station ORDER BY open_year DESC",
    "query_toks": [
      "SELECT",
      "station_id",
      ",",
      "LOCATION",
      ",",
      "manager_name",
      "FROM",
      "gas_station",
      "ORDER",
      "BY",
      "open_year"
    ],
    "query_toks_no_value": [
      "select",
      "station_id",
      ",",
      "location",
      ",",
      "manager_name",
      "from",
      "gas_station",
      "order",
      "by",
      "open_year"
    ],
    "question": "List the location and manager name of all gas stations ordered from most recently opened to least recently opened.",
    "question_toks": [
      "Show",
      "gas",
      "station",
      "id",
      ",",
      "location",
      ",",
      "and",
      "manager_name",
      "for",
      "all",
      "gas",
      "stations",
      "ordered",
      "by",
      "open",
      "year",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 10, false], null]],
          [0, [0, [0, 12, false], null]],
          [0, [0, [0, 13, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 11, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "company: is a commercial business and it can be in particular a retail business for gasoline, oil and other products. company is company name. headquarters is the administrative center of a company. companies have a rank that is lower when their sales are higher. main_industry is the main economic activity of the company. sales_billion refer to a company's revenue earned from the sales of products or services (net sales). profits_billion is a financial gain obtained by the company, in billions. assets_billion is a valuable resource for the company. market_value is the market value of the company; gas_station: a unit that sells fuel for motor vehicles and each company can own multiple gas stations. open_year is the year when the gas station was opened to the public. location is the certain address gas stations are located at. manager_name is the name of the manager who is supervising the the gas station. vice_manager_name is the name of the vice manager, who is the second most authority after the manager. representative_name is a person appointed by the company to speak on its behalf; station_company: the station belongs to a comany and a company can have more gas stations. rank_of_the_year is anumber assigned depending on its success during that financial year."
  },
  {
    "db_id": "gas_company",
    "query": "SELECT manager_name FROM gas_station WHERE open_year < 2005 GROUP BY manager_name ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "station_id",
      ",",
      "LOCATION",
      ",",
      "manager_name",
      "FROM",
      "gas_station",
      "ORDER",
      "BY",
      "open_year"
    ],
    "query_toks_no_value": [
      "select",
      "station_id",
      ",",
      "location",
      ",",
      "manager_name",
      "from",
      "gas_station",
      "order",
      "by",
      "open_year"
    ],
    "question": "Who is the manager of the most gas stations which opened before 2005?",
    "question_toks": [
      "What",
      "are",
      "the",
      "gas",
      "station",
      "ids",
      ",",
      "locations",
      ",",
      "and",
      "manager",
      "names",
      "for",
      "the",
      "gas",
      "stations",
      "ordered",
      "by",
      "opening",
      "year",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [
        false,
        [
          [0, [0, [0, 10, false], null]],
          [0, [0, [0, 12, false], null]],
          [0, [0, [0, 13, false], null]]
        ]
      ],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 11, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "company: is a commercial business and it can be in particular a retail business for gasoline, oil and other products. company is company name. headquarters is the administrative center of a company. companies have a rank that is lower when their sales are higher. main_industry is the main economic activity of the company. sales_billion refer to a company's revenue earned from the sales of products or services (net sales). profits_billion is a financial gain obtained by the company, in billions. assets_billion is a valuable resource for the company. market_value is the market value of the company; gas_station: a unit that sells fuel for motor vehicles and each company can own multiple gas stations. open_year is the year when the gas station was opened to the public. location is the certain address gas stations are located at. manager_name is the name of the manager who is supervising the the gas station. vice_manager_name is the name of the vice manager, who is the second most authority after the manager. representative_name is a person appointed by the company to speak on its behalf; station_company: the station belongs to a comany and a company can have more gas stations. rank_of_the_year is anumber assigned depending on its success during that financial year."
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T1.location, T1.open_year, T2.rank_of_the_year FROM gas_station AS T1 JOIN station_company AS T2 ON T1.station_id = T2.station_id ORDER BY T2.rank_of_the_year",
    "query_toks": [
      "SELECT",
      "manager_name",
      "FROM",
      "gas_station",
      "WHERE",
      "open_year",
      ">",
      "2000",
      "GROUP",
      "BY",
      "manager_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "manager_name",
      "from",
      "gas_station",
      "where",
      "open_year",
      ">",
      "value",
      "group",
      "by",
      "manager_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the location, opening year, and rank of the year of the gas stations ordered by rank of the year.",
    "question_toks": [
      "Show",
      "the",
      "manager",
      "name",
      "with",
      "most",
      "number",
      "of",
      "gas",
      "stations",
      "opened",
      "after",
      "2000",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 13, false], null]]]],
      "where": [[false, 3, [0, [0, 11, false], null], 2000.0, null]],
      "groupBy": [[0, 13, false]],
      "having": [],
      "orderBy": ["desc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "company: is a commercial business and it can be in particular a retail business for gasoline, oil and other products. company is company name. headquarters is the administrative center of a company. companies have a rank that is lower when their sales are higher. main_industry is the main economic activity of the company. sales_billion refer to a company's revenue earned from the sales of products or services (net sales). profits_billion is a financial gain obtained by the company, in billions. assets_billion is a valuable resource for the company. market_value is the market value of the company; gas_station: a unit that sells fuel for motor vehicles and each company can own multiple gas stations. open_year is the year when the gas station was opened to the public. location is the certain address gas stations are located at. manager_name is the name of the manager who is supervising the the gas station. vice_manager_name is the name of the vice manager, who is the second most authority after the manager. representative_name is a person appointed by the company to speak on its behalf; station_company: the station belongs to a comany and a company can have more gas stations. rank_of_the_year is anumber assigned depending on its success during that financial year."
  },
  {
    "db_id": "gas_company",
    "query": "SELECT location, manager_name, vice_manager_name FROM gas_station WHERE open_year BETWEEN 2000 AND 2006",
    "query_toks": [
      "SELECT",
      "manager_name",
      "FROM",
      "gas_station",
      "WHERE",
      "open_year",
      ">",
      "2000",
      "GROUP",
      "BY",
      "manager_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "manager_name",
      "from",
      "gas_station",
      "where",
      "open_year",
      ">",
      "value",
      "group",
      "by",
      "manager_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the locations, manager names and vice-manager names of all gas stations that opened from 2000 to 2006?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "manager",
      "with",
      "the",
      "most",
      "gas",
      "stations",
      "that",
      "opened",
      "after",
      "2000",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 13, false], null]]]],
      "where": [[false, 3, [0, [0, 11, false], null], 2000.0, null]],
      "groupBy": [[0, 13, false]],
      "having": [],
      "orderBy": ["desc", [[0, [3, 0, false], null]]],
      "limit": 1,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "company: is a commercial business and it can be in particular a retail business for gasoline, oil and other products. company is company name. headquarters is the administrative center of a company. companies have a rank that is lower when their sales are higher. main_industry is the main economic activity of the company. sales_billion refer to a company's revenue earned from the sales of products or services (net sales). profits_billion is a financial gain obtained by the company, in billions. assets_billion is a valuable resource for the company. market_value is the market value of the company; gas_station: a unit that sells fuel for motor vehicles and each company can own multiple gas stations. open_year is the year when the gas station was opened to the public. location is the certain address gas stations are located at. manager_name is the name of the manager who is supervising the the gas station. vice_manager_name is the name of the vice manager, who is the second most authority after the manager. representative_name is a person appointed by the company to speak on its behalf; station_company: the station belongs to a comany and a company can have more gas stations. rank_of_the_year is anumber assigned depending on its success during that financial year."
  },
  {
    "db_id": "gas_company",
    "query": "SELECT T3.company FROM gas_station AS T1 JOIN station_company AS T2 ON T1.station_id = T2.station_id JOIN company AS T3 ON T2.company_id = T3.company_id ORDER BY T1.open_year DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "LOCATION",
      "FROM",
      "gas_station",
      "ORDER",
      "BY",
      "open_year"
    ],
    "query_toks_no_value": [
      "select",
      "location",
      "from",
      "gas_station",
      "order",
      "by",
      "open_year"
    ],
    "question": "What is the name of the company which owns the newest gas station?",
    "question_toks": [
      "order",
      "all",
      "gas",
      "station",
      "locations",
      "by",
      "the",
      "opening",
      "year",
      "."
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 12, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 11, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "company: is a commercial business and it can be in particular a retail business for gasoline, oil and other products. company is company name. headquarters is the administrative center of a company. companies have a rank that is lower when their sales are higher. main_industry is the main economic activity of the company. sales_billion refer to a company's revenue earned from the sales of products or services (net sales). profits_billion is a financial gain obtained by the company, in billions. assets_billion is a valuable resource for the company. market_value is the market value of the company; gas_station: a unit that sells fuel for motor vehicles and each company can own multiple gas stations. open_year is the year when the gas station was opened to the public. location is the certain address gas stations are located at. manager_name is the name of the manager who is supervising the the gas station. vice_manager_name is the name of the vice manager, who is the second most authority after the manager. representative_name is a person appointed by the company to speak on its behalf; station_company: the station belongs to a comany and a company can have more gas stations. rank_of_the_year is anumber assigned depending on its success during that financial year."
  },
  {
    "db_id": "gas_company",
    "query": "SELECT LOCATION FROM gas_station WHERE open_year <= 2004",
    "query_toks": [
      "SELECT",
      "LOCATION",
      "FROM",
      "gas_station",
      "ORDER",
      "BY",
      "open_year"
    ],
    "query_toks_no_value": [
      "select",
      "location",
      "from",
      "gas_station",
      "order",
      "by",
      "open_year"
    ],
    "question": "Give the locations of the gas stations that opened in or before 2004.",
    "question_toks": [
      "What",
      "are",
      "the",
      "locations",
      "of",
      "all",
      "the",
      "gas",
      "stations",
      "ordered",
      "by",
      "opening",
      "year",
      "?"
    ],
    "sql": {
      "from": { "table_units": [["table_unit", 1]], "conds": [] },
      "select": [false, [[0, [0, [0, 12, false], null]]]],
      "where": [],
      "groupBy": [],
      "having": [],
      "orderBy": ["asc", [[0, [0, 11, false], null]]],
      "limit": null,
      "intersect": null,
      "union": null,
      "except": null
    },
    "db_description": "company: is a commercial business and it can be in particular a retail business for gasoline, oil and other products. company is company name. headquarters is the administrative center of a company. companies have a rank that is lower when their sales are higher. main_industry is the main economic activity of the company. sales_billion refer to a company's revenue earned from the sales of products or services (net sales). profits_billion is a financial gain obtained by the company, in billions. assets_billion is a valuable resource for the company. market_value is the market value of the company; gas_station: a unit that sells fuel for motor vehicles and each company can own multiple gas stations. open_year is the year when the gas station was opened to the public. location is the certain address gas stations are located at. manager_name is the name of the manager who is supervising the the gas station. vice_manager_name is the name of the vice manager, who is the second most authority after the manager. representative_name is a person appointed by the company to speak on its behalf; station_company: the station belongs to a comany and a company can have more gas stations. rank_of_the_year is anumber assigned depending on its success during that financial year."
  }
]
