[{"prediction": "new_concert_singer | select name, country from singer order by birthday", "query": "SELECT name ,  country  FROM singer ORDER BY birthday ASC", "question": "Show name, country for all singers ordered by age from the oldest to the youngest.", "context": "Show name, country for all singers ordered by age from the oldest to the youngest. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select name, country from singer order by birthday asc", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select song_name, song_release_year from singer order by birthday desc limit 1", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY birthday desc LIMIT 1", "question": "Show the name and the release year of the song by the youngest singer.", "context": "Show the name and the release year of the song by the youngest singer. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select song_name, song_release_year from singer order by birthday desc limit 1", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select song_name, song_release_year from singer order by birthday desc limit 1", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY birthday desc LIMIT 1", "question": "What are the names and release years for all the songs of the youngest singer?", "context": "What are the names and release years for all the songs of the youngest singer? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select song_name, song_release_year from singer order by birthday desc limit 1", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select distinct country from singer where birthday like \"2001%\"", "query": "SELECT DISTINCT country FROM singer WHERE birthday  like '2001%'", "question": "What are all distinct countries where singers born in 2001 are from?", "context": "What are all distinct countries where singers born in 2001 are from? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select distinct country from singer where birthday like '2001%'", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select distinct country from singer where birthday = 2001", "query": "SELECT DISTINCT country FROM singer WHERE birthday  like  '2001%'", "question": "What are  the different countries with singers born in 2001?", "context": "What are the different countries with singers born in 2001? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select distinct country from singer where birthday like '2001%'", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select song_name from singer where birthday > (select avg(birthday) from singer)", "query": "SELECT song_name FROM singer WHERE birthday  <  (SELECT avg(birthday) FROM singer)", "question": "What are all the song names by singers who are older than average?", "context": "What are all the song names by singers who are older than average? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select song_name from singer where birthday < (select avg(birthday) from singer)", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select count(*) from concert where year > 2014", "query": "SELECT count(*) FROM concert WHERE YEAR  >=  2014", "question": "How many concerts are there after or in year 2014?", "context": "How many concerts are there after or in year 2014? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select count(*) from concert where year >= 2014", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select count(*) from concert where year > 2014", "query": "SELECT count(*) FROM concert WHERE YEAR  >=  2014", "question": "How many concerts occurred after or in 2014?", "context": "How many concerts occurred after or in 2014? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select count(*) from concert where year >= 2014", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t1.stadium_id order by count(*) desc limit 1", "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "context": "Show the stadium name and capacity with most number of concerts in year 2014 or after. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t2.stadium_id order by count(*) desc limit 1", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select t2.name, t2.highest, t2.average from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t1.stadium_id order by count(*) desc limit 1", "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "question": "What is the name and highest attendance of the stadium  with the most concerts after 2013?", "context": "What is the name and highest attendance of the stadium with the most concerts after 2013? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t2.stadium_id order by count(*) desc limit 1", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select concert_name, year from concert order by year desc limit 1", "query": "SELECT concert_Name FROM concert ORDER BY YEAR asc LIMIT 1", "question": "Which concert is the oldest?", "context": "Which concert is the oldest? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select concert_name from concert order by year asc limit 1", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select concert_name from concert order by year asc limit 1", "query": "SELECT concert_Name FROM concert ORDER BY YEAR asc LIMIT 1", "question": "Return the oldest concert name?", "context": "Return the oldest concert name? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select concert_name from concert order by year asc limit 1", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select country from singer where birthday like \"1981\" or birthday like \"911\"", "query": "SELECT country FROM singer WHERE birthday  like  '1981%' or birthday  like  '1991%'", "question": "Show countries where a singer born in 1981 or 1991 are from.", "context": "Show countries where a singer born in 1981 or 1991 are from. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select country from singer where birthday like '1981%' or birthday like '1991%'", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select average from stadium except select t1.average from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2014", "query": "SELECT average FROM stadium EXCEPT SELECT T2.average FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "question": "Show average attendance for all stadiums except for stadiums having a concert in year 2014.", "context": "Show average attendance for all stadiums except for stadiums having a concert in year 2014. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select average from stadium except select t2.average from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select t3.name from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id join singer as t3 on t1.singer_id = t3.singer_id where t2.year > 2014", "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  >=  2014", "question": "List all singer names in concerts after or in year 2014.", "context": "List all singer names in concerts after or in year 2014. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year >= 2014", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_concert_singer | select t3.name from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id join singer as t3 on t1.singer_id = t3.singer_id where t2.year < 2014", "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  <=  2014", "question": "What are the names of the singers who performed in a concert before or in 2014?", "context": "What are the names of the singers who performed in a concert before or in 2014? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "new_concert_singer | select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year <= 2014", "db_id": "new_concert_singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Birthday", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}}, {"prediction": "new_pets_1 | select weight from pets order by birthdate asc limit 1", "query": "SELECT weight FROM pets ORDER BY birthdate desc LIMIT 1", "question": "Find the weight of the youngest dog.", "context": "Find the weight of the youngest dog. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog ), birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;", "label": "new_pets_1 | select weight from pets order by birthdate desc limit 1", "db_id": "new_pets_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "birthdate", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"prediction": "new_pets_1 | select min(weight) from pets", "query": "SELECT weight FROM pets ORDER BY birthdate desc LIMIT 1", "question": "How much does the youngest dog weigh?", "context": "How much does the youngest dog weigh? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog ), birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;", "label": "new_pets_1 | select weight from pets order by birthdate desc limit 1", "db_id": "new_pets_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "birthdate", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"prediction": "new_pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.age > 20", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "question": "Find number of pets owned by students who are older than 20.", "context": "Find number of pets owned by students who are older than 20. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;", "label": "new_pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.age > 20", "db_id": "new_pets_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "birthdate", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"prediction": "new_pets_1 | select pettype, weight from pets order by birthdate desc limit 1", "query": "SELECT pettype ,  weight FROM pets ORDER BY birthdate desc LIMIT 1", "question": "Find the type and weight of the youngest pet.", "context": "Find the type and weight of the youngest pet. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;", "label": "new_pets_1 | select pettype, weight from pets order by birthdate desc limit 1", "db_id": "new_pets_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "birthdate", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"prediction": "new_pets_1| select pettype, weight from pets order by birthdate desc limit 1", "query": "SELECT pettype ,  weight FROM pets ORDER BY birthdate desc LIMIT 1", "question": "What type of pet is the youngest animal, and how much does it weigh?", "context": "What type of pet is the youngest animal, and how much does it weigh? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;", "label": "new_pets_1 | select pettype, weight from pets order by birthdate desc limit 1", "db_id": "new_pets_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "birthdate", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"prediction": "new_pets_1 | select petid, weight from pets where birthdate > 2020", "query": "SELECT petid ,  weight FROM pets WHERE birthdate  <  '2020-01-01'", "question": "Find the id and weight of all pets older than that born in 2020.", "context": "Find the id and weight of all pets older than that born in 2020. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;", "label": "new_pets_1 | select petid, weight from pets where birthdate < '2020-01-01'", "db_id": "new_pets_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "birthdate", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"prediction": "new_pets_1 | select petid, weight from pets where birthdate > 2020", "query": "SELECT petid ,  weight FROM pets WHERE birthdate  <  '2020-05-01'", "question": "What is the id and weight of every pet who is older than that born in 2020?", "context": "What is the id and weight of every pet who is older than that born in 2020? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;", "label": "new_pets_1 | select petid, weight from pets where birthdate < '2020-05-01'", "db_id": "new_pets_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "birthdate", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"prediction": "new_pets_1 | select t2.lname from has_pet as t1 join student as t2 on t1.stuid = t2.stuid join pets as t3 on t1.petid = t3.petid where t3.birthdate = 2001", "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.birthdate  like  '2001%' AND T3.pettype  =  'cat'", "question": "Find the last name of the student who has a cat that born in 2001.", "context": "Find the last name of the student who has a cat that born in 2001. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( cat ), birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;", "label": "new_pets_1 | select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.birthdate like '2001%' and t3.pettype = 'cat'", "db_id": "new_pets_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "birthdate", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"prediction": "new_pets_1 | select t2.lname from has_pet as t1 join student as t2 on t1.stuid = t2.stuid join pets as t3 on t1.petid = t3.petid where t3.birthdate = 2001", "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.birthdate  like '2001%' AND T3.pettype  =  'cat'", "question": "What is the last name of the student who has a cat that born in 2001?", "context": "What is the last name of the student who has a cat that born in 2001? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( cat ), birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;", "label": "new_pets_1 | select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.birthdate like '2001%' and t3.pettype = 'cat'", "db_id": "new_pets_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "birthdate", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}}, {"prediction": "car_1 | select t2.make, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid order by t1.year limit 1", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "question": "Find the make and production time of the cars that were produced in the earliest year?", "context": "Find the make and production time of the cars that were produced in the earliest year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select t2.make, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data);", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"prediction": "car_1 | select t1.maker, t2.year from car_makers as t1 join cars_data as t2 on t1.maker = t2.id order by t2.year limit 1", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "question": "What is the maker of the carr produced in the earliest year and what year was it?", "context": "What is the maker of the carr produced in the earliest year and what year was it? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select t2.make, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data);", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"prediction": "car_1 | select distinct model from model_list where modelid not in (select id from cars_data where year < 1980)", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  <=  1980;", "question": "Which distinct car models are the produced before or in 1980?", "context": "Which distinct car models are the produced before or in 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year <= 1980;", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"prediction": "car_1 | select distinct t2.model from cars_data as t1 join model_list as t2 on t1.id = t2.modelid where t1.year < 1980", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  <=  1980;", "question": "What are the different models for the cards produced before or in 1980?", "context": "What are the different models for the cards produced before or in 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year <= 1980;", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"prediction": "car_1 | select avg(weight), year from cars_data group by year", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "question": "What is the average weight of cars each year?", "context": "What is the average weight of cars each year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select avg(weight), year from cars_data group by year;", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"prediction": "car_1 | select avg(weight), year from cars_data group by year", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "question": "What is the average weight and year for each year?", "context": "What is the average weight and year for each year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select avg(weight), year from cars_data group by year;", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"prediction": "car_1 | select avg(horsepower) from cars_data where year < 1980", "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <=  1980;", "question": "What is the average horsepower of the cars before or in 1980?", "context": "What is the average horsepower of the cars before or in 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select avg(horsepower) from cars_data where year <= 1980;", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"prediction": "car_1 | select avg(horsepower) from cars_data where year < 1980", "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <=  1980;", "question": "What is the average horsepower for all cards produced before or in 1980?", "context": "What is the average horsepower for all cards produced before or in 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select avg(horsepower) from cars_data where year <= 1980;", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"prediction": "car_1 | select max(mpg) from cars_data where id in (select id from cars_data where cylinders = 8 union select id from cars_data where year < 1980)", "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <=  1980 ORDER BY mpg DESC LIMIT 1;", "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before or in 1980?", "context": "What is the maximum miles per gallon of the car with 8 cylinders or produced before or in 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select mpg from cars_data where cylinders = 8 or year <= 1980 order by mpg desc limit 1;", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"prediction": "car_1 | select max(mpg) from cars_data where cylinders = 8 union select max(mpg) from cars_data where year < 1980", "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <=  1980 ORDER BY mpg DESC LIMIT 1;", "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before or in 1980?", "context": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before or in 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select mpg from cars_data where cylinders = 8 or year <= 1980 order by mpg desc limit 1;", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from from templates group by date_effective_to order by count(*) desc limit 1", "query": "SELECT T2.Date_Effective_From ,  T2.Date_Effective_To FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "question": "What is the effective date period for the template used by the most documents?", "context": "What is the effective date period for the template used by the most documents? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t2.date_effective_from, t2.date_effective_to from documents as t1 join templates as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1", "query": "SELECT T2.Date_Effective_From ,  T2.Date_Effective_To FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "question": "Return the effective date range of the template that is used for the greatest number of documents.", "context": "Return the effective date range of the template that is used for the greatest number of documents. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t2.date_effective_from, t2.date_effective_to from documents as t1 join templates as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, template_type_code from templates", "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates", "question": "Show effective date period, and template type codes for all templates.", "context": "Show effective date period, and template type codes for all templates. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, template_type_code from templates", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, template_type_code from templates", "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates", "question": "What are the effective date period, and type codes for each template?", "context": "What are the effective date period, and type codes for each template? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, template_type_code from templates", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select distinct date_effective_from, date_effective_to from templates", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates", "question": "Show all effective date period for all templates.", "context": "Show all effective date period for all templates. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates", "question": "What are the effective date range from to?", "context": "What are the effective date range from to? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "question": "What are the effective date range with template type code PP or PPT?", "context": "What are the effective date range with template type code PP or PPT? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT, PP ), template_type_description | templates : template_id, version_number, template_type_code ( PPT, PP ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "question": "Return the effective date range that have the code PP or PPT.", "context": "Return the effective date range that have the code PP or PPT. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT, PP ), template_type_description | templates : template_id, version_number, template_type_code ( PPT, PP ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from from templates where template_type_code = \"CV\"", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"CV\"", "question": "Give me the effective date period whose template type code is CV?", "context": "Give me the effective date period whose template type code is CV? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( CV ) | templates : template_id, version_number, template_type_code ( CV ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates where template_type_code = \"CV\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from from templates where template_type_code = \"CV\"", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"CV\"", "question": "Return the effective date period of the template type CV.", "context": "Return the effective date period of the template type CV. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( CV ) | templates : template_id, version_number, template_type_code ( CV ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates where template_type_code = \"CV\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, template_type_code from templates where version_number > 5", "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates WHERE version_number  >  5", "question": "What is the effective date period and template type code for the template with version number later than 5?", "context": "What is the effective date period and template type code for the template with version number later than 5? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, template_type_code from templates where version_number > 5", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, template_type_code from templates where version_number > 5", "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates WHERE version_number  >  5", "question": "Return the effective date period and template type codes of templates with a version number greater than 5.", "context": "Return the effective date period and template type codes of templates with a version number greater than 5. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, template_type_code from templates where version_number > 5", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, count(*) from templates group by date_effective_from", "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  count(*) FROM Templates GROUP BY template_type_code", "question": "Show all effective date period and number of templates for each.", "context": "Show all effective date period and number of templates for each. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, count(*) from templates group by template_type_code", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, count(*) from templates group by date_effective_to", "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  count(*) FROM Templates GROUP BY template_type_code", "question": "What are the effective date period, and how many templates correspond to each?", "context": "What are the effective date period, and how many templates correspond to each? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, count(*) from templates group by template_type_code", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from from templates group by date_effective_to order by count(*) desc limit 1", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "question": "Which effective date period has most number of templates?", "context": "Which effective date period has most number of templates? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates group by template_type_code order by count(*) desc limit 1", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from from templates group by date_effective_to order by count(*) desc limit 1", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "question": "Return the effective date period that the most templates belong to.", "context": "Return the effective date period that the most templates belong to. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates group by template_type_code order by count(*) desc limit 1", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from from templates group by date_effective_to having count(*) < 3", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "question": "Show all effective date period with less than three templates.", "context": "Show all effective date period with less than three templates. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates group by template_type_code having count(*) < 3", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates group by date_effective_to having count(*) < 3", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "question": "What are the effective date period that have fewer than 3 templates?", "context": "What are the effective date period that have fewer than 3 templates? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates group by template_type_code having count(*) < 3", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select version_number, date_effective_from, date_effective_to from templates order by version_number asc limit 1", "query": "SELECT min(Version_Number) ,  Date_Effective_From ,  Date_Effective_To FROM Templates", "question": "What the smallest version number and its effective date date from and to?", "context": "What the smallest version number and its effective date date from and to? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select min(version_number), date_effective_from, date_effective_to from templates", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select version_number, date_effective_from, date_effective_to from templates order by version_number asc limit 1", "query": "SELECT min(Version_Number) ,  Date_Effective_From ,  Date_Effective_To FROM Templates", "question": "Return the lowest version number, along with its corresponding effective date date from and to.", "context": "Return the lowest version number, along with its corresponding effective date date from and to. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select min(version_number), date_effective_from, date_effective_to from templates", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select t2.date_effective_from, t2.date_effective_to from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t1.document_name = \"Data base\"", "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "question": "What is the effective date range of the template used by document with the name \"Data base\"?", "context": "What is the effective date range of the template used by document with the name \"Data base\"? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Data base ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select t2.date_effective_from from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t1.document_name = \"Data base\"", "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "question": "Return the effective date range of the template that is used by a document named Data base.", "context": "Return the effective date range of the template that is used by a document named Data base. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Data base ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, count(*) from templates group by template_type_code", "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "question": "Show all effective date from and to, and the number of documents using each type.", "context": "Show all effective date from and to, and the number of documents using each type. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code", "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "question": "What are effective date from and to, and how many documents use each type?", "context": "What are effective date from and to, and how many documents use each type? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select t1.date_effective_from from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.date_effective_to order by count(*) desc limit 1", "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "question": "Which effective date period is used by most number of documents?", "context": "Which effective date period is used by most number of documents? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from from templates group by date_effective_to order by count(*) desc limit 1", "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "question": "Return the effective date period that is most commonly used in documents.", "context": "Return the effective date period that is most commonly used in documents. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates except select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates EXCEPT SELECT Date_Effective_From ,  Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "question": "Show all effective date from and to that are not used by any document.", "context": "Show all effective date from and to that are not used by any document. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates except select date_effective_from, date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates except select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates EXCEPT SELECT Date_Effective_From ,  Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "question": "What are the effective date from and to that are not used for any document?", "context": "What are the effective date from and to that are not used for any document? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates except select date_effective_from, date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code where t2.template_type_description = \"Presentation\"", "query": "SELECT T2.Date_Effective_From ,  T2.Date_Effective_To FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "question": "What are the effective date range from to with template type description \"Presentation\".", "context": "What are the effective date range from to with template type description \"Presentation\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Presentation ) | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t2.date_effective_from, t2.date_effective_to from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = \"Presentation\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "cre_Doc_Template_Mgt | select t1.date_effective_from from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code where t2.template_type_description = \"Presentation\"", "query": "SELECT T2.Date_Effective_From ,  T2.Date_Effective_To FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "question": "Return the effective date period corresponding to templates with the description 'Presentation'.", "context": "Return the effective date period corresponding to templates with the description 'Presentation'. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Presentation ) | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t2.date_effective_from, t2.date_effective_to from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = \"Presentation\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}}, {"prediction": "wta_1 | select first_name, birth_date from players where country_code = 'USA'", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "question": "List the first name and birth date of all American players.", "context": "List the first name and birth date of all American players. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings", "label": "wta_1 | select first_name, birth_date from players where country_code = 'USA'", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select first_name, birth_date from players where country_code = 'USA'", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "question": "What are the first names and birth dates of American players?", "context": "What are the first names and birth dates of American players? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position", "label": "wta_1 | select first_name, birth_date from players where country_code = 'USA'", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select winner_name, loser_name from matches where year = 2013 or year = 2016", "query": "SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "question": "Including winner and loser, Give me all player name of each matche in 2013 or 2016 year?", "context": "Including winner and loser, Give me all player name of each matche in 2013 or 2016 year? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which", "label": "wta_1 | select loser_name, winner_name from matches where year = 2013 or year = 2016", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select first_name, country_code from players order by birth_date desc limit 1", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "question": "Find the first name and country code of the oldest player.", "context": "Find the first name and country code of the oldest player. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position", "label": "wta_1 | select first_name, country_code from players order by birth_date limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select first_name, country_code from players order by birth_date desc limit 1", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "question": "What is the first name and country code of the oldest player?", "context": "What is the first name and country code of the oldest player? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is", "label": "wta_1 | select first_name, country_code from players order by birth_date limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select first_name, last_name from players order by birth_date", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "question": "List the first and last name of all players order of their birth date from old to young.", "context": "List the first and last name of all players order of their birth date from old to young. | wta_1 | players : player_id, first_name, last_name ( Date, Last ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is", "label": "wta_1 | select first_name, last_name from players order by birth_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "question": "What are the full names of all players, sorted from oldest to youngest?", "context": "What are the full names of all players, sorted from oldest to youngest? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings", "label": "wta_1 | select first_name, last_name from players order by birth_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "question": "List the first and last name of all players who are left / L hand in the order of their date of birth from the oldest to the youngest.", "context": "List the first and last name of all players who are left / L hand in the order of their date of birth from the oldest to the youngest. | wta_1 | players : player_id, first_name, last_name ( Date, Last ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of", "label": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date desc", "question": "What are the name of all left handed players, in order of date of birth from the young to the old?", "context": "What are the name of all left handed players, in order of date of birth from the young to the old? | wta_1 | players : player_id, first_name, last_name ( Date, Young ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a", "label": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date desc", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select year from matches group by year order by count(*) desc limit 1", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "question": "Find the year that has the most number of matches.", "context": "Find the year that has the most number of matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position ", "label": "wta_1 | select year from matches group by year order by count(*) desc limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select year from matches group by year order by count(*) desc limit 1", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "question": "Which year had the most matches?", "context": "Which year had the most matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in the player", "label": "wta_1 | select year from matches group by year order by count(*) desc limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select ranking_date, count(*) from rankings group by ranking_date", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "question": "Find the total number of tours for each ranking date.", "context": "Find the total number of tours for each ranking date. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings:", "label": "wta_1 | select sum(tours), ranking_date from rankings group by ranking_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select ranking_date, sum(tours) from rankings group by ranking_date", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "question": "How many total tours were there for each ranking date?", "context": "How many total tours were there for each ranking date? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings:", "label": "wta_1 | select sum(tours), ranking_date from rankings group by ranking_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select count(*), year from matches group by year", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "question": "Find the number of matches happened in each year.", "context": "Find the number of matches happened in each year. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied", "label": "wta_1 | select count(*), year from matches group by year", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select count(*), year from matches group by year", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "question": "How many matches were played in each year?", "context": "How many matches were played in each year? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in", "label": "wta_1 | select count(*), year from matches group by year", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select winner_name, winner_rank from matches order by winner_age asc limit 3", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "question": "Find the name and rank of the 3 youngest winners across all matches.", "context": "Find the name and rank of the 3 youngest winners across all matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking", "label": "wta_1 | select distinct winner_name, winner_rank from matches order by winner_age limit 3", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select winner_name, winner_rank from matches order by winner_age asc limit 3", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "question": "What are the names and ranks of the three youngest winners across all matches?", "context": "What are the names and ranks of the three youngest winners across all matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings:", "label": "wta_1 | select distinct winner_name, winner_rank from matches order by winner_age limit 3", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select winner_name, birth_date from matches as t1 join rankings as t2 on t1.winner_ioc = t2.winner_id", "query": "SELECT T1.first_name , T1.last_name ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "question": "Find the name and birth date of the winner who has the highest rank points in all matches.", "context": "Find the name and birth date of the winner who has the highest rank points in all matches. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in", "label": "wta_1 | select t1.first_name, t1.last_name, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "wta_1 | select t1.first_name, t1.last_name, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id group by t2.winner_id order by count(*) desc limit 1", "query": "SELECT T1.first_name , T1.last_name  ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "question": "What is the name and birth date of the player with the most winner rank points across all matches?", "context": "What is the name and birth date of the player with the most winner rank points across all matches? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year", "label": "wta_1 | select t1.first_name, t1.last_name, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}}, {"prediction": "new_orchestra | select record_company from orchestra order by year_of_founded asc", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc", "question": "What are the record companies of orchestras in the order of founded years from oldest to latest?", "context": "What are the record companies of orchestras in the order of founded years from oldest to latest? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;", "label": "new_orchestra | select record_company from orchestra order by year_of_founded asc", "db_id": "new_orchestra", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "birthday", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "Result", "If_first_show", "Attendance"]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"prediction": "new_orchestra | select record_company from orchestra order by year_of_founded asc", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc", "question": "Return the record companies of orchestras, sorted by the founded year from oldest to latest.", "context": "Return the record companies of orchestras, sorted by the founded year from oldest to latest. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;", "label": "new_orchestra | select record_company from orchestra order by year_of_founded asc", "db_id": "new_orchestra", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "birthday", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "Result", "If_first_show", "Attendance"]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"prediction": "new_orchestra | select t2.name from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id order by t1.year_of_work", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID order by Year_of_Founded asc limit 1", "question": "Please show the name of the conductor who has conducted the oldest orchestras.", "context": "Please show the name of the conductor who has conducted the oldest orchestras. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;", "label": "new_orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id order by year_of_founded asc limit 1", "db_id": "new_orchestra", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "birthday", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "Result", "If_first_show", "Attendance"]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"prediction": "new_orchestra | select record_company from orchestra order by year_of_founded asc", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc LIMIT 1", "question": "List the record company shared by the oldest orchestras.", "context": "List the record company shared by the oldest orchestras. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;", "label": "new_orchestra | select record_company from orchestra order by year_of_founded asc limit 1", "db_id": "new_orchestra", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "birthday", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "Result", "If_first_show", "Attendance"]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"prediction": "new_orchestra | select record_company from orchestra order by year_of_founded desc limit 1", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded desc LIMIT 1", "question": "What is the record company used by the newest orchestras?", "context": "What is the record company used by the newest orchestras? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;", "label": "new_orchestra | select record_company from orchestra order by year_of_founded desc limit 1", "db_id": "new_orchestra", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "birthday", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "Result", "If_first_show", "Attendance"]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"prediction": "new_orchestra | select record_company from orchestra where year_of_founded < 2003", "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <=  2003", "question": "Show the record companies shared by orchestras founded before or in 2003.", "context": "Show the record companies shared by orchestras founded before or in 2003. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;", "label": "new_orchestra | select record_company from orchestra where year_of_founded <= 2003", "db_id": "new_orchestra", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "birthday", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "Result", "If_first_show", "Attendance"]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"prediction": "new_orchestra | select record_company from orchestra where year_of_founded > 2003 intersect select record_company from orchestra where year_of_founded < 2003", "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >=  2003", "question": "What are the record companies that are used by both orchestras founded after or in 2003?", "context": "What are the record companies that are used by both orchestras founded after or in 2003? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;", "label": "new_orchestra | select record_company from orchestra where year_of_founded >= 2003", "db_id": "new_orchestra", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "birthday", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "Result", "If_first_show", "Attendance"]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}}, {"prediction": "dog_kennels | select date_of_treatment, t3.first_name, t3.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id join treatment_types as", "query": "SELECT T1.date_of_treatment ,  T2.first_name , T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "question": "List the date of each treatment, together with the name of the professional who operated it.", "context": "List the date of each treatment, together with the name of the professional who operated it. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the", "label": "dog_kennels | select t1.date_of_treatment, t2.first_name, t2.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"prediction": "dog_kennels | select t1.date_of_treatment, t2.first_name, t2.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id", "query": "SELECT T1.date_of_treatment ,  T2.first_name , T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "question": "What are the date and the operating professional's name of each treatment?", "context": "What are the date and the operating professional's name of each treatment? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival", "label": "dog_kennels | select t1.date_of_treatment, t2.first_name, t2.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"prediction": "dog_kennels | select t1.date_of_treatment from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id order by t2.date_arrived - t2.date_departed", "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "question": "What is the treatment date from dog arriving to departing?", "context": "What is the treatment date from dog arriving to departing? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog", "label": "dog_kennels | select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"prediction": "dog_kennels | select date_of_treatment, date_arrived from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id order by t2.date_arrived, t2.date_departed", "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "question": "Find the dog treatment period from arriving to departing date.", "context": "Find the dog treatment period from arriving to departing date. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog", "label": "dog_kennels | select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"prediction": "dog_kennels | select t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id order by t1.age asc limit 1", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "question": "List the last name of the owner owning the youngest dog.", "context": "List the last name of the owner owning the youngest dog. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the", "label": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.age = ( select max(age) from dogs )", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"prediction": "dog", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "question": "Who owns the youngest dog? Give me his or her last name.", "context": "Who owns the youngest dog? Give me his or her last name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival", "label": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.age = ( select max(age) from dogs )", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"prediction": "dog_kennels | select date_arrived, date_departed from dogs where abandoned_yn = '1'", "query": "SELECT date_arrived ,  date_departed FROM Dogs where abandoned_yn = 1", "question": "What are the arriving date and the departing date of all the abandoned dogs?", "context": "What are the arriving date and the departing date of all the abandoned dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of", "label": "dog_kennels | select date_arrived, date_departed from dogs where abandoned_yn = 1", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"prediction": "dog_kennels | select date_arrived, date_departed from dogs where abandoned_yn = '1'", "query": "SELECT date_arrived ,  date_departed FROM Dogs where abandoned_yn = 1", "question": "List the arrival date and the departure date for all the abandoned dogs.", "context": "List the arrival date and the departure date for all the abandoned dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of", "label": "dog_kennels | select date_arrived, date_departed from dogs where abandoned_yn = 1", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"prediction": "dog_kennels | select max(cost_of_treatment) from treatments", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "question": "How much does the most recent treatment cost?", "context": "How much does the most recent treatment cost? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ", "label": "dog_kennels | select cost_of_treatment from treatments order by date_of_treatment desc limit 1", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"prediction": "dog_kennels | select age from dogs order by age desc limit 1", "query": "SELECT max(age) FROM Dogs", "question": "What is the age of the oldest dog?", "context": "What is the age of the oldest dog? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ", "label": "dog_kennels | select max(age) from dogs", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"prediction": "dog_kennels | select age from dogs order by age desc limit 1", "query": "SELECT max(age) FROM Dogs", "question": "Tell me the age of the oldest dog.", "context": "Tell me the age of the oldest dog. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ", "label": "dog_kennels | select max(age) from dogs", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}}, {"prediction": "singer | select birth_year, citizenship from singer", "query": "SELECT Birth_Year ,  Citizenship FROM singer", "question": "What are the birth year and citizenship of singers?", "context": "What are the birth year and citizenship of singers? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;", "label": "singer | select birth_year, citizenship from singer", "db_id": "singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}, {"prediction": "singer | select birth_year, citizenship from singer", "query": "SELECT Birth_Year ,  Citizenship FROM singer", "question": "What are the birth years and citizenships of the singers?", "context": "What are the birth years and citizenships of the singers? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;", "label": "singer | select birth_year, citizenship from singer", "db_id": "singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}, {"prediction": "singer | select name from singer where birth_year <", "query": "SELECT Name FROM singer WHERE Birth_Year  <=  1948", "question": "Show the name of singers whose birth year is earlier than or in 1948?", "context": "Show the name of singers whose birth year is earlier than or in 1948? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;", "label": "singer | select name from singer where birth_year <= 1948", "db_id": "singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}, {"prediction": "singer | select name from singer where birth_year <", "query": "SELECT Name FROM singer WHERE Birth_Year  <=  1948", "question": "What are the names of the singers whose birth years are earlier than or in 1948?", "context": "What are the names of the singers whose birth years are earlier than or in 1948? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;", "label": "singer | select name from singer where birth_year <= 1948", "db_id": "singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}, {"prediction": "singer | select name from singer order by birth_year asc limit 1", "query": "SELECT Name FROM singer ORDER BY Birth_Year DESC LIMIT 1", "question": "What is the name of the singer with the youngest age?", "context": "What is the name of the singer with the youngest age? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;", "label": "singer | select name from singer order by birth_year desc limit 1", "db_id": "singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}, {"prediction": "singer | select name from singer order by birth_year asc limit 1", "query": "SELECT Name FROM singer ORDER BY Birth_Year DESC LIMIT 1", "question": "What is the name of the singer who is the youngest?", "context": "What is the name of the singer who is the youngest? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;", "label": "singer | select name from singer order by birth_year desc limit 1", "db_id": "singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}, {"prediction": "singer | select citizenship from singer where birth_year <= 1945 or birth_year > 1945", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <=  1945", "question": "Show the citizenship shared by singers with birth year before or in 1945.", "context": "Show the citizenship shared by singers with birth year before or in 1945. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;", "label": "singer | select citizenship from singer where birth_year <= 1945", "db_id": "singer", "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}}]