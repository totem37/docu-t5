[{"prediction": "cre_Doc_Template_Mgt | select date_effective_from from templates", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates", "question": "What are the effective date range from to?", "context": "What are the effective date range from to? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, template_type_code from templates where version_number < 5", "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates WHERE version_number  >  5", "question": "What is the effective date period and template type code for the template with version number later than 5?", "context": "What is the effective date period and template type code for the template with version number later than 5? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, template_type_code from templates where version_number > 5", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, template_type_code from templates where version_number > 5", "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates WHERE version_number  >  5", "question": "Return the effective date period and template type codes of templates with a version number greater than 5.", "context": "Return the effective date period and template type codes of templates with a version number greater than 5. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, template_type_code from templates where version_number > 5", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, count(*) from templates group by date_effective_to", "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  count(*) FROM Templates GROUP BY template_type_code", "question": "Show all effective date period and number of templates for each.", "context": "Show all effective date period and number of templates for each. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, count(*) from templates group by template_type_code", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_to, count(*) from templates group by date_effective_to", "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  count(*) FROM Templates GROUP BY template_type_code", "question": "What are the effective date period, and how many templates correspond to each?", "context": "What are the effective date period, and how many templates correspond to each? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, count(*) from templates group by template_type_code", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates group by date_effective_to order by count(*) desc limit 1", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "question": "Which effective date period has most number of templates?", "context": "Which effective date period has most number of templates? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates group by template_type_code order by count(*) desc limit 1", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates group by date_effective_to order by count(*) desc limit 1", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "question": "Return the effective date period that the most templates belong to.", "context": "Return the effective date period that the most templates belong to. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates group by template_type_code order by count(*) desc limit 1", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates group by date_effective_to having count(*) < 3", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "question": "Show all effective date period with less than three templates.", "context": "Show all effective date period with less than three templates. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates group by template_type_code having count(*) < 3", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates group by date_effective_to having count(*) < 3", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "question": "What are the effective date period that have fewer than 3 templates?", "context": "What are the effective date period that have fewer than 3 templates? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates group by template_type_code having count(*) < 3", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select min(version_number), date_effective_to from templates", "query": "SELECT min(Version_Number) ,  Date_Effective_From ,  Date_Effective_To FROM Templates", "question": "What the smallest version number and its effective date date from and to?", "context": "What the smallest version number and its effective date date from and to? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select min(version_number), date_effective_from, date_effective_to from templates", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select version_number, date_effective_to from templates order by date_effective_from limit 1", "query": "SELECT min(Version_Number) ,  Date_Effective_From ,  Date_Effective_To FROM Templates", "question": "Return the lowest version number, along with its corresponding effective date date from and to.", "context": "Return the lowest version number, along with its corresponding effective date date from and to. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select min(version_number), date_effective_from, date_effective_to from templates", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, count(*) from documents", "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "question": "Show all effective date from and to, and the number of documents using each type.", "context": "Show all effective date from and to, and the number of documents using each type. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, count(*) from documents", "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "question": "What are effective date from and to, and how many documents use each type?", "context": "What are effective date from and to, and how many documents use each type? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_to from documents", "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "question": "Which effective date period is used by most number of documents?", "context": "Which effective date period is used by most number of documents? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_to from documents", "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "question": "Return the effective date period that is most commonly used in documents.", "context": "Return the effective date period that is most commonly used in documents. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from documents", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates EXCEPT SELECT Date_Effective_From ,  Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "question": "Show all effective date from and to that are not used by any document.", "context": "Show all effective date from and to that are not used by any document. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates except select date_effective_from, date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_to, date_effective_to from templates where template_id not in (select template_id from documents)", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates EXCEPT SELECT Date_Effective_From ,  Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "question": "What are the effective date from and to that are not used for any document?", "context": "What are the effective date from and to that are not used for any document? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates except select date_effective_from, date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 450, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select t2.date_effective_to from documents as t1 join templates as t2 on t1.document_id = t2.document_id", "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "question": "What is the effective date range of the template used by document with the name \"Data base\"?", "context": "What is the effective date range of the template used by document with the name \"Data base\"? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Data base ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 464, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select t1.date_effective_to from templates as t1 join documents as t2 on t1.", "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "question": "Return the effective date range of the template that is used by a document named Data base.", "context": "Return the effective date range of the template that is used by a document named Data base. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Data base ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 464, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_from from templates where template_type_description like \"%presentation%\" ", "query": "SELECT T2.Date_Effective_From ,  T2.Date_Effective_To FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "question": "What are the effective date range from to with template type description \"Presentation\".", "context": "What are the effective date range from to with template type description \"Presentation\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Presentation ) | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t2.date_effective_from, t2.date_effective_to from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = \"Presentation\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 467, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select t1.date_effective_to from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code where t2.", "query": "SELECT T2.Date_Effective_From ,  T2.Date_Effective_To FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "question": "Return the effective date period corresponding to templates with the description 'Presentation'.", "context": "Return the effective date period corresponding to templates with the description 'Presentation'. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Presentation ) | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select t2.date_effective_from, t2.date_effective_to from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = \"Presentation\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 467, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates where template_type_code = \"CV\"", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"CV\"", "question": "Give me the effective date period whose template type code is CV?", "context": "Give me the effective date period whose template type code is CV? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( CV ) | templates : template_id, version_number, template_type_code ( CV ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates where template_type_code = \"CV\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 471, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates where template_type_code = \"CV\"", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"CV\"", "question": "Return the effective date period of the template type CV.", "context": "Return the effective date period of the template type CV. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( CV ) | templates : template_id, version_number, template_type_code ( CV ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates where template_type_code = \"CV\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 471, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates where template_type_code = 'PP' or template_type_code = 'PPT'", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "question": "What are the effective date range with template type code PP or PPT?", "context": "What are the effective date range with template type code PP or PPT? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT, PP ), template_type_description | templates : template_id, version_number, template_type_code ( PPT, PP ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 474, "description_length": 730}, {"prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates where template_type_code = 'PP' or template_type_code = 'PPT'", "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "question": "Return the effective date range that have the code PP or PPT.", "context": "Return the effective date range that have the code PP or PPT. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT, PP ), template_type_description | templates : template_id, version_number, template_type_code ( PPT, PP ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;", "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"", "db_id": "cre_Doc_Template_Mgt", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Ref_Template_Types", "Templates", "Documents", "Paragraphs"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "Template_Type_Code", "Template_Type_Description", "Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details", "Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details", "Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "db_foreign_keys": {"column_id": [5, 10, 15], "other_column_id": [1, 3, 9]}, "schema_length": 474, "description_length": 730}, {"prediction": "wta_1 | select first_name, birth_date from players where country_code = \"USA\"", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "question": "What are the first names and birth dates of American players?", "context": "What are the first names and birth dates of American players? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position", "label": "wta_1 | select first_name, birth_date from players where country_code = 'USA'", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 869}, {"prediction": "wta_1 | select t2.player_", "query": "SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "question": "Including winner and loser, Give me all player name of each matche in 2013 or 2016 year?", "context": "Including winner and loser, Give me all player name of each matche in 2013 or 2016 year? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which", "label": "wta_1 | select loser_name, winner_name from matches where year = 2013 or year = 2016", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 817}, {"prediction": "wta_1 | select first_name, country_code from players order by birth_date desc limit 1", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "question": "Find the first name and country code of the oldest player.", "context": "Find the first name and country code of the oldest player. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position", "label": "wta_1 | select first_name, country_code from players order by birth_date limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 869}, {"prediction": "wta_1 | select first_name, country_code from players order by birth_date desc limit 1", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "question": "What is the first name and country code of the oldest player?", "context": "What is the first name and country code of the oldest player? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is", "label": "wta_1 | select first_name, country_code from players order by birth_date limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 860}, {"prediction": "wta_1 | select first_name, last_name from players order by birth_date desc", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "question": "What are the full names of all players, sorted from oldest to youngest?", "context": "What are the full names of all players, sorted from oldest to youngest? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings", "label": "wta_1 | select first_name, last_name from players order by birth_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 848}, {"prediction": "wta_1 | select year from matches group by year order by count(*) desc limit 1", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "question": "Find the year that has the most number of matches.", "context": "Find the year that has the most number of matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position ", "label": "wta_1 | select year from matches group by year order by count(*) desc limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 870}, {"prediction": "wta_1 | select year from matches group by year order by count(*) desc limit 1", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "question": "Which year had the most matches?", "context": "Which year had the most matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in the player", "label": "wta_1 | select year from matches group by year order by count(*) desc limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 892}, {"prediction": "wta_1 | select count(*), year from matches group by year", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "question": "Find the number of matches happened in each year.", "context": "Find the number of matches happened in each year. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied", "label": "wta_1 | select count(*), year from matches group by year", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 878}, {"prediction": "wta_1 | select year, count(*) from matches group by year", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "question": "How many matches were played in each year?", "context": "How many matches were played in each year? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in", "label": "wta_1 | select count(*), year from matches group by year", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 881}, {"prediction": "wta_1 | select winner_name, winner_rank from matches order by winner_age asc limit 3", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "question": "Find the name and rank of the 3 youngest winners across all matches.", "context": "Find the name and rank of the 3 youngest winners across all matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking", "label": "wta_1 | select distinct winner_name, winner_rank from matches order by winner_age limit 3", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 857}, {"prediction": "wta_1 | select winner_name, winner_rank from matches order by winner_age asc limit 3", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "question": "What are the names and ranks of the three youngest winners across all matches?", "context": "What are the names and ranks of the three youngest winners across all matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings:", "label": "wta_1 | select distinct winner_name, winner_rank from matches order by winner_age limit 3", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 849}, {"prediction": "wta_1 | select first_name, birth_date from players where country_code = \"USA\"", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "question": "List the first name and birth date of all American players.", "context": "List the first name and birth date of all American players. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings", "label": "wta_1 | select first_name, birth_date from players where country_code = 'USA'", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 612, "description_length": 848}, {"prediction": "wta_1 | select sum(t1.tours), t2.rank", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "question": "Find the total number of tours for each ranking date.", "context": "Find the total number of tours for each ranking date. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings:", "label": "wta_1 | select sum(tours), ranking_date from rankings group by ranking_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 612, "description_length": 849}, {"prediction": "wta_1 | select count(*), sum(t1.tours) from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.ranking_date", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "question": "How many total tours were there for each ranking date?", "context": "How many total tours were there for each ranking date? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings:", "label": "wta_1 | select sum(tours), ranking_date from rankings group by ranking_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 612, "description_length": 849}, {"prediction": "wta_1 | select t2.winner_name, t2.birth_date from matches as t1 join players as t2", "query": "SELECT T1.first_name , T1.last_name ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "question": "Find the name and birth date of the winner who has the highest rank points in all matches.", "context": "Find the name and birth date of the winner who has the highest rank points in all matches. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in", "label": "wta_1 | select t1.first_name, t1.last_name, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 612, "description_length": 811}, {"prediction": "wta_1 | select t1.first_name, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id group by t2.winner_id order by count(*) desc limit 1", "query": "SELECT T1.first_name , T1.last_name  ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "question": "What is the name and birth date of the player with the most winner rank points across all matches?", "context": "What is the name and birth date of the player with the most winner rank points across all matches? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year", "label": "wta_1 | select t1.first_name, t1.last_name, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 612, "description_length": 808}, {"prediction": "wta_1 | select t1.first_name, t1.last_name from players as t1 join matches as t2 on t1.player_id = t2.loser_id where t1.hand = 'L' order by t1.birth_date desc", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "question": "List the first and last name of all players who are left / L hand in the order of their date of birth from the oldest to the youngest.", "context": "List the first and last name of all players who are left / L hand in the order of their date of birth from the oldest to the youngest. | wta_1 | players : player_id, first_name, last_name ( Last, Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of", "label": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 618, "description_length": 762}, {"prediction": "wta_1 | select first_name, last_name from players order by birth_date", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "question": "List the first and last name of all players order of their birth date from old to young.", "context": "List the first and last name of all players order of their birth date from old to young. | wta_1 | players : player_id, first_name, last_name ( Last, Young ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is", "label": "wta_1 | select first_name, last_name from players order by birth_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 619, "description_length": 799}, {"prediction": "wta_1 | select hand from players where birth_date like '%jung%' order by birth_date", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date desc", "question": "What are the name of all left handed players, in order of date of birth from the young to the old?", "context": "What are the name of all left handed players, in order of date of birth from the young to the old? | wta_1 | players : player_id, first_name, last_name ( Young, Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a", "label": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date desc", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 619, "description_length": 784}, {"prediction": "dog_kennels | select t1.date_of_treatment, t1.name from treatment_types as t2 join professionals as t3 on t1.professional_id = t2.prof", "query": "SELECT T1.date_of_treatment ,  T2.first_name , T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "question": "List the date of each treatment, together with the name of the professional who operated it.", "context": "List the date of each treatment, together with the name of the professional who operated it. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the", "label": "dog_kennels | select t1.date_of_treatment, t2.first_name, t2.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 689}, {"prediction": "dog_kennels | select t2.date_of_treatment, t1.first_name, t1.last_name from treatments as t1", "query": "SELECT T1.date_of_treatment ,  T2.first_name , T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "question": "What are the date and the operating professional's name of each treatment?", "context": "What are the date and the operating professional's name of each treatment? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival", "label": "dog_kennels | select t1.date_of_treatment, t2.first_name, t2.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 705}, {"prediction": "dog_kennels | select date_arrived, date_departed from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id", "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "question": "What is the treatment date from dog arriving to departing?", "context": "What is the treatment date from dog arriving to departing? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog", "label": "dog_kennels | select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 716}, {"prediction": "dog_kennels | select date_of_treatment from treatments where date_departed >= '2004-04-19 15:06:20' and date_arrived < '2016-03-15 00:33:18", "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "question": "Find the dog treatment period from arriving to departing date.", "context": "Find the dog treatment period from arriving to departing date. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog", "label": "dog_kennels | select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 716}, {"prediction": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t2.date_of_birth desc limit 1", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "question": "List the last name of the owner owning the youngest dog.", "context": "List the last name of the owner owning the youngest dog. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the", "label": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.age = ( select max(age) from dogs )", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 712}, {"prediction": "dog_kennels | select t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id order by t1.age limit 1", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "question": "Who owns the youngest dog? Give me his or her last name.", "context": "Who owns the youngest dog? Give me his or her last name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival", "label": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.age = ( select max(age) from dogs )", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 705}, {"prediction": "dog_kennels | select date_arrived, date_adopted from dogs where abandoned_yn = '1'", "query": "SELECT date_arrived ,  date_departed FROM Dogs where abandoned_yn = 1", "question": "What are the arriving date and the departing date of all the abandoned dogs?", "context": "What are the arriving date and the departing date of all the abandoned dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of", "label": "dog_kennels | select date_arrived, date_departed from dogs where abandoned_yn = 1", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 697}, {"prediction": "dog_kennels | select date_arrived, date_adopted from dogs where abandoned_yn = '1'", "query": "SELECT date_arrived ,  date_departed FROM Dogs where abandoned_yn = 1", "question": "List the arrival date and the departure date for all the abandoned dogs.", "context": "List the arrival date and the departure date for all the abandoned dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of", "label": "dog_kennels | select date_arrived, date_departed from dogs where abandoned_yn = 1", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 708}, {"prediction": "dog_kennels | select max(cost_of_treatment) from treatments", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "question": "How much does the most recent treatment cost?", "context": "How much does the most recent treatment cost? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ", "label": "dog_kennels | select cost_of_treatment from treatments order by date_of_treatment desc limit 1", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 724}, {"prediction": "dog_kennels | select age from dogs order by age desc limit 1", "query": "SELECT max(age) FROM Dogs", "question": "What is the age of the oldest dog?", "context": "What is the age of the oldest dog? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ", "label": "dog_kennels | select max(age) from dogs", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 724}, {"prediction": "dog_kennels | select age from dogs order by age desc limit 1", "query": "SELECT max(age) FROM Dogs", "question": "Tell me the age of the oldest dog.", "context": "Tell me the age of the oldest dog. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ", "label": "dog_kennels | select max(age) from dogs", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/612726cd4aed7f2adb6fb91745f83b0a1832d1ca9d308c95f8c0c17c69b4173c/dk-spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 724}]