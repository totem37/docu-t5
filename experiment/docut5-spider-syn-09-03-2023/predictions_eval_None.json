[
    {
        "prediction": "concert_singer | select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many vocalists do we have?",
        "context": "How many vocalists do we have? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select count(*) from singer",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the total number of musicians?",
        "context": "What is the total number of musicians? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select count(*) from singer",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name from singer order by age desc",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "Show name, nationality, age for all vocalists ordered by age from the oldest to the youngest.",
        "context": "Show name, nationality, age for all vocalists ordered by age from the oldest to the youngest. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select name, country, age from singer order by age desc",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name, country, age from singer order by age desc",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "What are the names, nationalities, and ages for every musicians in descending order of age?",
        "context": "What are the names, nationalities, and ages for every musicians in descending order of age? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select name, country, age from singer order by age desc",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select avg(age), min(age), max(age) from singer where country = 'France'",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age of all vocalists from France?",
        "context": "What is the average, minimum, and maximum age of all vocalists from France? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country ( France ), song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select avg(age), min(age), max(age) from singer where country = 'France'",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select avg(age), min(age), max(age) from singer where country = 'F'",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age for all French musicians?",
        "context": "What is the average, minimum, and maximum age for all French musicians? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select avg(age), min(age), max(age) from singer where country = 'France'",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select song_name, song_release_year from singer order by age limit 1",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "Show the name and the publish year of the song by the youngest vocalists.",
        "context": "Show the name and the publish year of the song by the youngest vocalists. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select song_name, song_release_year from singer order by age limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select song_name, song_release_year from singer order by age limit 1",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "What are the names and publish years for all the songs of the youngest musicians?",
        "context": "What are the names and publish years for all the songs of the youngest musicians? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select song_name, song_release_year from singer order by age limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select distinct country from singer where age > 20",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are all distinct nationalities where vocalists above age 20 are from?",
        "context": "What are all distinct nationalities where vocalists above age 20 are from? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select distinct country from singer where age > 20",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select distinct country from singer where age > 20",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are the different nationalities with musicians above age 20?",
        "context": "What are the different nationalities with musicians above age 20? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select distinct country from singer where age > 20",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select country, count(*) from singer group by country",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "Show all State and the number of vocalists in each country.",
        "context": "Show all State and the number of vocalists in each country. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select country, count(*) from singer group by country",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "How many musicians are from each State?",
        "context": "How many musicians are from each State? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select country, count(*) from singer group by country",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select song_name from singer where age > (select avg(age) from singer)",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "List all music titles by vocalists above the average age.",
        "context": "List all music titles by vocalists above the average age. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select song_name from singer where age > (select avg(age) from singer)",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.song_name from concert as t1 join singer as t2 on",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "What are all the music titles by musicians who are older than average?",
        "context": "What are all the music titles by musicians who are older than average? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select song_name from singer where age > (select avg(age) from singer)",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select location, name from stadium where capacity between 5000 and 10000",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "Show position and name for all stadiums with number of seats between 5000 and 10000.",
        "context": "Show position and name for all stadiums with number of seats between 5000 and 10000. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select location, name from stadium where capacity between 5000 and 10000",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select location, name from stadium where capacity between 5000 and 10000",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "What are the addresses and names of all stations with number of seats between 5000 and 10000?",
        "context": "What are the addresses and names of all stations with number of seats between 5000 and 10000? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select location, name from stadium where capacity between 5000 and 10000",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select avg(capacity), max(capacity) from stadium",
        "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
        "question": "What is the average and the maximum seats of all stadiums?",
        "context": "What is the average and the maximum seats of all stadiums? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select avg(capacity), max(capacity) from stadium",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select avg(capacity), max(capacity) from stadium",
        "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
        "question": "What is the average and maximum seats for all stations?",
        "context": "What is the average and maximum seats for all stations? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select avg(capacity), max(capacity) from stadium",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, t2.s",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and number of seats for the stadium with highest average attendance?",
        "context": "What is the name and number of seats for the stadium with highest average attendance? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select name, capacity from stadium order by average desc limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, t2.s",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and number of seats for the stadium with the highest average attendance?",
        "context": "What is the name and number of seats for the stadium with the highest average attendance? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select name, capacity from stadium order by average desc limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select count(*) from concert where year = 2014 or year = 2015",
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many shows are there in year 2014 or 2015?",
        "context": "How many shows are there in year 2014 or 2015? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select count(*) from concert where year = 2014 or year = 2015",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select count(*) from concert where year = 2014 or year = 2015",
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many shows occurred in 2014 or 2015?",
        "context": "How many shows occurred in 2014 or 2015? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select count(*) from concert where year = 2014 or year = 2015",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "Show the stadium name and the number of shows in each stadium.",
        "context": "Show the stadium name and the number of shows in each stadium. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "For each stadium, how many shows play there?",
        "context": "For each stadium, how many shows play there? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name, max(t2.capacity) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t1.stadium_id",
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the stadium name and number of seats with most number of shows in year 2014 or after.",
        "context": "Show the stadium name and number of seats with most number of shows in year 2014 or after. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name, count(*) from stadium where capacity > 2013 group by name order by count(*) desc limit 1",
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name and number of seats of the stadium with the most shows after 2013?",
        "context": "What is the name and number of seats of the stadium with the most shows after 2013? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select year from concert group by year order by count(*) desc limit 1",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year has most number of shows?",
        "context": "Which year has most number of shows? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select year from concert group by year order by count(*) desc limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select year from concert group by year order by count(*) desc limit 1",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the time that had the most shows?",
        "context": "What is the time that had the most shows? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select year from concert group by year order by count(*) desc limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name from stadium where stadium_id not in (select stadium_id from concert)",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "Show the stadium names without any shows.",
        "context": "Show the stadium names without any shows. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select name from stadium where stadium_id not in (select stadium_id from concert)",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name from stadium where stadium_id not in (select stadium_id from concert)",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "What are the names of the stadiums without any shows?",
        "context": "What are the names of the stadiums without any shows? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select name from stadium where stadium_id not in (select stadium_id from concert)",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select country from singer where age > 40 or age < 30",
        "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "question": "Show States where a singer above age 40 and a singer below 30 are from.",
        "context": "Show States where a singer above age 40 and a singer below 30 are from. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select country from singer where age > 40 intersect select country from singer where age < 30",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014",
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "Show names for all stadiums except for stadiums having a shows in year 2014.",
        "context": "Show names for all stadiums except for stadiums having a shows in year 2014. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014",
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "What are the names of all stadiums that did not have a shows in 2014?",
        "context": "What are the names of all stadiums that did not have a shows in 2014? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.song_name, t1.theme, count(*) from concert as t1 join singer as t2 on t1",
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "question": "Show the name and theme for all shows and the number of vocalists in each shows.",
        "context": "Show the name and theme for all shows and the number of vocalists in each shows. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select t2.concert_name, t2.theme, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, t2.theme, count(*), t1.song_name from singer_in_concert as",
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "question": "What are the names, themes, and number of singers for each and every show?",
        "context": "What are the names, themes, and number of singers for each and every show? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select t2.concert_name, t2.theme, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, count(*) from singer_in_concert as t1 join concert as t2",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "List singer names and number of shows for each musicians.",
        "context": "List singer names and number of shows for each musicians. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select t2.name, count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.singer_id",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t1.name, count(*) from singer as t1 join singer_in_concert as t2 on t1.singer_id = t2.singer_id group by t1.song_name",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "What are the names of the singers and number of shows for each person?",
        "context": "What are the names of the singers and number of shows for each person? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select t2.name, count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.singer_id",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name from singer where song_release_year = 2014",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "List all vocalist names in shows in year 2014.",
        "context": "List all vocalist names in shows in year 2014. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year = 2014",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name from concert as t1 join singer_in_concert as t2",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "What are the names of the musicians who performed in a musical performance in 2014?",
        "context": "What are the names of the musicians who performed in a musical performance in 2014? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year = 2014",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name, country from singer where song_name like '%hey%'",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "what is the name and nation of the vocalist who have a song having 'Hey' in its title?",
        "context": "what is the name and nation of the vocalist who have a song having 'Hey' in its title? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select name, country from singer where song_name like '%hey%'",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.song_name, t2.country from concert as t1 join singer as t2 on t1.song_",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "What is the name and nationality of origin of every musicians who has a song with the word 'Hey' in its title?",
        "context": "What is the name and nationality of origin of every musicians who has a song with the word 'Hey' in its title? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select name, country from singer where song_name like '%hey%'",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015",
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "Find the name and position of the stadiums which some musical performances happened in the years of both 2014 and 2015.",
        "context": "Find the name and position of the stadiums which some musical performances happened in the years of both 2014 and 2015. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, t2.a",
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "What are the names and addresses of the stadiums that had musical performances that occurred in both 2014 and 2015?",
        "context": "What are the names and addresses of the stadiums that had musical performances that occurred in both 2014 and 2015? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id order by t2.capacity desc limit 1",
        "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1",
        "question": "Find the number of musical performances happened in the stadium with the highest number of seats.",
        "context": "Find the number of musical performances happened in the stadium with the highest number of seats. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id order by t2.capacity desc limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select count(*) from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t1.capacity = (select max(capacity) from stadium)",
        "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1",
        "question": "What are the number of musical performances that occurred in the stadium with the largest number of seats?",
        "context": "What are the number of musical performances that occurred in the stadium with the largest number of seats? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id, concert_name, theme, stadium_id, year | singer_in_concert : concert_id, singer_id | description | stadium: is a large usually roofless building with tiers of seats for spectators. location is the position or address of a stadium. name is the stadium name. capacity of a stadium is the maximum number of seats. highest is the highest or maximum number of spectators who were at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: vocalist or musician who sings, especially professionally. country is the nationality or State of a singer. song_name is title song. song_release_year is publish year of a song. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a show or musical performance; singer_in_concert: singers who performed in a concert. year is the time of singer performance in a concert;",
        "label": "concert_singer | select count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id order by t2.capacity desc limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*) from pets where weight > 10",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "Find the number of animals who is heavier than 10.",
        "context": "Find the number of animals who is heavier than 10. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select count(*) from pets where weight > 10",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*) from pets where weight > 10",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "How many animals heavier than 10?",
        "context": "How many animals heavier than 10? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select count(*) from pets where weight > 10",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.weight from pets as t1 join has_pet as t2 on t1.petid = t2.petid order by t2.p",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the weight of the youngest puppy.",
        "context": "Find the weight of the youngest puppy. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select weight from pets order by pet_age limit 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select weight from pets order by weight asc limit 1",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "How much does the youngest puppy weigh?",
        "context": "How much does the youngest puppy weigh? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select weight from pets order by pet_age limit 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select max(weight), pettype from pets group by pettype",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "Find the maximum weight for each category of pet. List the maximum weight and pet category.",
        "context": "Find the maximum weight for each category of pet. List the maximum weight and pet category. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select max(weight), pettype from pets group by pettype",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select max(weight), pettype from pets group by pettype",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "List the maximum weight and category for each species of domestic animals.",
        "context": "List the maximum weight and category for each species of domestic animals. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select max(weight), pettype from pets group by pettype",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid join student as t3 on t2.stuid = t3.stuid where t3.age > 20;",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "Find number of animals owned by students who are older than 20.",
        "context": "Find number of animals owned by students who are older than 20. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.age > 20",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid join student as t3 on t2.stuid = t3.stuid where t3.age > 20;",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "How many animals are owned by students that have an age greater than 20?",
        "context": "How many animals are owned by students that have an age greater than 20? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.age > 20",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid join student as t3 on t2.stuid = t3.stuid where t3.sex = \"F\"",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "Find the number of puppies that are raised by female students (with gender F).",
        "context": "Find the number of puppies that are raised by female students (with gender F). | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t1.sex = 'F' and t3.pettype = 'dog'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*) from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t3.stuid = t1.stuid where t3.sex = \"F\"",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "How many puppies are raised by female students?",
        "context": "How many puppies are raised by female students? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t1.sex = 'F' and t3.pettype = 'dog'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(distinct pettype) from pets",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "Find the number of distinct species of domestic animals.",
        "context": "Find the number of distinct species of domestic animals. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select count(distinct pettype) from pets",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(distinct pettype) from pets",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "How many different species of animals are there?",
        "context": "How many different species of animals are there? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select count(distinct pettype) from pets",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pet",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "Find the given name of students who have kitten or puppy pet.",
        "context": "Find the given name of students who have kitten or puppy pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' or t3.pettype = 'dog'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pet",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "What are the given names of every student who has a kitten or puppy as a pet?",
        "context": "What are the given names of every student who has a kitten or puppy as a pet? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' or t3.pettype = 'dog'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.fname, t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = 'kitties' intersect select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t3.pettype = 'Poot",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "question": "Find the name of students who have both kitten and puppy pets.",
        "context": "Find the name of students who have both kitten and puppy pets. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pet",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "question": "What are the students' given names who have both kittens and puppies as pets?",
        "context": "What are the students' given names who have both kittens and puppies as pets? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select major, age from student where stuid not in (select stuid from has_pet)",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the major and age of students who do not have a kitten pet.",
        "context": "Find the major and age of students who do not have a kitten pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t2.stuid, t2.age from has_pet as t1 join student as t2 on t1.stuid = t2.stuid where t1.pettype",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What discipline is every student who does not own a kitten as a pet, and also how old are they?",
        "context": "What discipline is every student who does not own a kitten as a pet, and also how old are they? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select stuid from student except select stuid from has_pet",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "Find the id of students who do not have a kitten pet.",
        "context": "Find the id of students who do not have a kitten pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select stuid from student except select stuid from has_pet",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "What are the ids of the students who do not own kittens as pets?",
        "context": "What are the ids of the students who do not own kittens as pets? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select fname, age from student where stuid in (select t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = 'cat')",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the given name and age of students who have a puppy but do not have a cat as a pet.",
        "context": "Find the given name and age of students who have a puppy but do not have a cat as a pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype ( cat ), pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pettype",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What is the given name of every student who has a dog but does not have a kitten?",
        "context": "What is the given name of every student who has a dog but does not have a kitten? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype ( dog ), pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select distinct t1.pettype, t1.weight from pets as t1 join has_pet as t2 on t1.petid = t2.petid order by t1.weight asc limit 1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the category and weight of the youngest pet.",
        "context": "Find the category and weight of the youngest pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select pettype, weight from pets order by pet_age limit 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.pettype, t1.weight from pets as t1 join has_pet as t2 on t1.petid = t2.petid order by t1.weight asc limit 1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "What species of animal is the youngest animal, and how much does it weigh?",
        "context": "What species of animal is the youngest animal, and how much does it weigh? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select pettype, weight from pets order by pet_age limit 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select petid, weight from pets where pet_age > 1",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "Find the id and weight of all animals whose age is older than 1.",
        "context": "Find the id and weight of all animals whose age is older than 1. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select petid, weight from pets where pet_age > 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select petid, weight from pets where pet_age > 1",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "What is the id and weight of every animals who is older than 1?",
        "context": "What is the id and weight of every animals who is older than 1? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select petid, weight from pets where pet_age > 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select avg(t1.age), max(t1.age), t1.sex from pets as t1",
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average and maximum age for each species of animal.",
        "context": "Find the average and maximum age for each species of animal. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select avg(pet_age), max(pet_age), pettype from pets group by pettype",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select avg(t1.age), max(t1.age), t2.stuid from has_pet",
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average and maximum age for each pet species?",
        "context": "What is the average and maximum age for each pet species? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select avg(pet_age), max(pet_age), pettype from pets group by pettype",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select avg(weight), pettype from pets group by pettype",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average weight for each pet category.",
        "context": "Find the average weight for each pet category. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select avg(weight), pettype from pets group by pettype",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select pettype, avg(weight) from pets group by pettype",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average weight for each species of pet?",
        "context": "What is the average weight for each species of pet? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select avg(weight), pettype from pets group by pettype",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select distinct t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.p",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "Find the given name and age of students who have a pet.",
        "context": "Find the given name and age of students who have a pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select distinct t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select distinct t3.fname, t3.age from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t1.stuid = t3.stuid where t2.pet_age = 'T'",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "What are the different given names and ages of the students who do have pets?",
        "context": "What are the different given names and ages of the students who do have pets? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select distinct t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid join has_pet as t3 on t3.petid = t2.petid join student as t4 on t4.stuid = t1.stuid",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "Find the id of the animals owned by student whose family name is 'Smith'.",
        "context": "Find the id of the animals owned by student whose family name is 'Smith'. | pets_1 | student : stuid, lname ( Smith ), fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select t2.petid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.lname = 'Smith'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select stuid from has_pet join pets as t1 on t1.petid = t2.petid join has_pet as t2 on t1.petid = t2.petid join student as t3 on t3.stuid = t1.stuid",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "What is the id of the animals owned by the student whose family name is 'Smith'?",
        "context": "What is the id of the animals owned by the student whose family name is 'Smith'? | pets_1 | student : stuid, lname ( Smith ), fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select t2.petid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.lname = 'Smith'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*), t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid group by t1.stuid",
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "Find the number of animals for each student who has any pet and student id.",
        "context": "Find the number of animals for each student who has any pet and student id. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select count(*), t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*), t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid group by t1.stuid",
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "For students who have pets, how many animals does each student have?",
        "context": "For students who have pets, how many animals does each student have? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select count(*), t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "Find the given name and gender of student who have more than one pet.",
        "context": "Find the given name and gender of student who have more than one pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t2.fname, t2.sex from has_pet as t1 join student as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "What is the given name and gender of the all the students who have more than one pet?",
        "context": "What is the given name and gender of the all the students who have more than one pet? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pet_",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "Find the family name of the student who has a kitten that is age 3.",
        "context": "Find the family name of the student who has a kitten that is age 3. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pet_age = 3 and t3.pettype = 'cat'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pet_",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "What is the family name of the student who has a kitten that is 3 years old?",
        "context": "What is the family name of the student who has a kitten that is 3 years old? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pet_age = 3 and t3.pettype = 'cat'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select avg(age) from student where stuid not in (select t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid)",
        "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
        "question": "Find the average age of students who do not have any pet.",
        "context": "Find the average age of students who do not have any pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select avg(age) from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid)",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select avg(age) from student where stuid not in (select t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid)",
        "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
        "question": "What is the average age for all students who do not own any pets?",
        "context": "What is the average age for all students who do not own any pets? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid, petid | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the given name. sex is gemder and may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: all students who have pets are registered; pets: domestic animals kept. pettype can be 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;",
        "label": "pets_1 | select avg(age) from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid)",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from continents",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "How many continents are there?",
        "context": "How many continents are there? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from continents;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from continents",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "What is the number of continents?",
        "context": "What is the number of continents? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from continents;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select continent, continent, count(*) from countries group by continent",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "How many States does each continent have? List the continent id, continent name and the number of nations.",
        "context": "How many States does each continent have? List the continent id, continent name and the number of nations. | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.contid, t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent group by t1.contid;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select continent, countryname, count(*) from countries group by continent",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "For each continent, list its id, name, and how many States it has?",
        "context": "For each continent, list its id, name, and how many States it has? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.contid, t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent group by t1.contid;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(distinct continent) from countries",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many States are listed?",
        "context": "How many States are listed? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from countries;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(distinct countryid) from countries",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries exist?",
        "context": "How many countries exist? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from countries;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.maker, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.modelid group by t1.id",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "How many models does each car manufacturer produce? List manufacturer full name, id and the number.",
        "context": "How many models does each car manufacturer produce? List manufacturer full name, id and the number. | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.fullname, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.fullname, t1.id, count(*) from car_makers as t1 join model_list as t2 on t2.modelid = t1.id group by t1.id",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "What is the full name of each car manufacturer, along with its id and how many models it produces?",
        "context": "What is the full name of each car manufacturer, along with its id and how many models it produces? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.fullname, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.model from model_list as t1 join car_makers as t2 on t1.modelid = t2.id where t2.",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "Which model of the vehicle has the minimum horsepower?",
        "context": "Which model of the vehicle has the minimum horsepower? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.model from model_list as t1 join cars_data as t2 on t1.model = t2.id order by t2.",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "What is the model of the vehicle with the smallest amount of power?",
        "context": "What is the model of the vehicle with the smallest amount of power? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.model from model_list as t1 join cars_data as t2 on t1.model = t2.id where t2.weight < (select avg(weight) from cars_data)",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "Find the model of the vehicle who is lighter than the average.",
        "context": "Find the model of the vehicle who is lighter than the average. | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.weight < (select avg(weight) from cars_data)",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select model from car_names where weight < (select avg(weight) from cars_data group by modelid",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "What is the model for the vehicle with a weight smaller than the average?",
        "context": "What is the model for the vehicle with a weight smaller than the average? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.weight < (select avg(weight) from cars_data)",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t3.maker from model_list as t1 join car_makers as t2 on t1.maker = t2.id join car_makers as t3 group by t3.maker having count(*) >= 1970",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "Find the name of the manufacturer that produced some vehicles in the year of 1970?",
        "context": "Find the name of the manufacturer that produced some vehicles in the year of 1970? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model join cars_data as t4 on t3.makeid = t4.id where t4.year = '1970';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.modelid where t2.model = 1970",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "What is the name of the different car manufacturers who produced a vehicle in 1970?",
        "context": "What is the name of the different car manufacturers who produced a vehicle in 1970? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model join cars_data as t4 on t3.makeid = t4.id where t4.year = '1970';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.make,",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "Find the make and production time of the vehicles that were produced in the earliest year?",
        "context": "Find the make and production time of the vehicles that were produced in the earliest year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t2.make, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data);",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.maker, t2.year from car_makers as t1 join cars_data as t2 on",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "What is the manufacturer of the vehicle produced in the earliest year and what year was it?",
        "context": "What is the manufacturer of the vehicle produced in the earliest year and what year was it? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t2.make, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data);",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct model from model_list except select distinct model from car_makers",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "Which distinct vehicle models are the produced after 1980?",
        "context": "Which distinct vehicle models are the produced after 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year > 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct t1.model from model_list as t1 join cars_data as t2 on t1.modelid = t2.id where t2.year > 1980",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "What are the different models for the vehicles produced after 1980?",
        "context": "What are the different models for the vehicles produced after 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year > 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*), continent from continents group by continent",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "How many car manufacturers are there in each continents? List the continent name and the count.",
        "context": "How many car manufacturers are there in each continents? List the continent name and the count. | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent join car_makers as t3 on t2.countryid = t3.country group by t1.continent;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.continent, count(*) from continents as t1 join car_makers as t2 on t1.con",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "What is the name of each continent and how many vehicle manufacturers are there in each one?",
        "context": "What is the name of each continent and how many vehicle manufacturers are there in each one? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent join car_makers as t3 on t2.countryid = t3.country group by t1.continent;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid order by count(*) desc limit 1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "Which of the States has the most car manufacturers? List the State name.",
        "context": "Which of the States has the most car manufacturers? List the State name. | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t2.countryname from car_makers as t1 join countries as t2 on t1.country = t2.countryid group by t1.country order by count(*) desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select country from car_makers group by country",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "What is the name of the State with the most vehicle manufacturers?",
        "context": "What is the name of the State with the most vehicle manufacturers? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t2.countryname from car_makers as t1 join countries as t2 on t1.country = t2.countryid group by t1.country order by count(*) desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*), t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id",
        "query": "SELECT Count(*) ,  T2.FullName  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "question": "How many vehicle models are produced by each manufacturer? List the count and the manufacturer full name.",
        "context": "How many vehicle models are produced by each manufacturer? List the count and the manufacturer full name. | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*), t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.id, t1.fullname from car_makers as t1 join model_list as t2 on t1.id = t2.modelid group by t1.id",
        "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "question": "What is the number of vehicle models that are produced by each manufacturer and what is the id and full name of each manufacturer?",
        "context": "What is the number of vehicle models that are produced by each manufacturer and what is the id and full name of each manufacturer? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*), t2.fullname, t2.id from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select accelerate from car_names as t1 join model_list as t2 on t1.model",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "What is the accelerate of the vehicle make amc hornet sportabout (sw)?",
        "context": "What is the accelerate of the vehicle make amc hornet sportabout (sw)? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker ( amc ), fullname, country | model_list : modelid, maker, model ( amc ) | car_names : makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.make = 'amc hornet sportabout (sw)';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select sum(t2.ac",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "How much does the vehicle accelerate that makes out amc hornet sportabout (sw)?",
        "context": "How much does the vehicle accelerate that makes out amc hornet sportabout (sw)? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker ( amc ), fullname, country | model_list : modelid, maker, model ( amc ) | car_names : makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.make = 'amc hornet sportabout (sw)';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers where country = \"France\"",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "question": "How many French car manufacturers are there?",
        "context": "How many French car manufacturers are there? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.countryname = 'france';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(distinct countryid) from countries where countryname = \"France\"",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "question": "What is the number of manufacturers of vehicle in France?",
        "context": "What is the number of manufacturers of vehicle in France? | car_1 | continents : contid, continent | countries : countryid, countryname ( france ), continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.countryname = 'france';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(distinct t1.model) from model_list as t1 join countries as t2 on",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "How many vehicle models are produced in the usa?",
        "context": "How many vehicle models are produced in the usa? | car_1 | continents : contid, continent | countries : countryid, countryname ( usa ), continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from model_list as t1 join car_makers as t2 on t1.maker = t2.id join countries as t3 on t2.country = t3.countryid where t3.countryname = 'usa';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers where country = \"United States\"",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "What is the count of the vehicle models produced in the United States?",
        "context": "What is the count of the vehicle models produced in the United States? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from model_list as t1 join car_makers as t2 on t1.maker = t2.id join countries as t3 on t2.country = t3.countryid where t3.countryname = 'usa';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(m",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "context": "What is the average miles per gallon(mpg) of the cars with 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select avg(mpg) from cars_data where cylinders = 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.id, avg(t2.",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders?",
        "context": "What is the average miles per gallon of all the cars with 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select avg(mpg) from cars_data where cylinders = 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select min(weight) from cars_data where year = 1974 and cylinders = 8",
        "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
        "context": "What is the smallest weight of the car produced with 8 cylinders on 1974? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select weight from cars_data where cylinders = 8 and year = 1974 order by weight asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select min(weight) from cars_data where year = 1974",
        "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
        "question": "What is the minimu weight of the car with 8 cylinders produced in 1974?",
        "context": "What is the minimu weight of the car with 8 cylinders produced in 1974? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select weight from cars_data where cylinders = 8 and year = 1974 order by weight asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are all the companies and models?",
        "context": "What are all the companies and models? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select maker, model from model_list;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select maker, model from model_list",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are the manufacturers and models?",
        "context": "What are the manufacturers and models? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select maker, model from model_list;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t2.country, t1.id from car_makers as t1 join",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the States having at least one vehicle manufacturer? List name and id.",
        "context": "What are the States having at least one vehicle manufacturer? List name and id. | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.countryname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t2.countryname, t1.id from car_makers as t1 join countries as t2 on t1.country = t2.countryid group by t2.countryid having count(*) >= 1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the names and ids of all States with at least one vehicle manufacturer?",
        "context": "What are the names and ids of all States with at least one vehicle manufacturer? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.countryname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where horsepower > 150",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of the vehicle with power more than 150?",
        "context": "What is the number of the vehicle with power more than 150? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from cars_data where horsepower > 150;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where horsepower > 150",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of vehicles with a power greater than 150?",
        "context": "What is the number of vehicles with a power greater than 150? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from cars_data where horsepower > 150;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(weight), year from cars_data group by year",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight of vehicles each year?",
        "context": "What is the average weight of vehicles each year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select avg(weight), year from cars_data group by year;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(weight), year from cars_data group by year",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight and year for each year?",
        "context": "What is the average weight and year for each year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select avg(weight), year from cars_data group by year;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select continent from continents where continent = \"europe\" group by continent having count(*) >= 3",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "Which States in europe have at least 3 vehicle manufacturers?",
        "context": "Which States in europe have at least 3 vehicle manufacturers? | car_1 | continents : contid, continent ( europe ) | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.countryname from countries as t1 join continents as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.countryname having count(*) >= 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select continent from continents where continent = \"europe\" group by continent having count(*) >= 3",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "What are the names of all European States with at least 3 manufacturers?",
        "context": "What are the names of all European States with at least 3 manufacturers? | car_1 | continents : contid, continent ( europe ) | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.countryname from countries as t1 join continents as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.countryname having count(*) >= 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the maximum power and the manufacturer of the vehicle models with 3 cylinders?",
        "context": "What is the maximum power and the manufacturer of the vehicle models with 3 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t2.horsepower, t1.make from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.modelid where t2.cylinders",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the largest amount of power for the models with 3 cylinders and what manufacturer is it?",
        "context": "What is the largest amount of power for the models with 3 cylinders and what manufacturer is it? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t2.horsepower, t1.make from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select model from car_names where mpg = (select mpg from cars_data group by mpg",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "context": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon. | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.model from model_list as t1 join cars_data as t2 on t1.model = t2.id order by t2.mpg desc limit 1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "What is the automobile model with the highest mpg?",
        "context": "What is the automobile model with the highest mpg? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(",
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "question": "What is the average power of the automobile before 1980?",
        "context": "What is the average power of the automobile before 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select avg(horsepower) from cars_data where year < 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.id from car_makers as t1 join cars_data as t2 on t1.id = t2.c",
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "question": "What is the average power for all automobiles produced before 1980?",
        "context": "What is the average power for all automobiles produced before 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select avg(horsepower) from cars_data where year < 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(t2.edispl) from model_list as t1 join cars_data as t2 on t1.modelid = t2.id where t1.model = \"volvo\"",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl of the automobile of model volvo?",
        "context": "What is the average edispl of the automobile of model volvo? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker ( volvo ), fullname ( Volvo ), country | model_list : modelid, maker, model ( volvo ) | car_names : makeid, model ( volvo ), make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(edispl), t1.maker from model_list as t1 join car_names as t2 on t1.modelid = t2.id",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl for all volvos?",
        "context": "What is the average edispl for all volvos? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker ( volvo ), fullname ( Volvo ), country | model_list : modelid, maker, model ( volvo ) | car_names : makeid, model ( volvo ), make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(accelerate), cylinders from cars_data group by cylinders",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "context": "What is the maximum accelerate for different number of cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select max(accelerate), cylinders from cars_data group by cylinders;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(accelerate), cylinders from cars_data group by cylinders",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "context": "What is the maximum accelerate for all the different cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select max(accelerate), cylinders from cars_data group by cylinders;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select model from car_names group by model order by count(*) desc limit 1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which model has the most version(make) of automobiles?",
        "context": "Which model has the most version(make) of automobiles? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select model from car_names group by model order by count(*) desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select model from model_list group by model order by count(*) desc limit 1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "What model has the most different versions?",
        "context": "What model has the most different versions? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select model from car_names group by model order by count(*) desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where cylinders > 4",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "How many vehicles have more than 4 cylinders?",
        "context": "How many vehicles have more than 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from cars_data where cylinders > 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where cylinders > 4",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "What is the number of vehicles with more than 4 cylinders?",
        "context": "What is the number of vehicles with more than 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from cars_data where cylinders > 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(distinct id) from cars_data where year = 1980",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "how many automobiles were produced in 1980?",
        "context": "how many automobiles were produced in 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from cars_data where year = 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers where maker = \"80%\"",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "In 1980, how many automobiles were made?",
        "context": "In 1980, how many automobiles were made? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from cars_data where year = 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers where fullname = \"American Motor Company\"",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "How many automobile models were produced by the manufacturer with full name American Motor Company?",
        "context": "How many automobile models were produced by the manufacturer with full name American Motor Company? | car_1 | continents : contid, continent ( america ) | countries : countryid, countryname, continent | car_makers : id, maker, fullname ( American Motor Company ), country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American motor Company';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers where maker = \"American Motor Company\"",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "What is the number of automobile models created by the car manufacturer American Motor Company?",
        "context": "What is the number of automobile models created by the car manufacturer American Motor Company? | car_1 | continents : contid, continent ( america ) | countries : countryid, countryname, continent | car_makers : id, maker, fullname ( American Motor Company ), country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American motor Company';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.fullname, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.modelid group by t1.id having count(*) > 3",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which manufacturers designed more than 3 vehicle models? List full name and the id.",
        "context": "Which manufacturers designed more than 3 vehicle models? List full name and the id. | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.fullname, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) > 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.maker, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) > 3",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the names and ids of all manufacturers with more than 3 models?",
        "context": "What are the names and ids of all manufacturers with more than 3 models? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.fullname, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) > 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "Which distinctive types are produced by manufacturer with the full name General Motors or weighing more than 3500?",
        "context": "Which distinctive types are produced by manufacturer with the full name General Motors or weighing more than 3500? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname ( General Motors ), country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select distinct t2.model from car_names as t1 join model_list as t2 on t1.model = t2.model join car_makers as t3 on t2.maker = t3.id join cars_data as t4 on t1.makeid = t4.id where t3.fullname = 'General Motors' or t4.weight > 3500;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct t1.model from model_list as t1 join car_makers as t2 on t1.maker = t2.id where t2.fullname = \"General Motors\" union select distinct t1.model from model_list as t1 join cars_data as t2 on t1.model = t2.id where t2.weight > 3500",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "What are the different models created by either the car manufacturer General Motors or weighed more than 3500?",
        "context": "What are the different models created by either the car manufacturer General Motors or weighed more than 3500? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname ( General Motors ), country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select distinct t2.model from car_names as t1 join model_list as t2 on t1.model = t2.model join car_makers as t3 on t2.maker = t3.id join cars_data as t4 on t1.makeid = t4.id where t3.fullname = 'General Motors' or t4.weight > 3500;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select year from cars_data where weight < 3000 intersect select year from cars_data group by year having count(*) < 4000",
        "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
        "question": "In which years automobiles were produced weighing no less than 3000 and no more than 4000?",
        "context": "In which years automobiles were produced weighing no less than 3000 and no more than 4000? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select distinct t1.year from cars_data as t1 where t1.weight > 3000 and t1.weight < 4000;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct year from cars_data where weight < 4000 intersect select distinct year from cars_data where weight > 3000",
        "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
        "question": "What are the different years in which there were vehicles produced that weighed less than 4000 and also vehicles that weighted more than 3000?",
        "context": "What are the different years in which there were vehicles produced that weighed less than 4000 and also vehicles that weighted more than 3000? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select distinct t1.year from cars_data as t1 where t1.weight > 3000 and t1.weight < 4000;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the power of the automobile with the largest accelerate?",
        "context": "What is the power of the automobile with the largest accelerate? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the power of the automobile with the greatest accelerate?",
        "context": "What is the power of the automobile with the greatest accelerate? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from model_list where model = 'volvo' group by modelid order by count(*) asc limit 1",
        "query": "SELECT count(cylinders) FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For model volvo, how many cylinders does the automobile with the least accelerate have?",
        "context": "For model volvo, how many cylinders does the automobile with the least accelerate have? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker ( volvo ), fullname ( Volvo ), country | model_list : modelid, maker, model ( volvo ) | car_names : makeid, model ( volvo ), make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(cylinders) from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from model_list where model = \"vovo\" group by model order by count(*) asc limit 1",
        "query": "SELECT count(cylinders) FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "context": "For a volvo model, how many cylinders does the version with least accelerate have? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker ( volvo ), fullname ( Volvo ), country | model_list : modelid, maker, model ( volvo ) | car_names : makeid, model ( volvo ), make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(cylinders) from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers where accelerate > (select max(",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "How many automobiles have a larger accelerate than the automobile with the largest power?",
        "context": "How many automobiles have a larger accelerate than the automobile with the largest power? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 );",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers where accelerate >(edispl) and horsepower",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "What is the number of automobiles with a greater accelerate than the one with the most power?",
        "context": "What is the number of automobiles with a greater accelerate than the one with the most power? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 );",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(distinct countryid), count(distinct t1.countryid) from countries as t1 join car_makers as t2 on t1.countryid = t2.id group by t1.countryid having count(distinct t1.countryid) > 2",
        "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
        "question": "How many States has more than 2 car manufacturers?",
        "context": "How many States has more than 2 car manufacturers? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from ( select t1.countryid, count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2 );",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from countries where countryid > 2;",
        "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
        "question": "What is the number of States with more than 2 car manufacturers?",
        "context": "What is the number of States with more than 2 car manufacturers? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from ( select t1.countryid, count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2 );",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where cylinders > 6",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "How many automobiles has over 6 cylinders?",
        "context": "How many automobiles has over 6 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from cars_data where cylinders > 6;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where cylinders > 6",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "What is the number of automobiles with over 6 cylinders?",
        "context": "What is the number of automobiles with over 6 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select count(*) from cars_data where cylinders > 6;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.model = t2.id where t2.cylinders = 4",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For the automobiles with 4 cylinders, which model has the largest power?",
        "context": "For the automobiles with 4 cylinders, which model has the largest power? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.id from car_makers as t1 join cars_data as t2 on t1.id = 4",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For all of the 4 cylinder automobiles, which model has the most power?",
        "context": "For all of the 4 cylinder automobiles, which model has the most power? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.makeid, t2.maker from car_names as t1 join car_makers as t2 on t1.makeid = t2.id group by t1.makeid having count(*) > 3",
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "question": "Among the automobiles with more than lowest power, which ones do not have more than 3 cylinders? List the vehicle makeid and manufacturer name.",
        "context": "Among the automobiles with more than lowest power, which ones do not have more than 3 cylinders? List the vehicle makeid and manufacturer name. | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t2.makeid, t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders <= 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select id, t1.maker from car_makers as t1 join cars_data as t2 on t1.id = t2.c",
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <  4;",
        "question": "Among the automobiles that do not have the minimum power, what are the manufacturer ids and names of al those with less than 4 cylinders?",
        "context": "Among the automobiles that do not have the minimum power, what are the manufacturer ids and names of al those with less than 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t2.makeid, t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders < 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.mpg, t1.m",
        "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;",
        "question": "What is the maximum miles per gallon of the automobile with 8 cylinders or produced before 1980?",
        "context": "What is the maximum miles per gallon of the automobile with 8 cylinders or produced before 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select mpg from cars_data where cylinders = 8 or year < 1980 order by mpg desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(mpg) from cars_data where cylinders = 8 union select mpg from cars_data where year < 1980",
        "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;",
        "question": "What is the maximum mpg of the automobiles that had 8 cylinders or that were produced before 1980?",
        "context": "What is the maximum mpg of the automobiles that had 8 cylinders or that were produced before 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select mpg from cars_data where cylinders = 8 or year < 1980 order by mpg desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.model from model_list as t1 join car_makers as t2 on t1.modelid = t2.id where t2.fullname = 'Ford Motor Company' and t2.",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "context": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker ( ford ), fullname ( Ford Motor Company ), country | model_list : modelid, maker, model ( ford ) | car_names : makeid, model ( ford ), make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname!= 'Ford motor Company';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct model from model_list where weight < 3500 and id not in (select t1.model from model_list as t1 join car_makers as t2 on t1.maker = t2.id where t2.fullname = \"Fordering Motor Company\" ",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "context": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker ( ford ), fullname ( Ford Motor Company ), country | model_list : modelid, maker, model ( ford ) | car_names : makeid, model ( ford ), make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname!= 'Ford motor Company';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t1.countryid",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the name of the States where there is not a single automobile maker?",
        "context": "What are the name of the States where there is not a single automobile maker? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the names of the States with no vehicle manufacturers?",
        "context": "What are the names of the States with no vehicle manufacturers? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.id, t2.maker from car_makers as t1 join model_list as t2 on t1.id = t2.modelid group by t1.id having count(*) >= 2 intersect select t1.id, t2.maker from car_makers as t1 join car_makers as t2 on t1.maker = t2.id group by t1.id having count(*) > 3",
        "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which are the automobile manufacturers which produce at least 2 models and more than 3 automobile manufacturers? List the id and the manufacturer.",
        "context": "Which are the automobile manufacturers which produce at least 2 models and more than 3 automobile manufacturers? List the id and the manufacturer. | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.id, t1.",
        "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the ids and manufacturers of all automobile manufacturers that produce at least 2 models and make more than 3 automobiles?",
        "context": "What are the ids and manufacturers of all automobile manufacturers that produce at least 2 models and make more than 3 automobiles? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker, fullname, country | model_list : modelid, maker, model | car_names : makeid, model, make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t2.maker = 'fiat' group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t2.fullname = 'Fiat'",
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "question": "What are the id and names of the nations which have more than 3 vehicle manufacturers or produce the 'fiat' model?",
        "context": "What are the id and names of the nations which have more than 3 vehicle manufacturers or produce the 'fiat' model? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker ( fiat ), fullname ( Fiat ), country | model_list : modelid, maker, model ( fiat ) | car_names : makeid, model ( fiat ), make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t2.maker = 'fiat' group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join cars_data as t2 on t1.countryid = t2.countryid",
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "question": "What are the ids and names of all States that either have more than 3 automobile manufacturers or produce fiats?",
        "context": "What are the ids and names of all States that either have more than 3 automobile manufacturers or produce fiats? | car_1 | continents : contid, continent | countries : countryid, countryname, continent | car_makers : id, maker ( fiat ), fullname ( Fiat ), country | model_list : modelid, maker, model ( fiat ) | car_names : makeid, model ( fiat ), make | cars_data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations or States, which occupies a certain territory. continent is the contid; car_makers: a company engaged in the manufacture of automobiles. maker is a car manufacturer. country is the countryid where a maker is located in; model_list: a list of models produced by different vehicle makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced vehicle are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is maximum power. weight is the produced weighting. accelerate is the rate of speed increase. year is the year of the production time;",
        "label": "car_1 | select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "flight_2 | select country from airlines where airline = 'JetBlue Airways'",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which State does Airways \"JetBlue Airways\" belong to?",
        "context": "Which State does Airways \"JetBlue Airways\" belong to? | flight_2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select country from airlines where airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select country from airlines where airline = 'JetBlue Airways'",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What State is Jetblue Airways affiliated with?",
        "context": "What State is Jetblue Airways affiliated with? | flight_2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select country from airlines where airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select abbreviation from airlines where airline = 'JetBlue Airways'",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What is the shortened word of Airline \"JetBlue Airways\"?",
        "context": "What is the shortened word of Airline \"JetBlue Airways\"? | flight_2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select abbreviation from airlines where airline = 'JetBlue Airways'",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which shortened word corresponds to Jetblue Airways?",
        "context": "Which shortened word corresponds to Jetblue Airways? | flight_2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.abbreviation, t1.abbreviation from airlines as t1 join flights on t1.uid = t2.abbreviation",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "List all airway names and their shortened word in \"USA\".",
        "context": "List all airway names and their shortened word in \"USA\". | flight_2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select airline, abbreviation from airlines where country = \"USA\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.abbreviation, t2.abbreviation from airlines as t1 join flights on t1.uid = t2.abbreviation",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "What are the airway names and shortened words for airways in the USA?",
        "context": "What are the airway names and shortened words for airways in the USA? | flight_2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select airline, abbreviation from airlines where country = \"USA\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportcode, airportname from airports where city = 'Antonio'",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "List the airport code and name in the city of Anthony.",
        "context": "List the airport code and name in the city of Anthony. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Anthony ), airportcode, airportname ( Anthony ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select airportcode, airportname from airports where city = \"Anthony\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportcode, airportname from airports where city = 'Antonio'",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "context": "Give the airport code and airport name corresonding to the city Anthony. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Anthony ), airportcode, airportname ( Anthony ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select airportcode, airportname from airports where city = \"Anthony\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from air",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "How many airways do we have?",
        "context": "How many airways do we have? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from air",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "What is the total amount of airways?",
        "context": "What is the total amount of airways? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "How many aerodromes do we have?",
        "context": "How many aerodromes do we have? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from airports",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "Return the number of  aerodromes.",
        "context": "Return the number of aerodromes. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from airports",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "How many flights do we have?",
        "context": "How many flights do we have? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "Return the number of flights.",
        "context": "Return the number of flights. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select abbreviation from airlines where abbreviation = 'UAL'",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Which airway can be shortened as word 'UAL'?",
        "context": "Which airway can be shortened as word 'UAL'? | flight_2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select airline from airlines where abbreviation = \"UAL\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select avg(abbreviation) from airlines where abbreviation = 'UAL'",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Give the airway with abbreviation 'UAL'.",
        "context": "Give the airway with abbreviation 'UAL'. | flight_2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select airline from airlines where abbreviation = \"UAL\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines where country = 'USA'",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "How many airways are from USA?",
        "context": "How many airways are from USA? | flight_2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines where country = \"USA\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines where country = 'USA'",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "Return the number of airways in the USA.",
        "context": "Return the number of airways in the USA. | flight_2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines where country = \"USA\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city,",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Which town and State is the Alton airport at?",
        "context": "Which town and State is the Alton airport at? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Alton ), airportcode, airportname ( Alton ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select city, country from airports where airportname = \"Alton\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city, countryabbrev from airports where airportname = 'Alton'",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Give the town and State for the Alton airport.",
        "context": "Give the town and State for the Alton airport. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Alton ), airportcode, airportname ( Alton ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select city, country from airports where airportname = \"Alton\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportname from airports where airportcode = 'AKO'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "What is the aerodrome name for airport 'AKO'?",
        "context": "What is the aerodrome name for airport 'AKO'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AKO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AKO ), destairport ( AKO ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select airportname from airports where airportcode = \"AKO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.airportname from airports as t1 join flights as",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "Return the name of the aerodrome with code 'AKO'.",
        "context": "Return the name of the aerodrome with code 'AKO'. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AKO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AKO ), destairport ( AKO ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select airportname from airports where airportcode = \"AKO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city from airports where city = 'Aberdeen'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are aerodrome names at town 'Aberdeen'?",
        "context": "What are aerodrome names at town 'Aberdeen'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select airportname from airports where city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city from airports where city = 'Aberdeen'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are the names of aerodrome in Aberdeen?",
        "context": "What are the names of aerodrome in Aberdeen? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select airportname from airports where city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where sourceairport = 'APG'",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "How many flights depart from 'APG'?",
        "context": "How many flights depart from 'APG'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights where sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where sourceairport = 'APG'",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Count the amount of flights departing from 'APG'.",
        "context": "Count the amount of flights departing from 'APG'. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights where sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports where airportcode = 'ATO'",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "How many flights have terminal ATO?",
        "context": "How many flights have terminal ATO? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights where destairport = \"ATO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports where airportcode = 'ATO'",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "Count the number of flights into ATO.",
        "context": "Count the number of flights into ATO. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights where destairport = \"ATO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports as t1 join flights as t2 on t1.city = t1.city where t1.city = \"Aberdeen\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City Aberdeen?",
        "context": "How many flights depart from City Aberdeen? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports where city = 'Aberge'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights departing from Aberdeen.",
        "context": "Return the number of flights departing from Aberdeen. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports where city = 'Aberdeen'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights arriving in Aberdeen city?",
        "context": "How many flights arriving in Aberdeen city? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports where city = 'Aberdeen'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights arriving in Aberdeen.",
        "context": "Return the number of flights arriving in Aberdeen. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports as t1 join flights as t2 on t1.city = t2.airport",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "context": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen, Ashley ), airportcode, airportname ( Ashley ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airports as t3 on t1.sourceairport = t3.airportcode where t2.city = \"Ashley\" and t3.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports as t1 join flights as t2 on t1.city = t2.airport",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "context": "How many flights fly from Aberdeen to Ashley? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen, Ashley ), airportcode, airportname ( Ashley ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airports as t3 on t1.sourceairport = t3.airportcode where t2.city = \"Ashley\" and t3.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.a",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "How many flights does airway 'JetBlue Airways' have?",
        "context": "How many flights does airway 'JetBlue Airways' have? | flight_2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airlines as t2 on t1.airline = t2.uid where t2.airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.air",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "Give the number of Jetblue Airways flights.",
        "context": "Give the number of Jetblue Airways flights. | flight_2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airlines as t2 on t1.airline = t2.uid where t2.airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.air",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "context": "How many 'United Airlines' flights go to Airport 'ASY'? | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( ASY ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"United Airlines\" and t2.destairport = \"ASY\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airlines as t2 on t1.airline = t2.uid where destairport = \"ASY\"",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "context": "Count the number of United Airlines flights arriving in ASY Airport. | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( ASY ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"United Airlines\" and t2.destairport = \"ASY\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airlines as t2 on t1.airline = t2.uid where destairport = 'AHD'",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "How many 'United Airlines' flights leave from Airport 'AHD'?",
        "context": "How many 'United Airlines' flights leave from Airport 'AHD'? | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"United Airlines\" and t2.sourceairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where airline = 'United Airlines' and destairport = \"AHD\"",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "context": "Return the number of United Airlines flights leaving from AHD Airport. | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"United Airlines\" and t2.sourceairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.abbreviation",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "context": "How many United Airlines flights go to City 'Aberdeen'? | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airlines as t3 on t3.uid = t1.airline where t2.city = \"Aberdeen\" and t3.airline = \"United Airlines\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airlines as t2 on t1.airline = t2.uid where t2.country = 'Aberdeen'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "context": "Count the number of United Airlines flights that arrive in Aberdeen. | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airlines as t3 on t3.uid = t1.airline where t2.city = \"Aberdeen\" and t3.airline = \"United Airlines\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city, count(*), t1.city from airports as t1 join flights as t2 on t1.city = t2.destairport group by t1.city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which town has most number of arriving flights?",
        "context": "Which town has most number of arriving flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.destairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city from airports group by city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which town has the most frequent terminal aerodrome?",
        "context": "Which town has the most frequent terminal aerodrome? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.destairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city, count(*), t1.city from airports as t1 join flights as t2 on t1.city = t2.destairport group by t1.city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which town has most number of departing flights?",
        "context": "Which town has most number of departing flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city from airports group by city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which town is the most frequent source aerodrome?",
        "context": "Which town is the most frequent source aerodrome? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights group by flightno order by count(*) desc limit 1",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of aerodrome that has the highest number of flights?",
        "context": "What is the code of aerodrome that has the highest number of flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.airportcode, count(*) from flights as t1 join",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the aerodrome code of the aerodrome with the most flights?",
        "context": "What is the aerodrome code of the aerodrome with the most flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.airportcode, count(*) from flights as t1 join",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "What is the code of aerodrome that has fewest number of flights?",
        "context": "What is the code of aerodrome that has fewest number of flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights group by flightno order by count(*) asc limit 1",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "Give the code of the aerodrome with the least flights.",
        "context": "Give the code of the aerodrome with the least flights. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select sourceairport from flights group by sourceairport order by count(*) desc limit 1",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "Which airway has most number of flights?",
        "context": "Which airway has most number of flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select sourceairport from flights group by sourceairport order by count(*) desc limit 1",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "What airway serves the most flights?",
        "context": "What airway serves the most flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.abbreviation, t1.country, t2.airport",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "Find the shortened word and State of the airway that has fewest number of flights?",
        "context": "Find the shortened word and State of the airway that has fewest number of flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.abbreviation, t1.countryabbrev from flights as",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "What is the shortened word of the airway has the fewest flights and what State is it in?",
        "context": "What is the shortened word of the airway has the fewest flights and what State is it in? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select avg (sourceairport) from flights where destairport = 'AHD'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "What are airways that have some flight departing from aerodrome 'AHD'?",
        "context": "What are airways that have some flight departing from aerodrome 'AHD'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.air",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "Which airways have a flight with source airport AHD?",
        "context": "Which airways have a flight with source airport AHD? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select sourceairport from flights where destairport = 'AHD'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "What are airways that have flights arriving at airport 'AHD'?",
        "context": "What are airways that have flights arriving at airport 'AHD'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.destairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.air",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "Which airways have a flight with terminal airport AHD?",
        "context": "Which airways have a flight with terminal airport AHD? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.destairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select avg(sourceairport) from flights where airportcode = 'APG\" intersect select avg(sourceairport) from flights where",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Find all airways that have flights from both aerodromes 'APG' and 'CVO'.",
        "context": "Find all airways that have flights from both aerodromes 'APG' and 'CVO'. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( CVO, APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( CVO, APG ), destairport ( CVO, APG ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.airportname from airports as t1 join flights as t2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Which airways have departing flights from both APG and CVO aerodromes?",
        "context": "Which airways have departing flights from both APG and CVO aerodromes? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( CVO, APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( CVO, APG ), destairport ( CVO, APG ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select avg(sourceairport) from flights where airportcode = 'CVO'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Find all airways that have flights from airport 'CVO' but not from 'APG'.",
        "context": "Find all airways that have flights from airport 'CVO' but not from 'APG'. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( CVO, APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( CVO, APG ), destairport ( CVO, APG ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.abbreviation from airports as t1 join airlines as t2 on t1.city = t2.a",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Which airways have departures from CVO but not from APG airports?",
        "context": "Which airways have departures from CVO but not from APG airports? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( CVO, APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( CVO, APG ), destairport ( CVO, APG ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.airport",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Find all airways that have at least 10 flights.",
        "context": "Find all airways that have at least 10 flights. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) > 10",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.air",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Which airways have at least 10 flights?",
        "context": "Which airways have at least 10 flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) > 10",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.air",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Find all airways that have fewer than 200 flights.",
        "context": "Find all airways that have fewer than 200 flights. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) < 200",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.air",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Which airways have less than 200 flights?",
        "context": "Which airways have less than 200 flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) < 200",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where airline = \"United Airlines\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "What are flight codes of airway \"United Airlines\"?",
        "context": "What are flight codes of airway \"United Airlines\"? | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.flightno from flights as t1 join airlines as t2 on t2.uid = t1.airline where t2.airline = \"United Airlines\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where airline = 'United Airlines'",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "Which flight codes correspond to United Airlines flights?",
        "context": "Which flight codes correspond to United Airlines flights? | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.flightno from flights as t1 join airlines as t2 on t2.uid = t1.airline where t2.airline = \"United Airlines\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where sourceairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "What are flight codes of flights departing from Airport \"APG\"?",
        "context": "What are flight codes of flights departing from Airport \"APG\"? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select flightno from flights where sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where sourceairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Give the flight codes of flights leaving from APG.",
        "context": "Give the flight codes of flights leaving from APG. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select flightno from flights where sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where destairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "What are flight codes of flights arriving at Airport \"APG\"?",
        "context": "What are flight codes of flights arriving at Airport \"APG\"? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select flightno from flights where destairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where destairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "Give the flight codes of flights landing at APG.",
        "context": "Give the flight codes of flights landing at APG. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG ) | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select flightno from flights where destairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights as t1 join airports as t2 on",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight codes of flights departing from City \"Aberdeen \"?",
        "context": "What are flight codes of flights departing from City \"Aberdeen \"? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where city = 'Ashley' and countryabbrev = 'Atlanta",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight codes of flights leaving from Aberdeen.",
        "context": "Give the flight codes of flights leaving from Aberdeen. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportcode from airports where city = \"Aberdeen\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight codes of flights arriving in City \"Aberdeen\"?",
        "context": "What are flight codes of flights arriving in City \"Aberdeen\"? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where city = 'Ashley City' and countryabbrev = 'Athens City",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight codes of flights arriving in Aberdeen.",
        "context": "Give the flight codes of flights arriving in Aberdeen. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportcode from airports where city = 'Aberge' or countryabbrev = 'Abilene'",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "Find the code of flights landing in the city of Aberdeen or Abilene.",
        "context": "Find the code of flights landing in the city of Aberdeen or Abilene. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Abilene, Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\" or t2.city = \"Abilene\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports where city = 'Aberge' or city = 'Abilene'",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "How many flights land in Aberdeen or Abilene?",
        "context": "How many flights land in Aberdeen or Abilene? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Abilene, Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\" or t2.city = \"Abilene\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select air",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Find the name of aerodromes which do not have any flight in and out.",
        "context": "Find the name of aerodromes which do not have any flight in and out. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Which aerodromes do not have leaving or arriving flights?",
        "context": "Which aerodromes do not have leaving or arriving flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport | description | airline: airways or aerodromes companies. airline is the name of the airline or aerodrome, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airport is a location from which aircraft flight operations take place and airline can have multiple flights. city is the town which has an airport. country is the state in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline name which performs the flight. flightno is the flight code. sourceairport is the source airport from which the flight is taking off or departing from. destairport is the destination airport/aerodrome terminal to which the flight is going to;",
        "label": "flight_2 | select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select count(*) from employee",
        "query": "SELECT count(*) FROM employee",
        "question": "How many workers are there?",
        "context": "How many workers are there? | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select count(*) from employee",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select count(*) from evaluation",
        "query": "SELECT count(*) FROM employee",
        "question": "Count the number of staffs",
        "context": "Count the number of staffs | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select count(*) from employee",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from employee order by age asc",
        "query": "SELECT name FROM employee ORDER BY age",
        "question": "Sort worker names by their age in ascending order.",
        "context": "Sort worker names by their age in ascending order. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select name from employee order by age",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from employee order by age asc",
        "query": "SELECT name FROM employee ORDER BY age",
        "question": "List the names of workers and sort in ascending order of age.",
        "context": "List the names of workers and sort in ascending order of age. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select name from employee order by age",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select city, count(*) from employee group by city",
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "What is the number of workers from each town?",
        "context": "What is the number of workers from each town? | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select count(*), city from employee group by city",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select count(*), city from employee group by city",
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "Count the number of staffs for each town.",
        "context": "Count the number of staffs for each town. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select count(*), city from employee group by city",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select city from employee where age < 30 group by city having count(*) > 1",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Which towns do more than one staff under age 30 come from?",
        "context": "Which towns do more than one staff under age 30 come from? | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select city from employee where age < 30 group by city having count(*) > 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select city from employee where age < 30 group by city having count(*) > 1",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Find the towns that have more than one worker under age 30.",
        "context": "Find the towns that have more than one worker under age 30. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select city from employee where age < 30 group by city having count(*) > 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select count(*), district from shop group by district",
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "question": "Find the number of shops in each city.",
        "context": "Find the number of shops in each city. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select count(*), location from shop group by location",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select count(*), district from shop group by district",
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "question": "How many stores are there in each city?",
        "context": "How many stores are there in each city? | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select count(*), location from shop group by location",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name, district from shop order by number_products desc limit 1",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "Find the head name and district of the shop whose number of commodities is the largest.",
        "context": "Find the head name and district of the shop whose number of commodities is the largest. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select manager_name, district from shop order by number_products desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t1.name, t1.district from shop as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "What are the director name and district of the market that sells the largest number of goods?",
        "context": "What are the director name and district of the market that sells the largest number of goods? | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select manager_name, district from shop order by number_products desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select min(number_products), max(number_products) from shop",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "find the minimum and maximum number of merchandises of all stores.",
        "context": "find the minimum and maximum number of merchandises of all stores. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select min(number_products), max(number_products) from shop",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select min(number_products), max(number_products) from shop",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "What are the minimum and maximum number of goods across all the stores?",
        "context": "What are the minimum and maximum number of goods across all the stores? | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select min(number_products), max(number_products) from shop",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t2.name, t2.city, t2.district from shop as t1 join employee as t2",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Return the name, city and district of all markets in descending order of number of commodities.",
        "context": "Return the name, city and district of all markets in descending order of number of commodities. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select name, location, district from shop order by number_products desc",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name, district, number_products from shop order by number_products desc",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Sort all the stores by number merchandises in descending order, and return the name, city and district of each store.",
        "context": "Sort all the stores by number merchandises in descending order, and return the name, city and district of each store. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select name, location, district from shop order by number_products desc",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from shop where number_products > (select avg(number_products) from shop)",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Find the names of stores whose number merchandises is more than the average number of merchandises.",
        "context": "Find the names of stores whose number merchandises is more than the average number of merchandises. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select name from shop where number_products > (select avg(number_products) from shop)",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from shop where number_products > (select avg(number_products) from shop)",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Which shops' number goods is above the average? Give me the store names.",
        "context": "Which shops' number goods is above the average? Give me the store names. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select name from shop where number_products > (select avg(number_products) from shop)",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t2.name from evaluation as t1 join employee as t2 on t1.employee_id = t2.employee_id group by t1.employee_id order by count(*) desc limit 1",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "find the name of staff who was awarded the most times in the assessment.",
        "context": "find the name of staff who was awarded the most times in the assessment. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id group by t2.employee_id order by count(*) desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t2.name from evaluation as t1 join employee as t2 on t1.employee_id = t2.employee_id group by t1.employee_id order by count(*) desc limit 1",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "Which worker received the most awards in assessments? Give me the worker name.",
        "context": "Which worker received the most awards in assessments? Give me the worker name. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id group by t2.employee_id order by count(*) desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t2.name from evaluation as t1 join employee as t2 on t1.employee_id = t2.employee_id order by t1.bonus desc limit 1",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Find the name of the worker who got the highest one time premium.",
        "context": "Find the name of the worker who got the highest one time premium. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t2.name from evaluation as t1 join employee as t2 on t1.employee_id = t2.employee_id order by t1.bonus desc limit 1",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Which worker received the biggest extra prize? Give me the worker name.",
        "context": "Which worker received the biggest extra prize? Give me the worker name. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from employee where employee_id not in (select employee_id from evaluation)",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "Find the names of staffs who never won any award in the assessment.",
        "context": "Find the names of staffs who never won any award in the assessment. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select name from employee where employee_id not in (select employee_id from evaluation)",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from employee where employee_id not in (select employee_id from evaluation)",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "What are the names of the staffs who never received any assessment?",
        "context": "What are the names of the staffs who never received any assessment? | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select name from employee where employee_id not in (select employee_id from evaluation)",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the store that is hiring the largest number of workers?",
        "context": "What is the name of the store that is hiring the largest number of workers? | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from shop group by name order by count(*) desc limit 1",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which shop has the most workers? Give me the store name.",
        "context": "Which shop has the most workers? Give me the store name. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from shop where shop_id not in (select shop_id from hiring)",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Find the name of the stores that do not hire any people.",
        "context": "Find the name of the stores that do not hire any people. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select name from shop where shop_id not in (select shop_id from hiring)",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from shop where shop_id!= \"null\"",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Which stores run with no workers? Find the store names",
        "context": "Which stores run with no workers? Find the store names | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select name from shop where shop_id not in (select shop_id from hiring)",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select count(*), t1.name from employee as t1 join hiring as t2 on t1.employee_id = t2.employee_id group by t1.name",
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "Find the number of staffs hired in each store; show the store name as well.",
        "context": "Find the number of staffs hired in each store; show the store name as well. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select count(*), t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t2.name",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select count(*), name from shop group by name",
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "For each store, return the number of people working there and the name of the store.",
        "context": "For each store, return the number of people working there and the name of the store. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select count(*), t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t2.name",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select Sum(bonus), t2.employee_id from evaluation as t1 join employee as t2 on t1.employee_id = t2.employee_id group by t1.employee_id",
        "query": "SELECT sum(bonus) FROM evaluation",
        "question": "What is total premium given in all assessments?",
        "context": "What is total premium given in all assessments? | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select sum(bonus) from evaluation",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select sum(t1.bonus) from evaluation as t1 join employee as t2 on t1.employee_id = t2.employee_id",
        "query": "SELECT sum(bonus) FROM evaluation",
        "question": "Find the total amount of extra prize given in all the assessments.",
        "context": "Find the total amount of extra prize given in all the assessments. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select sum(bonus) from evaluation",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select * from hiring",
        "query": "SELECT * FROM hiring",
        "question": "Give me all the information about hiring.",
        "context": "Give me all the information about hiring. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select * from hiring",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select * from hiring",
        "query": "SELECT * FROM hiring",
        "question": "What is all the information about hiring?",
        "context": "What is all the information about hiring? | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select * from hiring",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Which district has both stores with less than 3000 goods and stores with more than 10000 goods?",
        "context": "Which district has both stores with less than 3000 goods and stores with more than 10000 goods? | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Find the districts in which there are both shops selling less than 3000 goods and markets selling more than 10000 goods.",
        "context": "Find the districts in which there are both shops selling less than 3000 goods and markets selling more than 10000 goods. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select count(distinct city), t1.location from shop as t1 join evaluation as t2 on t1.shop_id = t2.shop_id",
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "How many different store city are there?",
        "context": "How many different store city are there? | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select count(distinct location) from shop",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select count(distinct t2.city) from shop as t1 Join employee as t2 on t1.shop_id = t2.shop_id",
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "Count the number of distinct store city.",
        "context": "Count the number of distinct store city. | employee_hire_evaluation | employee : employee_id, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id, employee_id, start_from, is_full_time | evaluation : employee_id, year_awarded, bonus | description | employee: staff member or worker. name is the name of worker. city is the town where he is employed; shop: is a building or part of a building where goods or services are sold. location is city. district is market area. number_products is the number of commodities or goods in the shop; hiring: is the act of starting to employ someone. start_from is the year of employment. is_a_full_time is 'T' if a person is employed full time otherwise if the person is part-time, it is 'F'; evaluation: award in the assessment of the employees. year_awarded is the year when a bonus awarded. bonus is premium that employee received;",
        "label": "employee_hire_evaluation | select count(distinct location) from shop",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from documents",
        "query": "SELECT count(*) FROM Documents",
        "question": "How many papers do we have?",
        "context": "How many papers do we have? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from documents",
        "query": "SELECT count(*) FROM Documents",
        "question": "Count the number of papers.",
        "context": "Count the number of papers. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id, document_name, document_description from documents",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "List paper IDs, paper names, and paper descriptions for all papers.",
        "context": "List paper IDs, paper names, and paper descriptions for all papers. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id, document_name, document_description from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id, document_name, document_description from documents",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "What are the ids, names, and descriptions for all papers?",
        "context": "What are the ids, names, and descriptions for all papers? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id, document_name, document_description from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_name, template_id from documents where document_description like '%w%'",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "What is the document name and layout id for document with description with the letter 'w' in it?",
        "context": "What is the document name and layout id for document with description with the letter 'w' in it? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_name, template_id from documents where document_description like \"%w%\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_name,",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "Return the names and layout ids for papers that contain the letter w in their describing content.",
        "context": "Return the names and layout ids for papers that contain the letter w in their describing content. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_name, template_id from documents where document_description like \"%w%\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id, document_id, document_description from documents where document_name = \"Robbin CV\"",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "What is the paper id, layout id and describing content for paper named \"Robbin CV\"?",
        "context": "What is the paper id, layout id and describing content for paper named \"Robbin CV\"? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( Paper, CV ) | templates : template_id, version_number, template_type_code ( CV ), date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name ( Robbin CV ), document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_id,",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "Return the paper id, layout id, and describing details for the paper with the name Robbin CV.",
        "context": "Return the paper id, layout id, and describing details for the paper with the name Robbin CV. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( Paper, CV ) | templates : template_id, version_number, template_type_code ( CV ), date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name ( Robbin CV ), document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from documents",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "How many different layout do all document use?",
        "context": "How many different layout do all document use? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(distinct template_id) from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates as t1 join paragraphs as t2 on t1.template_type_code = t2.template_type_code",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "Count the number of different layout used for text files.",
        "context": "Count the number of different layout used for text files. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(distinct template_id) from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates where template_type_code = 'PPT'",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "How many text files are using the layout with type code 'PPT'?",
        "context": "How many text files are using the layout with type code 'PPT'? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ), template_type_description | templates : template_id, version_number, template_type_code ( PPT ), date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = 'PPT'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates where template_type_code = \"PPT\"",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "Count the number of text files that use the PPT template type.",
        "context": "Count the number of text files that use the PPT template type. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ), template_type_description | templates : template_id, version_number, template_type_code ( PPT ), date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = 'PPT'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "Show all layout ids and number of text files using each layout.",
        "context": "Show all layout ids and number of text files using each layout. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id, count(*) from documents group by template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*), template_id from documents group by template_id",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "What are all different layout ids used for papers, and how many times were each of them used?",
        "context": "What are all different layout ids used for papers, and how many times were each of them used? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id, count(*) from documents group by template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and type for the layout used by the most papers?",
        "context": "What is the id and type for the layout used by the most papers? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.template_id, t2.template_type_code from documents as t1 join templates as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and type of the layout that is used for the greatest number of papers.",
        "context": "Return the id and type of the layout that is used for the greatest number of papers. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.template_id, t2.template_type_code from documents as t1 join templates as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "Show ids for all layouts that are used by more than one text file.",
        "context": "Show ids for all layouts that are used by more than one text file. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id from documents group by template_id having count(*) > 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from templates group by template_id having count(*) > 1",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "What are the template ids of any templates used in more than a single paper?",
        "context": "What are the template ids of any templates used in more than a single paper? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id from documents group by template_id having count(*) > 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from templates except select template_id from documents",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "Show ids for all templates not used by any text file.",
        "context": "Show ids for all templates not used by any text file. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id from templates except select template_id from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from templates except select template_id from documents",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "What are the ids for layout that are not used in any papers?",
        "context": "What are the ids for layout that are not used in any papers? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id from templates except select template_id from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates",
        "query": "SELECT count(*) FROM Templates",
        "question": "How many layout do we have?",
        "context": "How many layout do we have? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates",
        "query": "SELECT count(*) FROM Templates",
        "question": "Count the number of layout.",
        "context": "Count the number of layout. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select avg (version_number), avg(version_number) from templates ;",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "Show layout ids, version numbers, and layout type for all layout.",
        "context": "Show layout ids, version numbers, and layout type for all layout. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id, version_number, template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select avg(version_number), avg(version_number) from templates group by avg(version_number)",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "What are the ids, edition numbers, and type name for each layout?",
        "context": "What are the ids, edition numbers, and type name for each layout? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id, version_number, template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select distinct template_type_code from templates",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "Show all distinct layout type names for all layout.",
        "context": "Show all distinct layout type names for all layout. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select distinct template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select distinct template_type_code from ref_template_types",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "What are the different layout type names?",
        "context": "What are the different layout type names? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select distinct template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "What are the ids of layout with layout type code PP or PPT?",
        "context": "What are the ids of layout with layout type code PP or PPT? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT, PP ), template_type_description | templates : template_id, version_number, template_type_code ( PPT, PP ), date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "Return the ids of layout that have the code PP or PPT.",
        "context": "Return the ids of layout that have the code PP or PPT. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT, PP ), template_type_description | templates : template_id, version_number, template_type_code ( PPT, PP ), date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates where template_type_code = \"CV\"",
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "How many layout have template type code CV?",
        "context": "How many layout have template type code CV? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( CV ) | templates : template_id, version_number, template_type_code ( CV ), date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from templates where template_type_code = \"CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from ref_template_types where template_type_code = \"CV\"",
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "Count the number of layout of the type CV.",
        "context": "Count the number of layout of the type CV. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( CV ) | templates : template_id, version_number, template_type_code ( CV ), date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from templates where template_type_code = \"CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.version_number, t2.",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "What is the edition number and layout type for the layout with edition number later than 5?",
        "context": "What is the edition number and layout type for the layout with edition number later than 5? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select version_number, template_type_code from templates where version_number > 5",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.version_number, t2.",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "Return the edition numbers and layout type names of layout with a edition number greater than 5.",
        "context": "Return the edition numbers and layout type names of layout with a edition number greater than 5. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select version_number, template_type_code from templates where version_number > 5",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code, count(*) from templates group by template_type_code",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "Show all layout type codes and number of layout for each.",
        "context": "Show all layout type codes and number of layout for each. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code, count(*) from templates group by template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t2.template_type_code, count(*) from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code group by t2.template_type_code",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "What are the different layout type, and how many layout correspond to each?",
        "context": "What are the different layout type, and how many layout correspond to each? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code, count(*) from templates group by template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which layout type code has most number of layout?",
        "context": "Which layout type code has most number of layout? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the type name of the layout type that the most layout belong to.",
        "context": "Return the type name of the layout type that the most layout belong to. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code having count(*) < 3",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "Show all layout types with less than three layouts.",
        "context": "Show all layout types with less than three layouts. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code having count(*) < 3",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "What are the names of layout types that have fewer than 3 layouts?",
        "context": "What are the names of layout types that have fewer than 3 layouts? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code having count(*) < 3",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select min(version_number), template_type_code from templates",
        "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "question": "What the smallest edition number and its layout type code?",
        "context": "What the smallest edition number and its layout type code? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select min(version_number), template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select min(version_number) from templates",
        "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "question": "Return the lowest edition number, along with its corresponding layout type code.",
        "context": "Return the lowest edition number, along with its corresponding layout type code. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select min(version_number), template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "What is the layout type code of the layout used by layout with the name \"Data base\"?",
        "context": "What is the layout type code of the layout used by layout with the name \"Data base\"? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name ( Data base ), document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "Return the layout type code of the layout that is used by a text file named Data base.",
        "context": "Return the layout type code of the layout that is used by a text file named Data base. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name ( Data base ), document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_name from documents as t1 join templates as t2 on t2.template_type_code = t2.template_type_code where template_type_code = \"BK\"",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "Show all text file names using layout with layout type code BK.",
        "context": "Show all text file names using layout with layout type code BK. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( BK ), template_type_description | templates : template_id, version_number, template_type_code ( BK ), date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t2.document_name from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t1.template_type_code = \"BK\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_name from documents as t1 join templates as t2 on t1.document_id = t2.document_id",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "What are the names of papers that use layouts with the code BK?",
        "context": "What are the names of papers that use layouts with the code BK? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( BK ), template_type_description ( Paper ) | templates : template_id, version_number, template_type_code ( BK ), date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t2.document_name from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t1.template_type_code = \"BK\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select",
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "Show all layout type names and the number of papers using each type.",
        "context": "Show all layout type names and the number of papers using each type. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.template_type_code, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t2.template_type_code, count(*) from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code group by t2.template_type_code",
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "What are the different layout types, and how many papers use each type?",
        "context": "What are the different layout types, and how many papers use each type? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.template_type_code, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which layout type is used by most number of text files?",
        "context": "Which layout type is used by most number of text files? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the code of the layout type that is most commonly used in text files.",
        "context": "Return the code of the layout type that is most commonly used in text files. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from templates where template_id not in (select template_id from documents)",
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "Show all layout types that are not used by any text file.",
        "context": "Show all layout types that are not used by any text file. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code from templates except select template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from templates where template_type_code not in (select template_type_code from documents",
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "What are the names of layout types that are not used for any text file?",
        "context": "What are the names of layout types that are not used for any text file? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code from templates except select template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_description, template_type_code from ref_template_types",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "Show all layout type names and describing details.",
        "context": "Show all layout type names and describing details. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code, template_type_description from ref_template_types",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code, template_type_description from ref_template_types",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "What are the type names and describing details for all layout types?",
        "context": "What are the type names and describing details for all layout types? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code, template_type_description from ref_template_types",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "What is the layout type describing content for layout type code \"AD\".",
        "context": "What is the layout type describing content for layout type code \"AD\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( AD ), template_type_description | templates : template_id, version_number, template_type_code ( AD ), date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_description from ref_template_types where template_type_code = \"AD\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t2.template_type_description from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code where t2.template_type_code = \"AD\"",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "Return the layout type describing content of the layout type with the code AD.",
        "context": "Return the layout type describing content of the layout type with the code AD. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( AD ), template_type_description | templates : template_id, version_number, template_type_code ( AD ), date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_description from ref_template_types where template_type_code = \"AD\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "What is the layout type name for layout type description \"Book\".",
        "context": "What is the layout type name for layout type description \"Book\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Book ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "Return the type of the layout type with the description \"Book\".",
        "context": "Return the type of the layout type with the description \"Book\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Book ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select distinct template_type_description from ref_template_types",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "What are the distinct layout type descriptions for the layouts ever used by any text file?",
        "context": "What are the distinct layout type descriptions for the layouts ever used by any text file? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select distinct t1.",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "Return the different describing content for layouts that have been used in a text file.",
        "context": "Return the different describing content for layouts that have been used in a text file. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "What are the layout ids with layout type describing content \"Presentation\".",
        "context": "What are the layout ids with layout type describing content \"Presentation\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Presentation ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = \"Presentation\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "Return the ids corresponding to layouts with the describing content 'Presentation'.",
        "context": "Return the ids corresponding to layouts with the describing content 'Presentation'. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Presentation ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = \"Presentation\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from paragraphs",
        "query": "SELECT count(*) FROM Paragraphs",
        "question": "How many paragraphs in total?",
        "context": "How many paragraphs in total? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from paragraphs",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from paragraphs",
        "query": "SELECT count(*) FROM Paragraphs",
        "question": "Count the number of paragraphs.",
        "context": "Count the number of paragraphs. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from paragraphs",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from paragraphs as t1 join documents as t2 on t1.paragraph_id = t2.document_id where t2.document_name = 'Summer Show'",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "How many paragraphs for the text file with name 'Summer Show'?",
        "context": "How many paragraphs for the text file with name 'Summer Show'? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name ( Summer Show ), document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(distinct paragraph_id) from paragraphs where document_name = 'Summer Show",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "Count the number of paragraphs in the text file named 'Summer Show'.",
        "context": "Count the number of paragraphs in the text file named 'Summer Show'. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name ( Summer Show ), document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select other_details from paragraphs where paragraph_text = 'Korea'",
        "query": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
        "question": "Show paragraph details for paragraph with text 'Korea'.",
        "context": "Show paragraph details for paragraph with text 'Korea'. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text ( Korea ), other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select other_details from paragraphs where paragraph_text = 'Korea'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select other_details from paragraphs where paragraph_text like '%korea%'",
        "query": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
        "question": "What are the details for the paragraph that includes the text 'Korea'?",
        "context": "What are the details for the paragraph that includes the text 'Korea'? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text ( Korea ), other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select other_details from paragraphs where paragraph_text = 'Korea'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.paragraph_id = t2.document_id where t2.document_name = \"Welcome to NY\"",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "Show all paragraph ids and content for the text file with name 'Welcome to NY'.",
        "context": "Show all paragraph ids and content for the text file with name 'Welcome to NY'. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name ( Welcome to NY ), document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.paragraph_id = t2.document_id where t2.document_name = \"Welcome to NY\"",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "What are the ids and content of paragraphs in the text file titled 'Welcome to NY'?",
        "context": "What are the ids and content of paragraphs in the text file titled 'Welcome to NY'? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name ( Welcome to NY ), document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.paragraph_id = t2.document_id where t2.document_name = \"Customer reviews\"",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "Show all paragraph content for the text file \"Customer reviews\".",
        "context": "Show all paragraph content for the text file \"Customer reviews\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name ( Customer reviews ), document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"Customer reviews\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.paragraph_id = t2.document_id where t2.document_name = \"Customer reviews\"",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "What are the paragraph content for the text file with the name 'Customer reviews'?",
        "context": "What are the paragraph content for the text file with the name 'Customer reviews'? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name ( Customer reviews ), document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"Customer reviews\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_id, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*)",
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Show all paper ids and the number of paragraphs in each text file. Order by paper id.",
        "context": "Show all paper ids and the number of paragraphs in each text file. Order by paper id. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id, count(*) from paragraphs group by document_id order by document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id, count(*) from paragraphs group by document_id order by count(*) asc",
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Return the different paper ids along with the number of paragraphs corresponding to each, ordered by id.",
        "context": "Return the different paper ids along with the number of paragraphs corresponding to each, ordered by id. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id, count(*) from paragraphs group by document_id order by document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_id, t1.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "question": "Show all text file ids, names and the number of paragraphs in each paper.",
        "context": "Show all text file ids, names and the number of paragraphs in each paper. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.document_id, t2.document_name, count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_id, t1.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "question": "What are the ids and names of each paper, as well as the number of paragraphs in each?",
        "context": "What are the ids and names of each paper, as well as the number of paragraphs in each? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.document_id, t2.document_name, count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs group by paragraph_id having count(*) >= 2",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "List all name ids with at least two paragraphs.",
        "context": "List all name ids with at least two paragraphs. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) >= 2",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) >= 2",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "What are the ids of text files that have 2 or more paragraphs?",
        "context": "What are the ids of text files that have 2 or more paragraphs? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) >= 2",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_id, t2.document_name from paragraphs as t1 join documents as t2 on t1.paragraph_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the text file id and name with greatest number of paragraphs?",
        "context": "What is the text file id and name with greatest number of paragraphs? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.document_id, t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and name of the paper with the most paragraphs.",
        "context": "Return the id and name of the paper with the most paragraphs. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.document_id, t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the paper id with least number of paragraphs?",
        "context": "What is the paper id with least number of paragraphs? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Return the id of the paper with the fewest paragraphs.",
        "context": "Return the id of the paper with the fewest paragraphs. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) between 1 and 2",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "question": "What is the paper id with 1 to 2 paragraphs?",
        "context": "What is the paper id with 1 to 2 paragraphs? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) between 1 and 2",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) between 1 and 2",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "question": "Give the ids of text files that have between one and two paragraphs.",
        "context": "Give the ids of text files that have between one and two paragraphs. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text, other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) between 1 and 2",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'",
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "question": "Show the paper id with paragraph text 'Brazil' and 'Ireland'.",
        "context": "Show the paper id with paragraph text 'Brazil' and 'Ireland'. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Paper ) | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text ( Ireland, Brazil ), other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Irlanda'",
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "question": "What are the ids of text files that contain the paragraph text 'Brazil' and 'Ireland'?",
        "context": "What are the ids of text files that contain the paragraph text 'Brazil' and 'Ireland'? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details | documents : document_id, template_id, document_name, document_description, other_details | paragraphs : paragraph_id, document_id, paragraph_text ( Ireland, Brazil ), other_details | description | ref_template_types: the layout types that correspond to templates. template_type_description describes content such as 'Presentation'; templates: layouts used for documents/papers. version_number is the edition number associated with the template. template_type_code is the layout type code. date_effective_from effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are papers or text files. template each document has an associated template; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "course_teach | select count(*), t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name",
        "query": "SELECT count(*) FROM teacher",
        "question": "How many instructors are there?",
        "context": "How many instructors are there? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select count(*) from teacher",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select count(*) from teacher",
        "query": "SELECT count(*) FROM teacher",
        "question": "What is the total count of faculties?",
        "context": "What is the total count of faculties? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select count(*) from teacher",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher order by age asc",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "List the names of faculties in ascending order of age.",
        "context": "List the names of faculties in ascending order of age. | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select name from teacher order by age asc",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher order by age asc",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "What are the names of the faculties ordered by ascending age?",
        "context": "What are the names of the faculties ordered by ascending age? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select name from teacher order by age asc",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select age, hometown from teacher",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "question": "What are the age and birthplace of instructors?",
        "context": "What are the age and birthplace of instructors? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select age, hometown from teacher",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select age, hometown from teacher",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "question": "What is the age and birthplace of every instructor?",
        "context": "What is the age and birthplace of every instructor? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select age, hometown from teacher",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher where hometown!= \"Little lever Urban District\"",
        "query": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\"",
        "question": "List the name of faculties whose birthplace is not \"Little Lever Urban District\".",
        "context": "List the name of faculties whose birthplace is not \"Little Lever Urban District\". | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown ( Little Lever Urban District ) | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select name from teacher where hometown!= \"Little lever urban District\"",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher where hometown!= \"Little lever Urban District\"",
        "query": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\"",
        "question": "What are the names of the faculties whose birthplace is not \"Little Lever Urban District\"?",
        "context": "What are the names of the faculties whose birthplace is not \"Little Lever Urban District\"? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown ( Little Lever Urban District ) | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select name from teacher where hometown!= \"Little lever urban District\"",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher where age = 32 or age = 33",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "Show the name of faculties aged either 32 or 33?",
        "context": "Show the name of faculties aged either 32 or 33? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select name from teacher where age = 32 or age = 33",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher where age = 32 or age = 33",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "What are the names of the instructors who are aged either 32 or 33?",
        "context": "What are the names of the instructors who are aged either 32 or 33? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select name from teacher where age = 32 or age = 33",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select hometown from teacher order by age asc limit 1",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "What is the birthplace of the youngest instructor?",
        "context": "What is the birthplace of the youngest instructor? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select hometown from teacher order by age asc limit 1",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "Where is the youngest instructor from?",
        "context": "Where is the youngest instructor from? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select hometown from teacher order by age asc limit 1",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.hometown, count(*) from teacher as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.hometown",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "Show different birthplace of instructors and the number of instructors from each birthplace.",
        "context": "Show different birthplace of instructors and the number of instructors from each birthplace. | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select hometown, count(*) from teacher group by hometown",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select hometown, count(*) from teacher group by hometown",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "For each birthplace, how many instructors are there?",
        "context": "For each birthplace, how many instructors are there? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select hometown, count(*) from teacher group by hometown",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select hometown from teacher group by hometown order by count(*) desc limit 1",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common birthplace of instructors.",
        "context": "List the most common birthplace of instructors. | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select hometown from teacher group by hometown order by count(*) desc limit 1",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select hometown from teacher group by hometown order by count(*) desc limit 1",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most commmon birthplaces for faculties?",
        "context": "What is the most commmon birthplaces for faculties? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select hometown from teacher group by hometown order by count(*) desc limit 1",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select hometown from teacher group by hometown having count(*) >= 2",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "Show the birthplaces shared by at least two faculties.",
        "context": "Show the birthplaces shared by at least two faculties. | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select hometown from teacher group by hometown having count(*) >= 2",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select hometown from teacher group by hometown having count(*) >= 2",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "What are the towns from which at least two instructors come from?",
        "context": "What are the towns from which at least two instructors come from? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select hometown from teacher group by hometown having count(*) >= 2",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name, t1.course_id from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "Show names of instructors and the curriculums they are arranged to teach.",
        "context": "Show names of instructors and the curriculums they are arranged to teach. | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name, t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "What is the name of each faculty and what curriculum they teach?",
        "context": "What is the name of each faculty and what curriculum they teach? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name, t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id order by t2.name asc",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "Show names of faculties and the curriculums they are arranged to teach in ascending alphabetical order of the faculty's name.",
        "context": "Show names of faculties and the curriculums they are arranged to teach in ascending alphabetical order of the faculty's name. | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id order by t3.name",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name, t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id order by t2.name asc",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "What are the names of the faculties and the curriculums they teach in ascending alphabetical order by the name of the faculty?",
        "context": "What are the names of the faculties and the curriculums they teach in ascending alphabetical order by the name of the faculty? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id order by t3.name",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t1.name from teacher as t1 join course as t2 on t1.teacher_id = t2.teacher_id",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "Show the name of the faculty for the math curriculum.",
        "context": "Show the name of the faculty for the math curriculum. | course_teach | course : course_id, staring_date, course ( Math ) | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select t3.name from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id where t2.course = \"Math\"",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t1.name from teacher as t1 join course as t2 on t1.teacher_id = t2.teacher_id",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "What are the names of the people who teach math?",
        "context": "What are the names of the people who teach math? | course_teach | course : course_id, staring_date, course ( Math ) | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select t3.name from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id where t2.course = \"Math\"",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name",
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "Show names of faculties and the number of curriculums they teach.",
        "context": "Show names of faculties and the number of curriculums they teach. | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id",
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "What are the names of the instructors and how many curriculums do they teach?",
        "context": "What are the names of the instructors and how many curriculums do they teach? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "Show names of instructors that teach at least two curriculums.",
        "context": "Show names of instructors that teach at least two curriculums. | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "What are the names of the faculties who teach at least two curriculums?",
        "context": "What are the names of the faculties who teach at least two curriculums? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "List the names of instructors who have not been arranged to teach curriculums.",
        "context": "List the names of instructors who have not been arranged to teach curriculums. | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher except select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "What are the names of the instructors whose curriculums have not been arranged?",
        "context": "What are the names of the instructors whose curriculums have not been arranged? | course_teach | course : course_id, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id, teacher_id, grade | description | course: curriculum taught by a teacher or instructor. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: an instructor or faculty who teaches, especially in a school. hometown is birthplace; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;",
        "label": "course_teach | select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select count(*) from visitor where age < 30",
        "query": "SELECT count(*) FROM visitor WHERE age  <  30",
        "question": "How many guests below age 30 are there?",
        "context": "How many guests below age 30 are there? | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select count(*) from visitor where age < 30",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select name from visitor where level_of_membership > 4 order by level_of_membership desc",
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "question": "Find the names of the guests whose membership level is higher than 4, and order the results by the level from high to low.",
        "context": "Find the names of the guests whose membership level is higher than 4, and order the results by the level from high to low. | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select name from visitor where level_of_membership > 4 order by level_of_membership desc",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select avg(age) from visitor where level_of_membership!= 4",
        "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "question": "What is the average age of the guests whose membership level is not higher than 4?",
        "context": "What is the average age of the guests whose membership level is not higher than 4? | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select avg(age) from visitor where level_of_membership <= 4",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select name, level_of_membership from visitor where level_of_membership > 4 order by age desc",
        "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "question": "Find the name and membership level of the guests whose membership level is higher than 4, and sort by their age from old to young.",
        "context": "Find the name and membership level of the guests whose membership level is higher than 4, and sort by their age from old to young. | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select name, level_of_membership from visitor where level_of_membership > 4 order by age desc",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select t1.museum_id, t1.name from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id group by t1.museum_id order by count(*) desc limit 1",
        "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "question": "Find the id and name of the museum that has the most workers?",
        "context": "Find the id and name of the museum that has the most workers? | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select museum_id, name from museum order by num_of_staff desc limit 1",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select avg(num_of_staff) from museum where open_year < 2009",
        "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "question": "Find the average number of worker working for the museums that were open before 2009.",
        "context": "Find the average number of worker working for the museums that were open before 2009. | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select avg(num_of_staff) from museum where open_year < 2009",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select open_year, num_of_staff from museum where name = 'Pala Museum'",
        "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "question": "What are the opening year and worker number of the museum named Plaza Museum?",
        "context": "What are the opening year and worker number of the museum named Plaza Museum? | museum_visit | museum : museum_id, name ( Plaza Museum ), num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select num_of_staff, open_year from museum where name = 'Plaza Museum'",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select name from museum where num_of_staff > (select min(open_year) from museum where open_year > 2010)",
        "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "question": "find the names of museums which have more worker than the minimum worker number of all museums opened after 2010.",
        "context": "find the names of museums which have more worker than the minimum worker number of all museums opened after 2010. | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select name from museum where num_of_staff > (select min(num_of_staff) from museum where open_year > 2010)",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select t1.id, t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t1.id having count(*) > 1",
        "query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "question": "find the id, name and age for guests who visited some museums more than once.",
        "context": "find the id, name and age for guests who visited some museums more than once. | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select t1.id, t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t1.id having count(*) > 1",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select t1.id, t1.name, t1.level_of_membership from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t1.id order by sum(t2.total_spent) desc limit 1",
        "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "question": "What are the id, name and membership level of guests who have spent the largest amount of money in total in all museum tickets?",
        "context": "What are the id, name and membership level of guests who have spent the largest amount of money in total in all museum tickets? | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select t2.visitor_id, t1.name, t1.level_of_membership from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t2.visitor_id order by sum(t2.total_spent) desc limit 1",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select t1.museum_id, t1.name from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id group by t1.museum_id order by count(*) desc limit 1",
        "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the id and name of the museum visited most times?",
        "context": "What are the id and name of the museum visited most times? | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select t2.museum_id, t1.name from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id group by t2.museum_id order by count(*) desc limit 1",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select name from museum where museum_id not in (select museum_id from visit)",
        "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "question": "What is the name of the museum that had no tourist yet?",
        "context": "What is the name of the museum that had no tourist yet? | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select name from museum where museum_id not in (select museum_id from visit)",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2",
        "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "question": "Find the name and age of the tourist who bought the most tickets at once.",
        "context": "Find the name and age of the tourist who bought the most tickets at once. | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id order by t2.num_of_ticket desc limit 1",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select avg(num_of_ticket), max(num_of_ticket) from visit",
        "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "question": "What are the average and maximum number of tickets bought in all guests?",
        "context": "What are the average and maximum number of tickets bought in all guests? | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select avg(num_of_ticket), max(num_of_ticket) from visit",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select sum(num_of_ticket), t1.name from visitor as t1 join visit as t2 on t1.id= t2.visitor_id where t1.level_of_membership = 1",
        "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "question": "What is the total ticket expense of the guests whose membership level is 1?",
        "context": "What is the total ticket expense of the guests whose membership level is 1? | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select sum(t2.total_spent) from visitor as t1 join visit as t2 on t1.id = t2.visitor_id where t1.level_of_membership = 1",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select t2.name from visit as t1 join visitor as t2 on t1.visitor_id = t2.visitor",
        "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "question": "What is the name of the tourist who visited both a museum opened before 2009 and a museum opened after 2011?",
        "context": "What is the name of the tourist who visited both a museum opened before 2009 and a museum opened after 2011? | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select t1.name from visitor as t1 join visit as t2 on t1.id = t2.visitor_id join museum as t3 on t3.museum_id = t2.museum_id where t3.open_year < 2009 intersect select t1.name from visitor as t1 join visit as t2 on t1.id = t2.visitor_id join museum as t3 on t3.museum_id = t2.museum_id where t3.open_year > 2011",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select count(*) from visitor where visitor_id not in (select visitor_id from visit as t1 join museum as t2 on t1.museum_id = t2.museum_id where t2.open_year > 2010) and num_of_ticket = \"T1.num_of_ticket\"",
        "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "question": "Find the number of guests who did not visit any museum opened after 2010.",
        "context": "Find the number of guests who did not visit any museum opened after 2010. | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select count(*) from visitor where id not in (select t2.visitor_id from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id where t1.open_year > 2010)",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select count(*) from museum where open_year > 2013 or open_year < 2008",
        "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "question": "How many museums were opened after 2013 or before 2008?",
        "context": "How many museums were opened after 2013 or before 2008? | museum_visit | museum : museum_id, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id, visitor_id, num_of_ticket, total_spent | description | museum: is a place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. num_of_staff is the number of workers. open_year is the year when the museum opened for the public; visitor: guest who is visiting a museum. level_of_membership is the visitor membership level; visit: is an act when a tourist or guest is going to visit a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;",
        "label": "museum_visit | select count(*) from museum where open_year > 2013 or open_year < 2008",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from players",
        "query": "SELECT count(*) FROM players",
        "question": "Find the total number of participants.",
        "context": "Find the total number of participants. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player ranking. tours",
        "label": "wta_1 | select count(*) from players",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from players",
        "query": "SELECT count(*) FROM players",
        "question": "How many participants are there?",
        "context": "How many participants are there? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player ranking. tours is",
        "label": "wta_1 | select count(*) from players",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from matches",
        "query": "SELECT count(*) FROM matches",
        "question": "Find the total number of competitions.",
        "context": "Find the total number of competitions. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player ranking.",
        "label": "wta_1 | select count(*) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from matches",
        "query": "SELECT count(*) FROM matches",
        "question": "Count the number of competitions.",
        "context": "Count the number of competitions. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player ranking.",
        "label": "wta_1 | select count(*) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.player_id",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "List the given name and birth date of all participants from the country with code USA.",
        "context": "List the given name and birth date of all participants from the country with code USA. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code ( USA ) | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc ( USA ), loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc ( USA ), winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a",
        "label": "wta_1 | select first_name, birth_date from players where country_code = 'USA'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select birth_date, first_name from players where country_code = \"USA\"",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "What are the given names and birth dates of participants from the USA?",
        "context": "What are the given names and birth dates of participants from the USA? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code ( USA ) | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc ( USA ), loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc ( USA ), winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in",
        "label": "wta_1 | select first_name, birth_date from players where country_code = 'USA'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(winner_age), avg(loser_age) from matches",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "Find the average age of losers and winners of all games.",
        "context": "Find the average age of losers and winners of all games. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied",
        "label": "wta_1 | select avg(loser_age), avg(winner_age) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(winner_age), avg(loser_age) from matches",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "What are the average ages of losers and winners across games?",
        "context": "What are the average ages of losers and winners across games? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position ",
        "label": "wta_1 | select avg(loser_age), avg(winner_age) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(winner_rank) from matches",
        "query": "SELECT avg(winner_rank) FROM matches",
        "question": "Find the average rank of winners in all games.",
        "context": "Find the average rank of winners in all games. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player",
        "label": "wta_1 | select avg(winner_rank) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(winner_rank) from matches",
        "query": "SELECT avg(winner_rank) FROM matches",
        "question": "What is the average rank for winners in all competitions?",
        "context": "What is the average rank for winners in all competitions? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in",
        "label": "wta_1 | select avg(winner_rank) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select max(t2.loser_rank) from matches as t1 join rankings as t2",
        "query": "SELECT min(loser_rank) FROM matches",
        "question": "Find the highest rank of losers in all competitions.",
        "context": "Find the highest rank of losers in all competitions. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in",
        "label": "wta_1 | select min(loser_rank) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select max(t1.loser_rank) from matches as t1 join rankings as t2 on t1.loser_id = t2.loser_io",
        "query": "SELECT min(loser_rank) FROM matches",
        "question": "What is the best rank of losers across all contest?",
        "context": "What is the best rank of losers across all contest? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in",
        "label": "wta_1 | select min(loser_rank) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from players",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "question": "find the number of distinct State codes of all participants.",
        "context": "find the number of distinct State codes of all participants. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the",
        "label": "wta_1 | select count(distinct country_code) from players",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(distinct country_code) from players",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "question": "How many distinct States do participants come from?",
        "context": "How many distinct States do participants come from? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player ranking",
        "label": "wta_1 | select count(distinct country_code) from players",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from players",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "Find the number of distinct name of losers.",
        "context": "Find the number of distinct name of losers. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player",
        "label": "wta_1 | select count(distinct loser_name) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count (distinct loser_name) from",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "How many different loser names are there?",
        "context": "How many different loser names are there? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player ranking",
        "label": "wta_1 | select count(distinct loser_name) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select tourney_name from matches group by tourney_name having count(*) > 10",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "Find the names of tourney that has more than 10 competitions.",
        "context": "Find the names of tourney that has more than 10 competitions. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position ",
        "label": "wta_1 | select tourney_name from matches group by tourney_name having count(*) > 10",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select tourney_name from matches group by tourney_name having count(*) > 10",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "What are the names of tournaments that have more than 10 competitions?",
        "context": "What are the names of tournaments that have more than 10 competitions? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select tourney_name from matches group by tourney_name having count(*) > 10",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select winner_name from matches where winner_age = 2013 intersect select winner_name from matches where winner_age = 2016",
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "context": "List the names of all winners who played in both 2013 and 2016. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied",
        "label": "wta_1 | select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select winner_name from matches where winner_age = 2013 intersect select winner_name from matches where winner_age = 2016",
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "What are the names of participants who won in both 2013 and 2016?",
        "context": "What are the names of participants who won in both 2013 and 2016? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position ",
        "label": "wta_1 | select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from matches where year = 2013 or year = 2016;",
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "List the number of all competitions who played in years of 2013 or 2016.",
        "context": "List the number of all competitions who played in years of 2013 or 2016. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select count(*) from matches where year = 2013 or year = 2016",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from matches where year = 2013 or year = 2016",
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "How many competitions were played in 2013 or 2016?",
        "context": "How many competitions were played in 2013 or 2016? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the",
        "label": "wta_1 | select count(*) from matches where year = 2013 or year = 2016",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.country_code, t1.country_code from players as t1 join matches as t2 on t1.player_id = t2.winner_id where tourney_name = \"WTA Championships\" intersect select t1.country_code, t1.country_code from players as t1 join matches as t2 on t1.player_id = t2.winner_id where tourney_name = \"Australian Open\"",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the nation code and given name of the participants who won in both tourney WTA Championships and Australian Open?",
        "context": "What are the nation code and given name of the participants who won in both tourney WTA Championships and Australian Open? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( WTA Championships, Australian Open ), winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank",
        "label": "wta_1 | select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.country_code from players as t1 join matches as t2 on t1.player_id = t2.player_id",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the given names and State codes for participants who won both the WTA Championships and the Australian Open?",
        "context": "What are the given names and State codes for participants who won both the WTA Championships and the Australian Open? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( WTA Championships, Australian Open ), winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of ",
        "label": "wta_1 | select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.first_name, t2.last_name, t1.",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "Find the given name and State abbreviation of the oldest participant.",
        "context": "Find the given name and State abbreviation of the oldest participant. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select first_name, country_code from players order by birth_date limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.country_code, t2.country_code from players as t1 join",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "What is the given name and nation abbreviation of the oldest participant?",
        "context": "What is the given name and nation abbreviation of the oldest participant? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is",
        "label": "wta_1 | select first_name, country_code from players order by birth_date limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select birth_date, birth_date from players order by birth_date",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "List the given and family name of all participants in the order of birth date.",
        "context": "List the given and family name of all participants in the order of birth date. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played;",
        "label": "wta_1 | select first_name, last_name from players order by birth_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, last_name from players order by birth_date",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "What are the full names of all participants, sorted by birth date?",
        "context": "What are the full names of all participants, sorted by birth date? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings",
        "label": "wta_1 | select first_name, last_name from players order by birth_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.last_name from players as t1 join matches as t2 on t1.player_id = t2.loser_id where t1.hand = 'L' order by t1.birth_date",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "List the given and family name of all participants who are left / L hand in the order of birth date.",
        "context": "List the given and family name of all participants who are left / L hand in the order of birth date. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year",
        "label": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, last_name from players where hand = 'left' order by birth_date",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "What are the full names of all left handed participants, in order of birth date?",
        "context": "What are the full names of all left handed participants, in order of birth date? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played",
        "label": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.country_code, t1.country_code from players as",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "Find the given name and nation abbreviation of the participant who did the most number of tours.",
        "context": "Find the given name and nation abbreviation of the participant who did the most number of tours. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played",
        "label": "wta_1 | select t1.country_code, t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.first_name, t2.last_name, t2.country_code from players as t1 join",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "What is the given name and State code of the participant with the most tours?",
        "context": "What is the given name and State code of the participant with the most tours? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is",
        "label": "wta_1 | select t1.country_code, t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select year from matches group by year order by count(*) desc limit 1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year that has the most number of competitions.",
        "context": "Find the year that has the most number of competitions. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in",
        "label": "wta_1 | select year from matches group by year order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select year from matches group by year order by count(*) desc limit 1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year had the most competitions?",
        "context": "Which year had the most competitions? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player ranking.",
        "label": "wta_1 | select year from matches group by year order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.winner_name, t1.winner_rank_points from",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "context": "Find the name and rank points of the winner who won the most times. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select winner_name, winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.winner_name, t1.winner_rank_points from matches as t1 join",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "context": "What is the name of the winner who has won the most matches, and how many rank points does this player have? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the",
        "label": "wta_1 | select winner_name, winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.winner_name, t1.winner_seed from players as t1",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "context": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( Australian Open ), winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in",
        "label": "wta_1 | select winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.winner_name, t1.winner_rank_points from matches as t1 join",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "context": "What is the name of the winner with the most rank points who participated in the Australian Open tournament? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( Australian Open ), winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which",
        "label": "wta_1 | select winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.loser_name, t1.winner_name from matches as t1 join",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "find the names of loser and winner who played in the competition with greatest number of minutes.",
        "context": "find the names of loser and winner who played in the competition with greatest number of minutes. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings",
        "label": "wta_1 | select winner_name, loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.winner_name, t2.loser_name from matches as t1 join",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "What are the names of the winner and loser who played in the longest competition?",
        "context": "What are the names of the winner and loser who played in the longest competition? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking",
        "label": "wta_1 | select winner_name, loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(ranking), t1.first_name, t1.last_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the average ranking for each participant and their given name.",
        "context": "Find the average ranking for each participant and their given name. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in",
        "label": "wta_1 | select avg(ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.first_name, t2.last_name, avg (t1.ranking) from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the given names of all participants, and their average rankings?",
        "context": "What are the given names of all participants, and their average rankings? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position ",
        "label": "wta_1 | select avg(ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select sum(ranking_points), t2.winner_name from rankings as t1 join players as t2",
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the total ranking points for each participant and their given name.",
        "context": "Find the total ranking points for each participant and their given name. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied",
        "label": "wta_1 | select sum(ranking_points), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.first_name, t2.last_name, sum(t1.ranking_points) from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the given names of all participants, and their total ranking points?",
        "context": "What are the given names of all participants, and their total ranking points? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select sum(ranking_points), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*),",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "find the number of participants for each State.",
        "context": "find the number of participants for each State. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player ranking",
        "label": "wta_1 | select count(*), country_code from players group by country_code",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*), country_code from players group by country_code",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "How many participants are from each State?",
        "context": "How many participants are from each State? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player ranking.",
        "label": "wta_1 | select count(*), country_code from players group by country_code",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "find the abbreviation of the State where has the greatest number of participants.",
        "context": "find the abbreviation of the State where has the greatest number of participants. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking",
        "label": "wta_1 | select country_code from players group by country_code order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code from players group by country_code order by count(*) desc limit 1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the abbreviation of the nation with the most participants?",
        "context": "What is the abbreviation of the nation with the most participants? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select country_code from players group by country_code order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code from players group by country_code having count(*) > 50",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "Find the abbreviations of nations that have more than 50 participants.",
        "context": "Find the abbreviations of nations that have more than 50 participants. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select country_code from players group by country_code having count(*) > 50",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code from players group by country_code having count(*) > 50",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "What are the abbreviations of nations with more than 50 participants?",
        "context": "What are the abbreviations of nations with more than 50 participants? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select country_code from players group by country_code having count(*) > 50",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*), ranking_date from rankings group by ranking_date",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "Find the total number of trips for each ranking time.",
        "context": "Find the total number of trips for each ranking time. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the",
        "label": "wta_1 | select sum(tours), ranking_date from rankings group by ranking_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*), t1.rank",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "How many total travels were there for each ranking time?",
        "context": "How many total travels were there for each ranking time? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in",
        "label": "wta_1 | select sum(tours), ranking_date from rankings group by ranking_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*), year from matches group by year",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "Find the number of games happened in each year.",
        "context": "Find the number of games happened in each year. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player",
        "label": "wta_1 | select count(*), year from matches group by year",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*), year from matches group by year",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "How many games were played in each year?",
        "context": "How many games were played in each year? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player ranking",
        "label": "wta_1 | select count(*), year from matches group by year",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select winner_name, winner_rank from matches order by winner_age limit 3",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "Find the name and rank of the 3 youngest winners across all competitions.",
        "context": "Find the name and rank of the 3 youngest winners across all competitions. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select distinct winner_name, winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select winner_name, winner_rank from matches order by winner_age asc limit 3",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "What are the names and ranks of the three youngest winners across all games?",
        "context": "What are the names and ranks of the three youngest winners across all games? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select distinct winner_name, winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(distinct winner_id) from matches where tourney_name = \"WTA Championships\" and winner_rank = \"left handed\"",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "context": "How many different winners both participated in the WTA Championships and were left handed? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( WTA Championships ), winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the",
        "label": "wta_1 | select count(distinct winner_name) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(distinct winner_id) from matches where tourney_name = \"WTA Championships\"",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "context": "Find the number of left handed winners who participated in the WTA Championships. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( WTA Championships ), winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match",
        "label": "wta_1 | select count(distinct winner_name) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank desc limit 1",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "Find the given name, nation abbreviation and birth date of the winner who has the highest rank points in all games.",
        "context": "Find the given name, nation abbreviation and birth date of the winner who has the highest rank points in all games. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year",
        "label": "wta_1 | select t1.first_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.country_code, t1.birth_date from players as t1 join rankings as t2 on t1.player_id = t2.winner_rank",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "What is the given name, nation abbreviation, and birth date of the participant with the most winner rank points across all competitions?",
        "context": "What is the given name, nation abbreviation, and birth date of the participant with the most winner rank points across all competitions? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a",
        "label": "wta_1 | select t1.first_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*), hand from players group by hand",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "Find the number of participants for each hand type.",
        "context": "Find the number of participants for each hand type. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player",
        "label": "wta_1 | select count(*), hand from players group by hand",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select hand, count(*) from players group by hand",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "How many participants are there for each hand type?",
        "context": "How many participants are there for each hand type? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id, ranking_points, tours | description | players: participants of matches. first_name is the given name. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's State code or nation abbreviation; matches: competitions or games in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a winner. year is the year in which the match was played; rankings: ranking is position occupied in the player",
        "label": "wta_1 | select count(*), hand from players group by hand",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "battle_death | select count(*) from ship where disposition_of_ship = 'Captured'",
        "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "question": "How many vessels ended up being 'Captured'?",
        "context": "How many vessels ended up being 'Captured'? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship ( Captured ) | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select count(*) from ship where disposition_of_ship = 'Captured'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select name, tonnage from ship order by tonnage desc",
        "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "context": "List the name and tonnage ordered by in descending alphaetical order for the names. | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select name, tonnage from ship order by name desc",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select name, date, result from battle",
        "query": "SELECT name ,  date FROM battle",
        "question": "List the name, date and result of each battle.",
        "context": "List the name, date and result of each battle. | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select name, date from battle",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select max(t1.killed), min(t2.injured), t2.name from death as t1 join battle as t2",
        "query": "SELECT max(killed) ,  min(killed) FROM death",
        "question": "What is maximum and minimum death toll caused each time?",
        "context": "What is maximum and minimum death toll caused each time? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select max(killed), min(killed) from death",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select count(*), avg(injured) from death group by id",
        "query": "SELECT avg(injured) FROM death",
        "question": "What is the average number of injuries caused each time?",
        "context": "What is the average number of injuries caused each time? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select avg(injured) from death",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select 'Death', 'Injured' from death where caused_by_ship_id = 'Tonnage'",
        "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "question": "What are the death and hurt situations caused by the vessel with tonnage 't'?",
        "context": "What are the death and hurt situations caused by the vessel with tonnage 't'? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select t1.killed, t1.injured from death as t1 join ship as t2 on t1.caused_by_ship_id = t2.id where t2.tonnage = 't'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select name, result from battle where bulgarian_commander!= 'Boril'",
        "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "context": "What are the name and results of the battles when the bulgarian commander is not 'Boril' | battle_death | battle : id, name, date, bulgarian_commander ( Boril ), latin_commander, result | ship : lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select name, result from battle where bulgarian_commander!= 'Boril'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select distinct t2.id, t2.name from ship as t1 join battle as t2 on t1.id = t1.lost_in_battle where t1.ship_type = 'Brig'",
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "question": "What are the different ids and names of the combat that lost any 'Brig' type vessels?",
        "context": "What are the different ids and names of the combat that lost any 'Brig' type vessels? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle, id, name, tonnage, ship_type ( Brig ), location, disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select distinct t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.ship_type = 'Brig'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select id, name from battle where result > 10 group by id having count(*) > 10",
        "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "question": "What are the ids and names of the combat that led to more than 10 people dead in total.",
        "context": "What are the ids and names of the combat that led to more than 10 people dead in total. | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle join death as t3 on t2.id = t3.caused_by_ship_id group by t1.id having sum(t3.killed) > 10",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select t1.id, t1.name from ship as t1 join death as t2 on t1.id = t2.ship_",
        "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the vessel id and name that caused most total injuries?",
        "context": "What is the vessel id and name that caused most total injuries? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select t2.id, t2.name from death as t1 join ship as t2 on t1.caused_by_ship_id = t2.id group by t2.id order by count(*) desc limit 1",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select distinct t1.name from battle as t1 join battle as t2 on t1.id = t2.b",
        "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "question": "What are the distinct combat names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "context": "What are the distinct combat names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? | battle_death | battle : id, name, date, bulgarian_commander ( Kaloyan ), latin_commander ( Baldwin I ), result | ship : lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select count(distinct result) from battle",
        "query": "SELECT count(DISTINCT RESULT) FROM battle",
        "question": "How many different results are there for the combats?",
        "context": "How many different results are there for the combats? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select count(distinct result) from battle",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select count(*) from battle where id not in ( select lost_in_battle from ship where tonnage = 225 );",
        "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "question": "How many combats did not lose any vessel with tonnage '225'?",
        "context": "How many combats did not lose any vessel with tonnage '225'? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select count(*) from battle where id not in ( select lost_in_battle from ship where tonnage = '225' );",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select name, date from battle where t1.id in (select t1.id from battle as t1 join ship as t2 on",
        "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "question": "List the name and date the combat that has lost the vessel named 'Lettice' and the vessel named 'HMS Atalanta'",
        "context": "List the name and date the combat that has lost the vessel named 'Lettice' and the vessel named 'HMS Atalanta' | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle, id, name ( HMS Atalanta, Lettice ), tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select t1.name, t1.date from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.name = 'Lettice' intersect select t1.name, t1.date from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.name = 'HMS Atalanta'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select name, result, bulgarian_commander from battle except select t1.name, t1.result, t1.id from battle as t1 join ship as t2 on t1.ship_",
        "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "question": "Show names, results and bulgarian commanders of the combats with no vessels lost in the 'English Channel'.",
        "context": "Show names, results and bulgarian commanders of the combats with no vessels lost in the 'English Channel'. | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle, id, name, tonnage, ship_type, location ( English Channel ), disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select name, result, bulgarian_commander from battle except select t1.name, t1.result, t1.bulgarian_commander from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.location = 'English Channel'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select note from death where note like '%east%'",
        "query": "SELECT note FROM death WHERE note LIKE '%East%'",
        "question": "What are the remark of the death events which has substring 'East'?",
        "context": "What are the remark of the death events which has substring 'East'? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id, id, note, killed, injured | description | battle: combat between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander. result is the result of the battle; ship: a vessel for transporting people or goods by sea. lost_in_battle is the id of the battle in which the ship lost. ship_id is the id of the vessel. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle, for example 'Captured'; death: records the number of killed and injured people during battles. killed is the number/toll of those killed. injured is the number/toll of those injured;",
        "label": "battle_death | select note from death where note like '%east%'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select address_id from addresses where line_1 = 1 intersect select address_id from addresses where line_2 = 2",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "what are all the addresses including line 1 and line 2?",
        "context": "what are all the addresses including line 1 and line 2? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of",
        "label": "student_transcripts_tracking | select line_1, line_2 from addresses",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.line_1, t2.line_2 from addresses as t1 join addresses as t2 on t1.address_id = t2.address_id",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "What is the first and second line for all addresses?",
        "context": "What is the first and second line for all addresses? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of ",
        "label": "student_transcripts_tracking | select line_1, line_2 from addresses",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(*), t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name",
        "query": "SELECT count(*) FROM Courses",
        "question": "How many curriculums in total are listed?",
        "context": "How many curriculums in total are listed? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country",
        "label": "student_transcripts_tracking | select count(*) from courses",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(*), t1.course_id from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_id",
        "query": "SELECT count(*) FROM Courses",
        "question": "How many curriculums are there?",
        "context": "How many curriculums are there? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country, similar",
        "label": "student_transcripts_tracking | select count(*) from courses",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select course_description from courses where course_name = \"mathachian\"",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "How is the math curriculum described?",
        "context": "How is the math curriculum described? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name ( math ), course_description, other_details | departments : department_id, department_name ( math ), department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that",
        "label": "student_transcripts_tracking | select course_description from courses where course_name ='math'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select course_description from courses where course_name = \"mathachian\"",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "What are the describing content for all the math curriculums?",
        "context": "What are the describing content for all the math curriculums? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name ( math ), course_description, other_details | departments : department_id, department_name ( math ), department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_",
        "label": "student_transcripts_tracking | select course_description from courses where course_name ='math'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select zip_postcode from addresses where city = \"Port Chelsea\"",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code of the position in the city Port Chelsea?",
        "context": "What is the zip code of the position in the city Port Chelsea? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city ( Port Chelsea ), zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county",
        "label": "student_transcripts_tracking | select zip_postcode from addresses where city = 'Port Chelsea'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select zip_postcode from addresses where city = \"Port Chelsea\"",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code for Port Chelsea?",
        "context": "What is the zip code for Port Chelsea? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city ( Port Chelsea ), zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is",
        "label": "student_transcripts_tracking | select zip_postcode from addresses where city = 'Port Chelsea'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.d",
        "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which division offers the most number of degrees? List division name and id.",
        "context": "Which division offers the most number of degrees? List division name and id. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an",
        "label": "student_transcripts_tracking | select t2.department_name, t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.department_name, count(*) from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t2.department_id order by count(*) desc limit 1",
        "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "question": "For each division id, what is the name of the division with the most number of degrees?",
        "context": "For each division id, what is the name of the division with the most number of degrees? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_",
        "label": "student_transcripts_tracking | select t2.department_name, t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(distinct department_id) from degree_programs",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many departments offer any degree?",
        "context": "How many departments offer any degree? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country, similar",
        "label": "student_transcripts_tracking | select count(distinct department_id) from degree_programs",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(distinct department_id) from degree_programs",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many different departments offer degrees?",
        "context": "How many different departments offer degrees? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country, similar",
        "label": "student_transcripts_tracking | select count(distinct department_id) from degree_programs",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(distinct degree_program_id) from degree_programs",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degree names are offered?",
        "context": "How many different degree names are offered? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country,",
        "label": "student_transcripts_tracking | select count(distinct degree_summary_name) from degree_programs",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(distinct degree_program_id) from degree_programs",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degrees are offered?",
        "context": "How many different degrees are offered? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country, similar",
        "label": "student_transcripts_tracking | select count(distinct degree_summary_name) from degree_programs",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(*) from degree_programs where department_id = \"Engineering\"",
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering division offer?",
        "context": "How many degrees does the engineering division offer? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country",
        "label": "student_transcripts_tracking | select count(*) from departments as t1 join degree_programs as t2 on t1.department_id = t2.department_id where t1.department_name = 'engineer'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(*) from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id",
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering department have?",
        "context": "How many degrees does the engineering department have? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country",
        "label": "student_transcripts_tracking | select count(*) from departments as t1 join degree_programs as t2 on t1.department_id = t2.department_id where t1.department_name = 'engineer'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select section_name, section_description from sections",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and describing contents of all the sections?",
        "context": "What are the names and describing contents of all the sections? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part",
        "label": "student_transcripts_tracking | select section_name, section_description from sections",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select section_name, other_details from sections",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and describing details for all the sections?",
        "context": "What are the names and describing details for all the sections? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part",
        "label": "student_transcripts_tracking | select section_name, section_description from sections",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) < 2",
        "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and id of curriculums having at most 2 sections?",
        "context": "What are the names and id of curriculums having at most 2 sections? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an",
        "label": "student_transcripts_tracking | select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) <= 2",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.course_name, t1.course_id from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) < 2",
        "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and ids of every curriculum with less than 2 sections?",
        "context": "What are the names and ids of every curriculum with less than 2 sections? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is",
        "label": "student_transcripts_tracking | select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) <= 2",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select section_name from sections order by section_name desc",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "List the section_name in reversed lexicographical order.",
        "context": "List the section_name in reversed lexicographical order. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is",
        "label": "student_transcripts_tracking | select section_name from sections order by section_name desc",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select section_name from sections order by section_name desc",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "context": "What are the names of the sections in reverse alphabetical order? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part",
        "label": "student_transcripts_tracking | select section_name from sections order by section_name desc",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the academic session which most undergraduate registered in? Show both the name and the id.",
        "context": "What is the academic session which most undergraduate registered in? Show both the name and the id. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_",
        "label": "student_transcripts_tracking | select t1.semester_name, t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.semester_name, t1.student_id from student_enrolment as t1 join semesters as t2 on t1.semester_id = t2.semester_id group by t1.student_id order by count(*) desc limit 1",
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "For each semester, what is the name and id of the one with the most undergraduate registered?",
        "context": "For each semester, what is the name and id of the one with the most undergraduate registered? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_",
        "label": "student_transcripts_tracking | select t1.semester_name, t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the describing details of the division whose name has the substring the computer?",
        "context": "What is the describing details of the division whose name has the substring the computer? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county",
        "label": "student_transcripts_tracking | select department_description from departments where department_name like '%computer%'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select other_details from departments where department_name like '%computer%'",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the division describing details for the one whose name has the word computer?",
        "context": "What is the division describing details for the one whose name has the word computer? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is",
        "label": "student_transcripts_tracking | select department_description from departments where department_name like '%computer%'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.f",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "Who are enrolled in 2 degree programs in one term? List the given name, middle name and family name and the id.",
        "context": "Who are enrolled in 2 degree programs in one term? List the given name, middle name and family name and the id. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city",
        "label": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.last_name, t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) = 2",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.f",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "What are the given, middle, and family names, along with the ids, of all undergraduates who enrolled in 2 degree programs in one term?",
        "context": "What are the given, middle, and family names, along with the ids, of all undergraduates who enrolled in 2 degree programs in one term? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each",
        "label": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.last_name, t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) = 2",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.f",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "Who is enrolled in a Bachelor degree program? List the given name, middle name, family name.",
        "context": "Who is enrolled in a Bachelor degree program? List the given name, middle name, family name. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name ( Bachelor ), degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state",
        "label": "student_transcripts_tracking | select distinct t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Bachelor'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.f",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "What are the given, middle, and family names for everybody enrolled in a Bachelors program?",
        "context": "What are the given, middle, and family names for everybody enrolled in a Bachelors program? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_",
        "label": "student_transcripts_tracking | select distinct t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Bachelor'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select degree_program_id from student_enrolment group by degree_program_id order by count(*) desc limit 1",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "context": "Find the kind of program which most number of students are enrolled in? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that",
        "label": "student_transcripts_tracking | select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.degree_summary_name from student_enrolment as t1 join courses as t2",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "context": "What is the degree summary name that has the most number of students enrolled? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area",
        "label": "student_transcripts_tracking | select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.degree_program_id, t1.semester_id from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "context": "Find the program which most number of students are enrolled in. List both the id and the summary. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_provin",
        "label": "student_transcripts_tracking | select t1.degree_program_id, t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.degree_program_id, t2.degree_summary_name from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id = t2.degree_program_id group by t2.degree_program_id order by count(*) desc limit 1",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "context": "What is the program id and the summary of the degree that has the most students enrolled? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_",
        "label": "student_transcripts_tracking | select t1.degree_program_id, t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.student_id, t1.middle_name, t1.f",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which student has enrolled for the most times in any program? List the id, given name, middle name, family name, the number of enrollments and undergraduate id.",
        "context": "Which student has enrolled for the most times in any program? List the id, given name, middle name, family name, the number of enrollments and undergraduate id. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is ",
        "label": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.last_name, count(*), t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.f",
        "query": "SELECT  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the given, middle, and family name, along with the id and number of enrollments, for the undergraduate who enrolled the most in any program?",
        "context": "What is the given, middle, and family name, along with the id and number of enrollments, for the undergraduate who enrolled the most in any program? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to",
        "label": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.last_name, count(*), t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select course_name from courses where course_id not in (select student_enrolment_id from student_enrolment)",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "Which academic sessions do not have any student enrolled? List the academic session name.",
        "context": "Which academic sessions do not have any student enrolled? List the academic session name. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an",
        "label": "student_transcripts_tracking | select semester_name from semesters where semester_id not in( select semester_id from student_enrolment )",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select course_name from courses where course_id not in (select student_enrolment_id from student_enrolment)",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "What is the name of the academic session with no students enrolled?",
        "context": "What is the name of the academic session with no students enrolled? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is",
        "label": "student_transcripts_tracking | select semester_name from semesters where semester_id not in( select semester_id from student_enrolment )",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are all the course names of the curriculums which ever have students enrolled in?",
        "context": "What are all the course names of the curriculums which ever have students enrolled in? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is",
        "label": "student_transcripts_tracking | select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are the names of all curriculums that have some students enrolled?",
        "context": "What are the names of all curriculums that have some students enrolled? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that",
        "label": "student_transcripts_tracking | select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the name of the curriculum with most number of enrollments?",
        "context": "What's the name of the curriculum with most number of enrollments? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that",
        "label": "student_transcripts_tracking | select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the curriculum with the most students enrolled?",
        "context": "What is the name of the curriculum with the most students enrolled? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is",
        "label": "student_transcripts_tracking | select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.f",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "question": "Find the family name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "context": "Find the family name of the students who currently live in the state of North Carolina but have not registered in any degree program. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_",
        "label": "student_transcripts_tracking | select t1.last_name from students as t1 join addresses as t2 on t1.current_address_id = t2.address_id where t2.state_province_county = 'NorthCarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id = t4.student_id",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t1.state_province_county",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "question": "What are the family name of the students who live in North Carolina but have not registered in any degree programs?",
        "context": "What are the family name of the students who live in North Carolina but have not registered in any degree programs? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province",
        "label": "student_transcripts_tracking | select t1.last_name from students as t1 join addresses as t2 on t1.current_address_id = t2.address_id where t2.state_province_county = 'NorthCarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id = t4.student_id",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.date_first_registered, t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) >= 2",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "question": "Show the date and id of the student record with at least 2 curriculum results.",
        "context": "Show the date and id of the student record with at least 2 curriculum results. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is",
        "label": "student_transcripts_tracking | select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.date_first_registered, t1.student_id from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) >= 2",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "question": "What is the date and id of the student record with at least 2 curriculums listed?",
        "context": "What is the date and id of the student record with at least 2 curriculums listed? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_count",
        "label": "student_transcripts_tracking | select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select cell_mobile_number from students where first_name = \"Timmothy\" and last_name = \"Gard\"",
        "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "question": "What is the phone number of the man with the given name Timmothy and the family name Ward?",
        "context": "What is the phone number of the man with the given name Timmothy and the family name Ward? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name ( Timmothy ), middle_name, last_name ( Ward ), cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street",
        "label": "student_transcripts_tracking | select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select cell_mobile_number from students where first_name = \"T Timothy Ward\" and last_name = \"Garden\"",
        "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "question": "What is the phone number of the student named Timothy Ward?",
        "context": "What is the phone number of the student named Timothy Ward? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name ( Ward ), cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area",
        "label": "student_transcripts_tracking | select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.f",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "Who is the first student to register? List the given name, middle name and family name.",
        "context": "Who is the first student to register? List the given name, middle name and family name. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county",
        "label": "student_transcripts_tracking | select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.f",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "What is the given, middle, and family name of the first student to register?",
        "context": "What is the given, middle, and family name of the first student to register? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an",
        "label": "student_transcripts_tracking | select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.f",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "Who is the earliest graduate of the school? List the given name, middle name and family name.",
        "context": "Who is the earliest graduate of the school? List the given name, middle name and family name. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_",
        "label": "student_transcripts_tracking | select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.f",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "What is the given, middle, and family name of the earliest school graduate?",
        "context": "What is the given, middle, and family name of the earliest school graduate? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an",
        "label": "student_transcripts_tracking | select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.first_name, t2.last_name from addresses as t1 join students as t2 on t1.address_id = t2.address_id",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "Whose permanent address is different from his or her current address? List his or her given name.",
        "context": "Whose permanent address is different from his or her current address? List his or her given name. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_",
        "label": "student_transcripts_tracking | select first_name from students where current_address_id!= permanent_address_id",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select distinct t1.first_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t1.current_address_id = (select permanent_address_id from students group by permanent_address_id)",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "What is the given name of the student whose permanent address is different from his or her current one?",
        "context": "What is the given name of the student whose permanent address is different from his or her current one? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_",
        "label": "student_transcripts_tracking | select first_name from students where current_address_id!= permanent_address_id",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.address_id, t1.line_3 from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.student_id group by t1.address_id order by count(*) desc limit 1",
        "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which place holds the most number of students currently? List the place id and all lines.",
        "context": "Which place holds the most number of students currently? List the place id and all lines. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_count",
        "label": "student_transcripts_tracking | select t1.address_id, t1.line_1, t1.line_2 from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.address_id, t1.line_1, t1.line_2 from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.student_id group by t1.address_id order by count(*) desc limit 1",
        "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "context": "What is the id, line 1, and line 2 of the address with the most students? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_count",
        "label": "student_transcripts_tracking | select t1.address_id, t1.line_1, t1.line_2 from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select avg(date_first_registered) from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id",
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "question": "On average, when were the student record printed?",
        "context": "On average, when were the student record printed? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a",
        "label": "student_transcripts_tracking | select avg(transcript_date) from transcripts",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select avg(date_first_registered) from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id",
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "question": "What is the average student record date?",
        "context": "What is the average student record date? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country,",
        "label": "student_transcripts_tracking | select avg(transcript_date) from transcripts",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select date_first_registered, date_left from students order by date_first_registered asc limit 1",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "When is the first student record released? List the date and details.",
        "context": "When is the first student record released? List the date and details. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is",
        "label": "student_transcripts_tracking | select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select date_left, date_left from transcripts",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "What is the earliest date of a transcript release, and what particulars can you tell me?",
        "context": "What is the earliest date of a transcript release, and what particulars can you tell me? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_",
        "label": "student_transcripts_tracking | select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(*) from student_enrolment",
        "query": "SELECT count(*) FROM Transcripts",
        "question": "How many student record are released?",
        "context": "How many student record are released? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country, similar",
        "label": "student_transcripts_tracking | select count(*) from transcripts",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(*) from student_enrolment",
        "query": "SELECT count(*) FROM Transcripts",
        "question": "How many student records are listed?",
        "context": "How many student records are listed? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country, similar",
        "label": "student_transcripts_tracking | select count(*) from transcripts",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select date_left from students order by date_left desc limit 1",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "What is the last student record release date?",
        "context": "What is the last student record release date? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country",
        "label": "student_transcripts_tracking | select transcript_date from transcripts order by transcript_date desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select last_name from students order by date_first_registered asc limit 1",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "When was the last student record released?",
        "context": "When was the last student record released? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country,",
        "label": "student_transcripts_tracking | select transcript_date from transcripts order by transcript_date desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(*), student_enrolment_id from student_enrolment group by student_enrolment_id order by count(*) desc",
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many times at most can a curriculum enrollment result show in different student records? Also show the curriculum enrollment id.",
        "context": "How many times at most can a curriculum enrollment result show in different student records? Also show the curriculum enrollment id. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state",
        "label": "student_transcripts_tracking | select count(*), student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select max(t1.student_enrolment_id), t1.student_id from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id group by t1.student_enrolment_id",
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the maximum number of times that a curriculum shows up in different student records and what is that curriculum's enrollment id?",
        "context": "What is the maximum number of times that a curriculum shows up in different student records and what is that curriculum's enrollment id? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a",
        "label": "student_transcripts_tracking | select count(*), student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select date_first_registered, date_left, student_id, count(*) from students group by date_left order by count(*) asc limit 1",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Show the date of the student record which shows the least number of results, also list the id.",
        "context": "Show the date of the student record which shows the least number of results, also list the id. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province",
        "label": "student_transcripts_tracking | select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select date_first_registered, date_first_registered, student_id from students group by student_id order by count(*) asc limit 1",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the date and id of the student record with the least number of results?",
        "context": "What is the date and id of the student record with the least number of results? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county",
        "label": "student_transcripts_tracking | select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select semester_id from student_enrolment where degree_program_id = 'Master' intersect select semester_id from student_enrolment where degree_summary_name = 'Bernail' ",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "question": "Find the academic session when both Master students and Bachelor students got enrolled in.",
        "context": "Find the academic session when both Master students and Bachelor students got enrolled in. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name ( Bachelor, Master ), degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_provin",
        "label": "student_transcripts_tracking | select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id where degree_summary_name = 'Master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id where degree_summary_name = 'Bachelor'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select student_enrolment_id from student_enrolment where semester_id = 'MA' intersect select student_enrolment_id from student_enrolment where semester_id = 'Boston'",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "question": "What is the id of the academic session that had both Masters and Bachelors students enrolled?",
        "context": "What is the id of the academic session that had both Masters and Bachelors students enrolled? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_",
        "label": "student_transcripts_tracking | select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id where degree_summary_name = 'Master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id where degree_summary_name = 'Bachelor'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(distinct permanent_address_id) from students",
        "query": "SELECT count(DISTINCT current_address_id) FROM Students",
        "question": "How many different places do the students currently live?",
        "context": "How many different places do the students currently live? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a",
        "label": "student_transcripts_tracking | select count(distinct current_address_id) from students",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(distinct address_id) from addresses",
        "query": "SELECT count(DISTINCT current_address_id) FROM Students",
        "question": "What are the different places that have students living there?",
        "context": "What are the different places that have students living there? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of ",
        "label": "student_transcripts_tracking | select count(distinct current_address_id) from students",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select other_student_details from students order by other_student_details desc",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "List all the student particulars in reversed lexicographical order.",
        "context": "List all the student particulars in reversed lexicographical order. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that",
        "label": "student_transcripts_tracking | select other_student_details from students order by other_student_details desc",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select other_student_details from students order by other_student_details desc",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "What other particulars can you tell me about students in reverse alphabetical order?",
        "context": "What other particulars can you tell me about students in reverse alphabetical order? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area",
        "label": "student_transcripts_tracking | select other_student_details from students order by other_student_details desc",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select section_name from sections where section_description like '%h%'",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "Describe the section h.",
        "context": "Describe the section h. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of a country, similar",
        "label": "student_transcripts_tracking | select section_description from sections where section_name = 'h'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select section_description from sections where section_name = \"h\"",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "What is the description for the section named h?",
        "context": "What is the description for the section named h? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city. state_province_county is an area that is part of ",
        "label": "student_transcripts_tracking | select section_description from sections where section_name = 'h'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join addresses as t3 on t3.address_id = t2.address_id",
        "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
        "question": "Find the given name of the students who permanently live in the country Haiti or have the phone number 09700166582.",
        "context": "Find the given name of the students who permanently live in the country Haiti or have the phone number 09700166582. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country ( Haiti ), other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city",
        "label": "student_transcripts_tracking | select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'Haiti' union select first_name from students where cell_mobile_number = '09700166582'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select distinct t1.first_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t1.",
        "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
        "question": "What are the given names of the students who live in Haiti permanently or have the phone number 09700166582?",
        "context": "What are the given names of the students who live in Haiti permanently or have the phone number 09700166582? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country ( Haiti ), other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id, semester_id, student_id, other_details | student_enrolment_courses : student_course_id, course_id, student_enrolment_id | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id, transcript_id | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which contain information about the street, number, building, apartments. zip_postcode is a number assigned to each street address in a city",
        "label": "student_transcripts_tracking | select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'Haiti' union select first_name from students where cell_mobile_number = '09700166582'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "tvshow | select title from cartoon order by title",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "List the name of all animations in alphabetical order.",
        "context": "List the name of all animations in alphabetical order. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select title from cartoon order by title",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select title from cartoon order by title",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "What are the names of the animations sorted alphabetically?",
        "context": "What are the names of the animations sorted alphabetically? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select title from cartoon order by title",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select title from cartoon where directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "List all animation directed by \"Ben Jones\".",
        "context": "List all animation directed by \"Ben Jones\". | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select title from cartoon where directed_by = \"Ben Jones\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select title from cartoon where directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "What are the names of all animations directed by Ben Jones?",
        "context": "What are the names of all animations directed by Ben Jones? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select title from cartoon where directed_by = \"Ben Jones\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select count(*) from cartoon where written_by = \"Joseph Kuhr\"",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "How many animations were written by \"Joseph Kuhr\"?",
        "context": "How many animations were written by \"Joseph Kuhr\"? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by ( Joseph Kuhr ), original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select count(*) from cartoon where written_by = \"Joseph Kuhr\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select count(*) from cartoon where written_by = \"Joseph Kuhr\"",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "What is the number of animations written by Joseph Kuhr?",
        "context": "What is the number of animations written by Joseph Kuhr? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by ( Joseph Kuhr ), original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select count(*) from cartoon where written_by = \"Joseph Kuhr\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.title, t1.directed_by from cartoon as t1 join tv_series as t2 on t1.id = t2.",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "list all animation and their directors ordered by their airdate",
        "context": "list all animation and their directors ordered by their airdate | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select title, directed_by from cartoon order by original_air_date",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t2.title, t2.directed_by from cartoon as t1 join tv",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "What is the name and directors of all the animation that are ordered by released date?",
        "context": "What is the name and directors of all the animation that are ordered by released date? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select title, directed_by from cartoon order by original_air_date",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "List the name of all animation directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "context": "List the name of all animation directed by \"Ben Jones\" or \"Brandon Vietti\". | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by ( Brandon Vietti, Ben Jones ), written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "What are the names of all animation directed by Ben Jones or Brandon Vietti?",
        "context": "What are the names of all animation directed by Ben Jones or Brandon Vietti? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by ( Brandon Vietti, Ben Jones ), written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select country, count(*) from tv_channel group by country order by count(*) desc limit 1",
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which country has the most of TV Channels? List the country name and number of TV Channels it has.",
        "context": "Which country has the most of TV Channels? List the country name and number of TV Channels it has. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select country, count(*) from tv_channel group by country order by count(*) desc limit 1;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select country, count(*) from tv_channel group by country order by count(*) desc limit 1",
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the State with the most number of TV Channels and how many does it have?",
        "context": "What is the State with the most number of TV Channels and how many does it have? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select country, count(*) from tv_channel group by country order by count(*) desc limit 1;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select count(distinct series_name), content from tv_channel",
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "question": "List the number of different serial names and contents in the TV Channel table.",
        "context": "List the number of different serial names and contents in the TV Channel table. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select count(distinct series_name), count(distinct content) from tv_channel;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select count(distinct t1.series_name), t1.content from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.hight_definition_tv = \"High\"",
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "question": "How many different serial and contents are listed in the TV Channel table?",
        "context": "How many different serial and contents are listed in the TV Channel table? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select count(distinct series_name), count(distinct content) from tv_channel;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select content from tv_channel where series_name = \"Sky Radio\"",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "context": "What is the content of TV Channel with serial name \"Sky Radio\"? | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select content from tv_channel where series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select content from tv_channel where series_name = 'City Radio'",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of the series Sky Radio?",
        "context": "What is the content of the series Sky Radio? | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select content from tv_channel where series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select package_option from tv_channel where series_name = \"Sky Radio\"",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "context": "What is the Package Option of TV Channel with serial name \"Sky Radio\"? | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select package_option from tv_channel where series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select package_option from tv_channel where series_name = 'City Radio'",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "context": "What are the Package Options of the TV Channels whose series names are Sky Radio? | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select package_option from tv_channel where series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select count(*) from tv_channel where language = 'English'",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channel using language English?",
        "context": "How many TV Channel using language English? | tvshow | tv_channel : id, series_name, country, language ( English ), content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select count(*) from tv_channel where language = \"English\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select count(*) from tv_channel where language = \"English\"",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channels use the English language?",
        "context": "How many TV Channels use the English language? | tvshow | tv_channel : id, series_name, country, language ( English ), content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select count(*) from tv_channel where language = \"English\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select language, count(*) from tv_channel group by language order by count(*) asc limit 1",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "context": "List the language used least number of TV Channel. List language and number of TV Channel. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select language, count(*) from tv_channel group by language order by count(*) asc limit 1;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select language, count(*) from tv_channel group by language order by count(*) asc limit 1",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "context": "What are the languages used by the least number of TV Channels and how many channels use it? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select language, count(*) from tv_channel group by language order by count(*) asc limit 1;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select language, count(*) from tv_channel group by language",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "List each language and the number of TV Channels using it.",
        "context": "List each language and the number of TV Channels using it. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select language, count(*) from tv_channel group by language",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select language, count(*) from tv_channel group by language",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "For each language, list the number of TV Channels that use it.",
        "context": "For each language, list the number of TV Channels that use it. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select language, count(*) from tv_channel group by language",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"The rise of the blue betle!\"",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "context": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title ( The Rise of the Blue Beetle! ), directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the",
        "label": "tvshow | select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"The rise of the blue beetle!\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"The Rise of the blue Beetle\"",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "question": "What is the serial name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "context": "What is the serial name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title ( The Rise of the Blue Beetle! ), directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"The rise of the blue beetle!\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select distinct t1.title from cartoon as t1 join tv_channel as t2 on t1.id = t2.",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the name of all  animations showed on TV Channel with series name \"Sky Radio\".",
        "context": "List the name of all animations showed on TV Channel with series name \"Sky Radio\". | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select distinct t1.title from cartoon as t1 join tv_channel as t2 on t1.id = t2.",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "What is the name of all the animations that are on the TV Channel with the series name \"Sky Radio\"?",
        "context": "What is the name of all the animations that are on the TV Channel with the series name \"Sky Radio\"? | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select episode from tv_series order by rating",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "List the Episode of all TV series sorted by rating.",
        "context": "List the Episode of all TV series sorted by rating. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select episode from tv_series order by rating",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select episode from tv_series order by rating",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "What are all of the episodes ordered by ratings?",
        "context": "What are all of the episodes ordered by ratings? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select episode from tv_series order by rating",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select episode, max(t1.rating) from tv_series as t1 join tv_series as t2 on t1.id = t2.series",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "List top 3 highest score  TV series. List the TV series's Episode and score.",
        "context": "List top 3 highest score TV series. List the TV series's Episode and score. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select episode, rating from tv_series order by rating desc limit 3;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select episode, rating from tv_series group by rating order by count(*) desc limit 3",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those scores?",
        "context": "What are 3 most highly rated episodes in the TV series table and what were those scores? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select episode, rating from tv_series order by rating desc limit 3;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select min(share), max(share) from tv_series",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is minimum and maximum share of TV series?",
        "context": "What is minimum and maximum share of TV series? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select max(share), min(share) from tv_series;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select max(share), min(share) from tv_series",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is the maximum and minimum share for the TV series?",
        "context": "What is the maximum and minimum share for the TV series? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select max(share), min(share) from tv_series;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select air_date from tv_series where episode = \"A love of a Lifetime\"",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the airdate of TV series with Episode \"A Love of a Lifetime\"?",
        "context": "What is the airdate of TV series with Episode \"A Love of a Lifetime\"? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select air_date from tv_series where episode = \"A love of a Lifetime\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select 'Falls' from tv_series where episode = \"A love of a Lifetime\"",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "When did the episode \"A Love of a Lifetime\" released?",
        "context": "When did the episode \"A Love of a Lifetime\" released? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select air_date from tv_series where episode = \"A love of a Lifetime\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select weekly_rank from tv_series where episode = \"A love of a Lifetime\"",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "context": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select weekly_rank from tv_series where episode = \"A love of a Lifetime\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select weekly_rank, t2.rating from tv_series as t1 join",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the score per week for the episode \"A Love of a Lifetime\"?",
        "context": "What is the score per week for the episode \"A Love of a Lifetime\"? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select weekly_rank from tv_series where episode = \"A love of a Lifetime\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t2.channel from tv_series as t1 join tv",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "question": "What is the TV Channel of TV serial with Episode \"A Love of a Lifetime\"? List the TV Channel's serial name.",
        "context": "What is the TV Channel of TV serial with Episode \"A Love of a Lifetime\"? List the TV Channel's serial name. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"A love of a Lifetime\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select tv_series.series_name from tv_series as t1 join tv_series as t2 on t1.id = t2.series",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "question": "What is the serial name that has the episode \"A Love of a Lifetime\"?",
        "context": "What is the serial name that has the episode \"A Love of a Lifetime\"? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"A love of a Lifetime\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select episode from tv_series",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "context": "List the Episode of all TV series showed on TV Channel with series name \"Sky Radio\". | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select episode from tv_series",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "context": "What is the episode for the TV series named \"Sky Radio\"? | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select directed_by, count(*) from cartoon group by directed_by",
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "Find the number of animations directed by each of the listed directors.",
        "context": "Find the number of animations directed by each of the listed directors. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select count(*), directed_by from cartoon group by directed_by",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.title, count(*) from cartoon as t1 join tv_series as t2 on t1.id = t2.directed_by",
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "How many animations did each director create?",
        "context": "How many animations did each director create? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select count(*), directed_by from cartoon group by directed_by",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.production_code, t1.channel from cartoon as t1 join tv_channel as t2 on t1.id = t2.channel",
        "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "question": "Find the production number and channel of the most recently released cartoon.",
        "context": "Find the production number and channel of the most recently released cartoon. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select production_code, channel from cartoon order by original_air_date limit 1",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.channel, t1.id from cartoon as t1 join tv_channel as t2 on t1.id = t2.channel",
        "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "question": "What is the produdction number and channel of the most recent cartoon?",
        "context": "What is the produdction number and channel of the most recent cartoon? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select production_code, channel from cartoon order by original_air_date limit 1",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select package_option, t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.hight_definition_tv = 'HD'",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "question": "Find the package choice and serial name of the TV channel that has HD TV.",
        "context": "Find the package choice and serial name of the TV channel that has HD TV. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select package_option, t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.hight_definition_tv = 'HD'",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "question": "What are the package options and the name of the serial for the TV Channel that supports HD TV?",
        "context": "What are the package options and the name of the serial for the TV Channel that supports HD TV? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select country from tv_channel where written_by = 'Tony Casey",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "which countries' tv channels are playing some animation written by Todd Casey?",
        "context": "which countries' tv channels are playing some animation written by Todd Casey? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by ( Todd Casey ), original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select country from tv_channel as t1 join cartoon as t2 on t2.directed_by = t1.id where t2.written_by = \"Tony Casey\"",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "What are the State that have animations on TV that were written by Todd Casey?",
        "context": "What are the State that have animations on TV that were written by Todd Casey? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by ( Todd Casey ), original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select country from tv_channel where id not in (select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.directed_by where t2.written_by = \"Tony Casey\")",
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "which countries' tv channels are not playing any animation written by Todd Casey?",
        "context": "which countries' tv channels are not playing any animation written by Todd Casey? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by ( Todd Casey ), original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.directed_by where t2.written_by = \"Tony Casey\"",
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "What are the States that are not playing animations written by Todd Casey?",
        "context": "What are the States that are not playing animations written by Todd Casey? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by ( Todd Casey ), original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.directed_by where t2.directed_by = 'Ben Jones' intersect select t1.series_name, t",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "question": "Find the serial name and State of the tv channel that is playing some animation directed by Ben Jones and Michael Chang?",
        "context": "Find the serial name and State of the tv channel that is playing some animation directed by Ben Jones and Michael Chang? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by ( Michael Chang, Ben Jones ), written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Michael Chang' intersect select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Ben Jones'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.series_name, t1.country from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "question": "What is the serial name and nation of all TV channels that are playing animations directed by Ben Jones and animations directed by Michael Chang?",
        "context": "What is the serial name and nation of all TV channels that are playing animations directed by Ben Jones and animations directed by Michael Chang? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by ( Michael Chang, Ben Jones ), written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Michael Chang' intersect select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Ben Jones'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select pixel_aspect_ratio_par, country from tv_channel where language!= 'English'",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "context": "find the pixel aspect ratio and nation of the tv channels that do not use English. | tvshow | tv_channel : id, series_name, country, language ( English ), content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select pixel_aspect_ratio_par, country from tv_channel where language!= 'English'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select pixel_aspect_ratio_par, country from tv_channel where language!= 'English'",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "What is the pixel aspect ratio and nation of origin for all TV channels that do not use English?",
        "context": "What is the pixel aspect ratio and nation of origin for all TV channels that do not use English? | tvshow | tv_channel : id, series_name, country, language ( English ), content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select pixel_aspect_ratio_par, country from tv_channel where language!= 'English'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select id from tv_channel where country = \"USA\" group by id having count(*) > 2",
        "query": "SELECT id FROM tv_channel where country in(select country from tv_channel GROUP BY country HAVING count(*)  >  2)",
        "question": "find id of the tv channels that from the States where have more than two tv channels.",
        "context": "find id of the tv channels that from the States where have more than two tv channels. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select id from tv_channel where country in(select country from tv_channel group by country having count(*) > 2)",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select id from tv_channel where hight_definition_tv > 2",
        "query": "SELECT id FROM tv_channel where country in(select country from tv_channel GROUP BY country HAVING count(*)  >  2)",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "context": "What are the ids of all tv channels that have more than 2 TV channels? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select id from tv_channel where country in(select country from tv_channel group by country having count(*) > 2)",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select id from tv_channel except select t1.id from tv_channel as t1 join cartoon as t2 on t1.id = t2.directed_by where t2.directed_by = \"Ben Jones\"",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "question": "find the id of tv channels that do not play any animation directed by Ben Jones.",
        "context": "find the id of tv channels that do not play any animation directed by Ben Jones. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.id from tv_channel as t1 join cartoon as t2 on t1.id = t2.directed_by where t2.directed_by = \"Ben Jones\"",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "question": "What are the ids of the TV channels that do not have any animations directed by Ben Jones?",
        "context": "What are the ids of the TV channels that do not have any animations directed by Ben Jones? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select package_option from tv_channel except select t1.package_option from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = \"Ben Jones\"",
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "find the package option of the tv channel that do not have any animation directed by Ben Jones.",
        "context": "find the package option of the tv channel that do not have any animation directed by Ben Jones. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select package_option from tv_channel where id not in (select channel from cartoon where directed_by = 'Ben Jones')",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select package_option from tv_channel where t2.directed_by!= \"Nancy\" and ",
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "What are the package options of all tv channels that are not playing any animations directed by Ben Jones?",
        "context": "What are the package options of all tv channels that are not playing any animations directed by Ben Jones? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel | cartoon : id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel | description | tv_channel: is a physical or virtual channel over which a television station or television network is distributed. series_name is the name of the program. country is the state where the tv channel is broadcasted. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv gives viewers the ability to pay to watch paid video content. pay_per_view_ppv can be 'no' or 'yes'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. rating is the score number given to a tv show. share is the number people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. title is the name of the cartoon or animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the release date of an animation as datetime. channel is the number of the channel;",
        "label": "tvshow | select package_option from tv_channel where id not in (select channel from cartoon where directed_by = 'Ben Jones')",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "poker_player | select count(*) from poker_player",
        "query": "SELECT count(*) FROM poker_player",
        "question": "How many car gamers are there?",
        "context": "How many car gamers are there? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select count(*) from poker_player",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select count(*) from poker_player",
        "query": "SELECT count(*) FROM poker_player",
        "question": "Count the number of car gamers.",
        "context": "Count the number of car gamers. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select count(*) from poker_player",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select earnings from poker_player order by earnings desc",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "List the earnings of poker players in descending order.",
        "context": "List the earnings of poker players in descending order. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select earnings from poker_player order by earnings desc",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select earnings from poker_player order by earnings desc",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "context": "What are the earnings of poker players, ordered descending by value? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select earnings from poker_player order by earnings desc",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select final_table_made, best_finish from poker_player",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "List the final tables made and the best finishes of car gamers.",
        "context": "List the final tables made and the best finishes of car gamers. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select final_table_made, best_finish from poker_player",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select final_table_made, best_finish from poker_player",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "What are the final tables made and best finishes for all car gamers?",
        "context": "What are the final tables made and best finishes for all car gamers? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select final_table_made, best_finish from poker_player",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t1.money_rank from poker_player as t1 join poker_player as t2 on t1.poker_player_id = t2.poker_player_id group by t2.poker_player_id",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "question": "What is the average revenues of car gamers?",
        "context": "What is the average revenues of car gamers? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select avg(earnings) from poker_player",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select avg(e",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "question": "Return the average incomes across all car gamers.",
        "context": "Return the average incomes across all car gamers. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select avg(earnings) from poker_player",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select money_rank from poker_player order by earnings desc limit 1",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "What is the money rank of the car gamer with the highest incomes?",
        "context": "What is the money rank of the car gamer with the highest incomes? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select money_rank from poker_player order by earnings desc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select money_rank from poker_player order by earnings desc limit 1",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "Return the money rank of the gamer with the greatest revenues.",
        "context": "Return the money rank of the gamer with the greatest revenues. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select money_rank from poker_player order by earnings desc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select max(t2.final_table_made) from poker_player as t1 join",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "What is the maximum number of last tables made among car gamers with revenues less than 200000?",
        "context": "What is the maximum number of last tables made among car gamers with revenues less than 200000? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select max(final_table_made) from poker_player where earnings < 200000",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select max(final_table_made) from poker_player where earnings < 200000",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "Return the maximum final tables made across all car gamers who have revenues below 200000.",
        "context": "Return the maximum final tables made across all car gamers who have revenues below 200000. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select max(final_table_made) from poker_player where earnings < 200000",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "What are the names of car gamers?",
        "context": "What are the names of car gamers? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "Return the names of all the car gamers.",
        "context": "Return the names of all the car gamers. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where money_rank > 300000",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "What are the names of car gamers whose incomes is higher than 300000?",
        "context": "What are the names of car gamers whose incomes is higher than 300000? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t2.earnings > 300000",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where money_rank > 300000",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "Give the names of car gamers who have revenues above 300000.",
        "context": "Give the names of car gamers who have revenues above 300000. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t2.earnings > 300000",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.final_table_made asc",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "List the names of car gamers ordered by the final tables made in ascending order.",
        "context": "List the names of car gamers ordered by the final tables made in ascending order. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.final_table_made",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.final_table_made asc",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "What are the names of car gamers, ordered ascending by the number of final tables they have made?",
        "context": "What are the names of car gamers, ordered ascending by the number of final tables they have made? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.final_table_made",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select 'birth_date' from poker_player order by earnings asc limit 1",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "What is the birth date of the car gamers with the lowest revenues?",
        "context": "What is the birth date of the car gamers with the lowest revenues? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings asc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money_rank limit 1",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "Return the birth date of the car gamers with the lowest revenues.",
        "context": "Return the birth date of the car gamers with the lowest revenues. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings asc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t1.money_rank from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "What is the money rank of the tallest car gamer?",
        "context": "What is the money rank of the tallest car gamer? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t1.height desc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t1.money_rank from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "Return the money rank of the car gamer with the greatest height.",
        "context": "Return the money rank of the car gamer with the greatest height. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t1.height desc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select avg(t1.e",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "question": "What is the average revenues of car gamers with height higher than 200?",
        "context": "What is the average revenues of car gamers with height higher than 200? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t1.height > 200",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select avg(t1.e",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "question": "Give average revenues of car gamers who are taller than 200.",
        "context": "Give average revenues of car gamers who are taller than 200. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t1.height > 200",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.e",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "What are the names of car gamers in descending order of revenues?",
        "context": "What are the names of car gamers in descending order of revenues? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings desc",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.e",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "Return the names of car gamers sorted by their revenues descending.",
        "context": "Return the names of car gamers sorted by their revenues descending. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings desc",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select nationality, count(*) from people group by nationality",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "What are different country of people and the corresponding number of people from each country?",
        "context": "What are different country of people and the corresponding number of people from each country? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select nationality, count(*) from people group by nationality",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select nationality, count(*) from people group by nationality",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "How many people are there of each country?",
        "context": "How many people are there of each country? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select nationality, count(*) from people group by nationality",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select nationality from people group by nationality order by count(*) desc limit 1",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common country of people?",
        "context": "What is the most common country of people? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select nationality from people group by nationality order by count(*) desc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select nationality from people group by nationality order by count(*) desc limit 1",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the country that is most common across all people.",
        "context": "Give the country that is most common across all people. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select nationality from people group by nationality order by count(*) desc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select nationality from people group by nationality having count(*) >= 2",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "What are the countries that are shared by at least two people?",
        "context": "What are the countries that are shared by at least two people? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select nationality from people group by nationality having count(*) >= 2",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select nationality from people group by nationality having count(*) >= 2",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "Return the countries for which there are two or more people.",
        "context": "Return the countries for which there are two or more people. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select nationality from people group by nationality having count(*) >= 2",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select name, birth_date from people order by name asc",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "context": "List the names and birth dates of people in ascending alphabetical order of name. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select name, birth_date from people order by name asc",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select name, birth_date from people order by name asc",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "context": "What are the names and birth dates of people, ordered by their names in alphabetical order? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select name, birth_date from people order by name asc",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select name from people where nationality!= \"Russia\"",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "context": "Show names of people whose nationality is not \"Russia\". | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality ( Russia ), name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select name from people where nationality!= \"Russia\"",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select name from people where nationality!= \"Russia\"",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "What are the names of people who are not from Russia?",
        "context": "What are the names of people who are not from Russia? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality ( Russia ), name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select name from people where nationality!= \"Russia\"",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select name from people where people_id not in (select people_id from poker_player)",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "List the names of people that are not car gamers.",
        "context": "List the names of people that are not car gamers. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select name from people where people_id not in (select people_id from poker_player)",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select name from people except select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "What are the names of people who do not car gamer?",
        "context": "What are the names of people who do not car gamer? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select name from people where people_id not in (select people_id from poker_player)",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select count(distinct nationality) from people",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "question": "How many distinct countries are there?",
        "context": "How many distinct countries are there? | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select count(distinct nationality) from people",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select count(distinct nationality) from people",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "question": "Count the number of different countries.",
        "context": "Count the number of different countries. | poker_player | poker_player : poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: car gamer. final_table_made is the players who made it for the final table. earnings is the revenue of car gamer; people: anyone can be a poker player. name is names of people. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. 'height' is the height of the poker player;",
        "label": "poker_player | select count(distinct nationality) from people",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "voter_1 | select count(distinct state) from area_code_state",
        "query": "SELECT count(*) FROM area_code_state",
        "question": "How many states are there?",
        "context": "How many states are there? | voter_1 | area_code_state : area_code, state | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state, contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select count(*) from area_code_state",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select contestant_number, contestant_name from contestants order by contestant_name desc",
        "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "question": "List the competitor numbers and names, ordered by competitor name descending.",
        "context": "List the competitor numbers and names, ordered by competitor name descending. | voter_1 | area_code_state : area_code, state | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state, contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select contestant_number, contestant_name from contestants order by contestant_name desc",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select vote_id, phone_number, state from votes",
        "query": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "question": "List the vote ids, telephone numbers and states of all votes.",
        "context": "List the vote ids, telephone numbers and states of all votes. | voter_1 | area_code_state : area_code, state | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state, contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select vote_id, phone_number, state from votes",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select max(area_code), min(area_code) from area_code_state",
        "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "question": "What are the maximum and minimum values of area codes?",
        "context": "What are the maximum and minimum values of area codes? | voter_1 | area_code_state : area_code, state | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state, contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select max(area_code), min(area_code) from area_code_state",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select created from votes where state = 'CA'",
        "query": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "question": "What is last date created of votes from the state 'CA'?",
        "context": "What is last date created of votes from the state 'CA'? | voter_1 | area_code_state : area_code, state ( CA ) | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state ( CA ), contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select max(created) from votes where state = 'CA'",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select contestant_name from contestants where contestant_name!= \"Jessie Alloway\"",
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "question": "What are the names of the participants whose names are not 'Jessie Alloway'",
        "context": "What are the names of the participants whose names are not 'Jessie Alloway' | voter_1 | area_code_state : area_code, state | contestants : contestant_number, contestant_name ( Jessie Alloway ) | votes : vote_id, phone_number, state, contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select contestant_name from contestants where contestant_name!= 'Jessie Alloway'",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select distinct t1.state, t1.created from votes as t1 join area_code_state as t2 on t1.state = t2.state",
        "query": "SELECT DISTINCT state ,  created FROM votes",
        "question": "What are the distinct states and set up time of all votes?",
        "context": "What are the distinct states and set up time of all votes? | voter_1 | area_code_state : area_code, state | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state, contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select distinct state, created from votes",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number having count(*) >= 2",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "question": "What are the participant numbers and names of the participants who had at least two votes?",
        "context": "What are the participant numbers and names of the participants who had at least two votes? | voter_1 | area_code_state : area_code, state | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state, contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number having count(*) >= 2",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number order by count(*) asc limit 1",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "question": "Of all the competitors who got voted, what is the competitor number and name of the competitor who got least votes?",
        "context": "Of all the competitors who got voted, what is the competitor number and name of the competitor who got least votes? | voter_1 | area_code_state : area_code, state | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state, contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number order by count(*) asc limit 1",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select count(*) from votes where state = 'NY' or state = 'CA'",
        "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "question": "What are the number of votes from nation 'NY' or 'CA'?",
        "context": "What are the number of votes from nation 'NY' or 'CA'? | voter_1 | area_code_state : area_code, state ( CA, NY ) | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state ( NY, CA ), contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select count(*) from votes where state = 'NY' or state = 'CA'",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select count(*) from contestants where contestant_number not in (select contestant_number from votes)",
        "query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "question": "How many competitors did not get voted?",
        "context": "How many competitors did not get voted? | voter_1 | area_code_state : area_code, state | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state, contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select count(*) from contestants where contestant_number not in ( select contestant_number from votes )",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select count(*) from votes group by state order by count(*) desc limit 1",
        "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the area number in which the most voters voted?",
        "context": "What is the area number in which the most voters voted? | voter_1 | area_code_state : area_code, state | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state, contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select t1.area_code from area_code_state as t1 join votes as t2 on t1.state = t2.state group by t1.area_code order by count(*) desc limit 1",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select t1.created, t1.state, t1.phone_number from votes as t1 join contestants as t2 on t1.contestant_number = t2.contestant_number where t2.contestant_name = 'Tabatha Gehling'",
        "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "question": "What are the set up dates, states, and telephone numbers of the votes that were for the competitor named 'Tabatha Gehling'?",
        "context": "What are the set up dates, states, and telephone numbers of the votes that were for the competitor named 'Tabatha Gehling'? | voter_1 | area_code_state : area_code, state | contestants : contestant_number, contestant_name ( Tabatha Gehling ) | votes : vote_id, phone_number, state, contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select t2.created, t2.state, t2.phone_number from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number where t1.contestant_name = 'Tabatha Gehling'",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select t1.state from votes as t1 join area_code_state as t2 on t1.state = t2.area_code join contestants as t3 on t1.contestant_number = t3.contestant_number where t3.contestant_name = 'Tabatha Gehling' intersect select t1.state from votes as t1 join area_code_state as t2 on t1.state = t2.",
        "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "question": "List the area codes in which voters voted both for the participant 'Tabatha Gehling' and the participant 'Kelly Clauss'.",
        "context": "List the area codes in which voters voted both for the participant 'Tabatha Gehling' and the participant 'Kelly Clauss'. | voter_1 | area_code_state : area_code, state | contestants : contestant_number, contestant_name ( Tabatha Gehling, Kelly Clauss ) | votes : vote_id, phone_number, state, contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number join area_code_state as t3 on t2.state = t3.state where t1.contestant_name = 'Tabatha Gehling' intersect select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number join area_code_state as t3 on t2.state = t3.state where t1.contestant_name = 'Kelly Clauss'",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select contestant_name from contestants where contestant_name like '%al%'",
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name LIKE \"%Al%\"",
        "question": "Return the names the competitors whose names contain the substring 'Al'.",
        "context": "Return the names the competitors whose names contain the substring 'Al'. | voter_1 | area_code_state : area_code, state ( AL ) | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state, contestant_number, created | description | area_code_state: is a two letters code associated with each state; contestants: competitors or participant. contestant_number number of competitors. contestant_name name of the participant or contestant; votes: are formal indications of a choice between two or more candidates. created is the set up date as datetime;",
        "label": "voter_1 | select contestant_name from contestants where contestant_name like \"%al%\"",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where indepyear > 1950",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "question": "What are the names of all the States that became sovereign after 1950?",
        "context": "What are the names of all the States that became sovereign after 1950? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country where indepyear > 1950",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where indepyear > 1950",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "question": "Give the names of the nations that were founded after 1950.",
        "context": "Give the names of the nations that were founded after 1950. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country where indepyear > 1950",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from country where governmentform = 'Republik'",
        "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "question": "How many nations have a republic as their form of government?",
        "context": "How many nations have a republic as their form of government? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(*) from country where governmentform = \"Republic\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from country where governmentform = 'Republik'",
        "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "question": "How many nations have governments that are republics?",
        "context": "How many nations have governments that are republics? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(*) from country where governmentform = \"Republic\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(t2.surfacearea) from country as t1 join country as t2 on",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "What is the total territory of the State in the Caribbean region?",
        "context": "What is the total territory of the State in the Caribbean region? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(surfacearea) from country where region = \"Caribbean\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(t2.surfacearea) from country as t1 join country as t2 on t1.countrycode",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "How much territory do the countires in the Caribbean cover together?",
        "context": "How much territory do the countires in the Caribbean cover together? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(surfacearea) from country where region = \"Caribbean\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select continent from country where name = 'Anguilla'",
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "Which continent is Anguilla in?",
        "context": "Which continent is Anguilla in? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name ( Anguilla ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Anguilla ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select continent from country where name = \"Anguilla\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select continent from country where name = 'Anguilla'",
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "What is the continent name which Anguilla belongs to?",
        "context": "What is the continent name which Anguilla belongs to? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name ( Anguilla ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Anguilla ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select continent from country where name = \"Anguilla\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select region from country where name = 'Kayakul'",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "Which region is the city Kabul located in?",
        "context": "Which region is the city Kabul located in? | world_1 | city : id, name ( Kabul ), countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select region from country as t1 join city as t2 on t1.code = t2.countrycode where t2.name = \"Kabul\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select region from country where name = 'Kayakul'",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "What region is Kabul in?",
        "context": "What region is Kabul in? | world_1 | city : id, name ( Kabul ), countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select region from country as t1 join city as t2 on t1.code = t2.countrycode where t2.name = \"Kabul\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select language, count(*) from country as t1 join countrylanguage as t2 on t2.language = t2.language where t1.name = \"Aruba\" group by t2.language order by count(*) desc limit 1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "Which language is the most popular in Aruba?",
        "context": "Which language is the most popular in Aruba? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\" order by percentage desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.countrycode",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "What language is predominantly spoken in Aruba?",
        "context": "What language is predominantly spoken in Aruba? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\" order by percentage desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select population, lifeexpectancy from country where name = 'Brazil'",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "question": "What are the population and lifespan in Brazil?",
        "context": "What are the population and lifespan in Brazil? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select population, lifeexpectancy from country where name = \"Brazil\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select population, lifeexpectancy from country where name = 'Brazil'",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "question": "Give me Brazil's population and lifespan.",
        "context": "Give me Brazil's population and lifespan. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select population, lifeexpectancy from country where name = \"Brazil\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select region, population from country where name = 'Anggola'",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "question": "What are the region and number of people of Angola?",
        "context": "What are the region and number of people of Angola? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name ( Angola ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Angola ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select population, region from country where name = \"Angola\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select region, population from country where name = 'Anggola'",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "question": "What region does Angola belong to and what is its number of residents?",
        "context": "What region does Angola belong to and what is its number of residents? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name ( Angola ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Angola ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select population, region from country where name = \"Angola\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(lifeexpectancy) from country where region = 'Central Africa'",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "question": "What is the average lifespan for countries in the region of Central Africa?",
        "context": "What is the average lifespan for countries in the region of Central Africa? | world_1 | city : id, name, countrycode, district ( Central ), population | sqlite_sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select avg(lifeexpectancy) from country where region = \"Central Africa\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(lifeexpectancy) from country where region = 'Central Africa'",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "question": "How long is the people\u2019s average lifespan in Central Africa?",
        "context": "How long is the people\u2019s average lifespan in Central Africa? | world_1 | city : id, name, countrycode, district ( Central ), population | sqlite_sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select avg(lifeexpectancy) from country where region = \"Central Africa\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country order by lifeexpectancy asc limit 1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "What is the name of nation that has the shortest lifespan in Asia?",
        "context": "What is the name of nation that has the shortest lifespan in Asia? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country where continent = \"Asia\" order by lifeexpectancy limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where continent = 'Asie' order by lifeexpectancy limit 1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "Give the name of the State in Asia with the lowest lifespan.",
        "context": "Give the name of the State in Asia with the lowest lifespan. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country where continent = \"Asia\" order by lifeexpectancy limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(gnp), max(gnp) from country where continent = 'Asie'",
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "question": "What is the total number of people and maximum GNP in Asia?",
        "context": "What is the total number of people and maximum GNP in Asia? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(population), max(gnp) from country where continent = \"Asia\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*), gnp from country where continent = 'Asie' group by gnp order by count(*) desc limit 1",
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "context": "How many people live in Asia, and what is the largest GNP among them? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(population), max(gnp) from country where continent = \"Asia\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(lifeexpectancy) from country where governmentform = 'Africa'",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "question": "What is the average lifespan in African nations that are republics?",
        "context": "What is the average lifespan in African nations that are republics? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select avg(lifeexpectancy) from country where continent = \"Africa\" and governmentform = \"Republic\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(lifeexpectancy) from country where continent = 'Africa' and governmentform = 'Republik'",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "question": "Give the average lifespan for nations in Africa which are republics?",
        "context": "Give the average lifespan for nations in Africa which are republics? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select avg(lifeexpectancy) from country where continent = \"Africa\" and governmentform = \"Republic\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(t1.surfacearea) from country as t1 join country as t2 on t1.iD",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "question": "What is the total territory of the continents Asia and Europe?",
        "context": "What is the total territory of the continents Asia and Europe? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(surfacearea) from country where continent = \"Asia\" or continent = \"Europe\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(t1.surfacearea) from country as t1 join country as t2 on t1.code = t2.country",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "question": "Give the total territory covered by countries in Asia or Europe.",
        "context": "Give the total territory covered by countries in Asia or Europe. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(surfacearea) from country where continent = \"Asia\" or continent = \"Europe\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from city where district = \"Gelderland\"",
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "question": "How many people live in Gelderland district?",
        "context": "How many people live in Gelderland district? | world_1 | city : id, name, countrycode, district ( Gelderland ), population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(population) from city where district = \"Gelderland\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(population) from city where district = 'Gelderland'",
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "question": "What is the total number of residents of Gelderland district?",
        "context": "What is the total number of residents of Gelderland district? | world_1 | city : id, name, countrycode, district ( Gelderland ), population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(population) from city where district = \"Gelderland\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(gnp), sum(population) from country where governmentform = 'US Territory'",
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "question": "What is the average GNP and total number of people in all States whose government is US territory?",
        "context": "What is the average GNP and total number of people in all States whose government is US territory? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select avg(gnp), sum(population) from country where governmentform = \"US Territory\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(gnp), sum(population) from country where governmentform = 'US Territory'",
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "question": "Give the mean GNP and total number of people of nations which are considered US territory.",
        "context": "Give the mean GNP and total number of people of nations which are considered US territory. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select avg(gnp), sum(population) from country where governmentform = \"US Territory\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct language) from countrylanguage",
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "question": "How many unique languages are spoken in the world?",
        "context": "How many unique languages are spoken in the world? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(distinct language) from countrylanguage",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct language) from countrylanguage",
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "question": "What is the number of distinct languages used around the world?",
        "context": "What is the number of distinct languages used around the world? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(distinct language) from countrylanguage",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct governmentform) from country where continent = 'Africa'",
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "question": "How many type of governments are in Africa?",
        "context": "How many type of governments are in Africa? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(distinct governmentform) from country where continent = \"Africa\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct governmentform) from country where continent = 'Africa'",
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "question": "How many different types of governments are there in Africa?",
        "context": "How many different types of governments are there in Africa? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(distinct governmentform) from country where continent = \"Africa\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from country as t1 join countrylanguage as t2 on t2.countrycode = t1.code where t1.name = \"Aruba\"",
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "question": "What is the total number of languages used in Aruba?",
        "context": "What is the total number of languages used in Aruba? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct language) from country as t1 join countrylanguage as t2 on t2.countrycode = t2.countrycode where t1.name = \"Aruba\"",
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "question": "How many languages are spoken in Aruba?",
        "context": "How many languages are spoken in Aruba? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct language) from countrylanguage where countrycode = 'Afghanistan'",
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "question": "How many official languages does Afghanistan have?",
        "context": "How many official languages does Afghanistan have? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name ( Afghanistan ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(*) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Afghanistan\" and isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct language) from countrylanguage where countrycode = 'Afghanistan'",
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "question": "How many official languages are spoken in Afghanistan?",
        "context": "How many official languages are spoken in Afghanistan? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name ( Afghanistan ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(*) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Afghanistan\" and isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name order by count(*) desc limit 1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is name of the nation that speaks the largest number of languages?",
        "context": "What is name of the nation that speaks the largest number of languages? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name order by count(*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t2.name from countrylanguage as t1 join country as t2 on t1.countrycode = t2.code group by t1.countrycode order by count(*) desc limit 1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the name of the State that uses the greatest amount of languages.",
        "context": "Give the name of the State that uses the greatest amount of languages. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name order by count(*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select continent, count(*) from country group by continent order by count(*) desc limit 1",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent has the most diverse languages?",
        "context": "Which continent has the most diverse languages? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t1.continent from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select continent, count(*) from country as t1 join countrylanguage as t2 on t2.language = t2.language group by t2.language order by count(*) desc limit 1",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent speaks the most languages?",
        "context": "Which continent speaks the most languages? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t1.continent from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from countrylanguage where language = 'English' intersect select count(*) from country",
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "question": "How many States speak both English and Dutch?",
        "context": "How many States speak both English and Dutch? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Dutch\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from countrylanguage where language = 'English' intersect select countrycode from countrylanguage where language = 'N'",
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "question": "What is the number of countries that use English and Dutch?",
        "context": "What is the number of countries that use English and Dutch? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Dutch\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select language from countrylanguage where language = 'English' intersect select language from countrylanguage where language = 'France'",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "question": "What are the names of States speak both English and French?",
        "context": "What are the names of States speak both English and French? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"French\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select countrycode from countrylanguage where language = 'English' intersect select countrycode from countrylanguage where language = 'France'",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "question": "Give the names of countries that speak both English and French.",
        "context": "Give the names of countries that speak both English and French. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"French\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select countrycode from countrylanguage where language = 'English' intersect select countrycode from countrylanguage where language = 'France'",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "question": "What are the names of States where both English and French are official languages?",
        "context": "What are the names of States where both English and French are official languages? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" and t2.isofficial = \"T\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"French\" and t2.isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select language from countrylanguage where language = 'English' intersect select language from countrylanguage where language = 'France'",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "question": "Give the names of nations with English and French as official languages.",
        "context": "Give the names of nations with English and French as official languages. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" and t2.isofficial = \"T\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"French\" and t2.isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct t1.continent) from country as t1 join countrylanguage as t2 on t2.countrycode = t2.countrycode where t2.language = 'Chinese'",
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "context": "What is the number of distinct continents where Chinese is spoken? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Chinese ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Chinese\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from country as t1 join countrylanguage as t2 on t1.country",
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "question": "How many continents speak Chinese?",
        "context": "How many continents speak Chinese? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Chinese ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Chinese\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select language from countrylanguage where language = 'England' or language = 'Hoslecht'",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "What are the regions that use English or Dutch?",
        "context": "What are the regions that use English or Dutch? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" or t2.language = \"Dutch\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select countrycode from countrylanguage where language = 'Niederlande' or language = 'English'",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "Which regions speak Dutch or English?",
        "context": "Which regions speak Dutch or English? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" or t2.language = \"Dutch\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select countrycode from countrylanguage where language = 'English' or language = 'N'",
        "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "question": "What are the nations where either English or Dutch is the official language?",
        "context": "What are the nations where either English or Dutch is the official language? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select * from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" and isofficial = \"T\" union select * from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Dutch\" and isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select countrycode from countrylanguage where language = 'English' or language = 'N'",
        "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "question": "Which nations have either English or Dutch as an official language?",
        "context": "Which nations have either English or Dutch as an official language? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select * from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" and isofficial = \"T\" union select * from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Dutch\" and isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.country",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "Which language is the most popular on the Asian continent?",
        "context": "Which language is the most popular on the Asian continent? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = \"Asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.country",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "context": "What is the language that is used by the largest number of Asian nations? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = \"Asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.governmentform = \"Republik\" group by t2.language having count(*) = 1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "Which languages are spoken by only one country in republic governments?",
        "context": "Which languages are spoken by only one country in republic governments? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.governmentform = \"Republic\" group by t2.language having count(*) = 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.governmentform = \"Republik\"",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "What languages are only used by a single country with a republic government?",
        "context": "What languages are only used by a single country with a republic government? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.governmentform = \"Republic\" group by t2.language having count(*) = 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from city as t1 join countrylanguage as t2 on t1.id = t2.countrycode where t2.language = 'English' group by t1.name order by count(*) desc limit 1",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "Find the town with the largest number of people that uses English.",
        "context": "Find the town with the largest number of people that uses English. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t1.name, t1.population from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = \"English\" order by t1.population desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from city as t1 join countrylanguage as t2 on t1.id = t2.countrycode where t2.language = 'English' group by t1.name order by count(*) desc limit 1",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "What is the most populace city that speaks English?",
        "context": "What is the most populace city that speaks English? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t1.name, t1.population from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = \"English\" order by t1.population desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name, population, lifeexpectancy from country where continent = 'Asie' order by surfacearea desc limit 1",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Find the name, populace and expected life length of asian country with the largest area?",
        "context": "Find the name, populace and expected life length of asian country with the largest area? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name, population, lifeexpectancy from country where continent = 'Asie' group by name order by count(*) desc limit 1",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the name, number of residents, and lifespan of the largest Asian country by land?",
        "context": "What are the name, number of residents, and lifespan of the largest Asian country by land? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(lifeexpectancy) from country where language!= 'England' - t1.countrycode",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "What is average lifespan in the nations where English is not the official language?",
        "context": "What is average lifespan in the nations where English is not the official language? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select avg(lifeexpectancy) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" and t2.isofficial = \"T\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(t2.lifeexpectancy) from countrylanguage as t1 join country as t2 on t1.countrycode = t1.countrycode where t1.language!= 'English'",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "Give the mean lifespan of nations in which English is not the official language.",
        "context": "Give the mean lifespan of nations in which English is not the official language. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select avg(lifeexpectancy) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" and t2.isofficial = \"T\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(population) from city where countrycode!= 'English'",
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "What is the total number of people living in the nations that do not use English?",
        "context": "What is the total number of people living in the nations that do not use English? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from countrylanguage where language!= 'English'",
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "How many people live in nations that do not speak English?",
        "context": "How many people live in nations that do not speak English? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = \"Brittrix\"",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "context": "What is the official language spoken in the country whose head of state is Beatrix? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = \"Beatrix\" and t2.isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = \"Brittrix\"",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language used in the country the name of whose leader of country is Beatrix.",
        "context": "What is the official language used in the country the name of whose leader of country is Beatrix. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = \"Beatrix\" and t2.isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct language) from country",
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "question": "What is the total number of unique official languages spoken in the nations that are founded before 1930?",
        "context": "What is the total number of unique official languages spoken in the nations that are founded before 1930? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where indepyear < 1930 and t2.isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct language) from countrylanguage where isofficial = 1930",
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "question": "For the nations founded before 1930, what is the total number of distinct official languages?",
        "context": "For the nations founded before 1930, what is the total number of distinct official languages? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where indepyear < 1930 and t2.isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where surfacearea > (select max(surfacearea) from country where continent = 'Europe')",
        "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "What are the nations that have greater territory than any country in Europe?",
        "context": "What are the nations that have greater territory than any country in Europe? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country where surfacearea > (select min(surfacearea) from country where continent = \"Europe\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where surfacearea > (select max(surfacearea) from country where continent = 'Europe')",
        "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "Which countries have greater territory than that of any country in Europe?",
        "context": "Which countries have greater territory than that of any country in Europe? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country where surfacearea > (select min(surfacearea) from country where continent = \"Europe\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where population < (select max(population) from country where continent = 'Asie')",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "What are the African nations that have a  number of residents less than any country in Asia?",
        "context": "What are the African nations that have a number of residents less than any country in Asia? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia, Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country where continent = \"Africa\" and population < (select max(population) from country where continent = \"Asia\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where population < (select min(population) from country where continent = 'Asie')",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "Which African nations have a smaller number of residents than that of any country in Asia?",
        "context": "Which African nations have a smaller number of residents than that of any country in Asia? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia, Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country where continent = \"Africa\" and population < (select min(population) from country where continent = \"Asia\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where population > (select min(population) from country where continent = 'Asie')",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "Which Asian nations have a number of residents that is larger than any country in Africa?",
        "context": "Which Asian nations have a number of residents that is larger than any country in Africa? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country where continent = \"Asia\" and population > (select max(population) from country where continent = \"Africa\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where population > (select min(population) from country where continent = 'Asie')",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "What are the Asian States which have a number of residents larger than that of any country in Africa?",
        "context": "What are the Asian States which have a number of residents larger than that of any country in Africa? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country where continent = \"Asia\" and population > (select min(population) from country where continent = \"Africa\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where language",
        "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "What are the nation abbreviations for nations that do not speak English?",
        "context": "What are the nation abbreviations for nations that do not speak English? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select countrycode from countrylanguage except select countrycode from countrylanguage where language = \"English\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select distinct t1.name from country as t1 join countrylanguage as t2 on t1.country",
        "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "Return the State abbreviations for States that do not speak English.",
        "context": "Return the State abbreviations for States that do not speak English. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select countrycode from countrylanguage except select countrycode from countrylanguage where language = \"English\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language!= 'English'",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "What are the nation abbreviations of nations where people use languages other than English?",
        "context": "What are the nation abbreviations of nations where people use languages other than English? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select distinct countrycode from countrylanguage where language!= \"English\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language!= 'English'",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "Give the nation abbreviations for nations in which people speak langauges that are not English.",
        "context": "Give the nation abbreviations for nations in which people speak langauges that are not English. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select distinct countrycode from countrylanguage where language!= \"English\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language!= 'England' except select t1.name from country as t1 join countrylanguage as t2 on t1.country",
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "What are the abbreviations of the nations that do not speak English and whose government types are not Republic?",
        "context": "What are the abbreviations of the nations that do not speak English and whose government types are not Republic? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select code from country where governmentform!= \"Republic\" except select countrycode from countrylanguage where language = \"English\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from country as t1 join country as t2 on t1.country",
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "Return the abbreviations of States that do not speak English and do not have Republics for governments.",
        "context": "Return the abbreviations of States that do not speak English and do not have Republics for governments. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select code from country where governmentform!= \"Republic\" except select countrycode from countrylanguage where language = \"English\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from city where countrycode like '%europe%'",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "Which towns are in European countries where English is not the official language?",
        "context": "Which towns are in European countries where English is not the official language? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select distinct t2.name from country as t1 join city as t2 on t2.countrycode = t1.code where t1.continent = 'Europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code = t4.countrycode where t4.isofficial = 'T' and t4.language = 'English')",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from city where countrycode = 'Europe' except select t1.name from city as t1 join countrylanguage as t2 on t1.id = t2.countrycode where t2.language = 'English'",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "What are the names of towns in Europe for which English is not the official language?",
        "context": "What are the names of towns in Europe for which English is not the official language? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select distinct t2.name from country as t1 join city as t2 on t2.countrycode = t1.code where t1.continent = 'Europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code = t4.countrycode where t4.isofficial = 'T' and t4.language = 'English')",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select distinct t1.name from city as t1 join countrylanguage as t2 on t1.id = t2.countrycode where t2.language = 'Chinese' and t2.isofficial = 'T'",
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "question": "Whic`h unique towns are in  Asian States where Chinese is the official language?",
        "context": "Which unique towns are in Asian States where Chinese is the official language? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Chinese ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 'T' and t2.language = 'Chinese' and t1.continent = \"Asia\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select distinct t1.name from city as t1 join countrylanguage as t2 on t1.id = t2.countrycode where t2.language = 'Chinese'",
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "question": "Return the different names of towns that are in Asia and for which Chinese is the official language.",
        "context": "Return the different names of towns that are in Asia and for which Chinese is the official language. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Chinese ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 'T' and t2.language = 'Chinese' and t1.continent = \"Asia\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name,",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "question": "What are the name, founded year, and territory of the country with the smallest number of residents?",
        "context": "What are the name, founded year, and territory of the country with the smallest number of residents? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name, surfacearea, indepyear from country order by population limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name,",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "question": "Give the name, year of founded, and territory of the country that has the lowest number of people.",
        "context": "Give the name, year of founded, and territory of the country that has the lowest number of people. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name, surfacearea, indepyear from country order by population limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select population, name, headofstate from country order by surfacearea desc limit 1",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the number of residents, name and leader of the country with the largest area?",
        "context": "What are the number of residents, name and leader of the country with the largest area? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name, population, headofstate from country order by surfacearea desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name, population, headofstate from country order by surfacearea desc limit 1",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Give the name, number of residents, and leader of country for the country that has the largest territory.",
        "context": "Give the name, number of residents, and leader of country for the country that has the largest territory. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name, population, headofstate from country order by surfacearea desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name, count(*) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) >= 3",
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "Return the nation name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "context": "Return the nation name and the numbers of languages spoken for each country that speaks at least 3 languages. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(t2.language), t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) > 2",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name, count(*) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) > 2",
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "What are the names of nations that speak more than 2 languages, as well as how many languages they speak?",
        "context": "What are the names of nations that speak more than 2 languages, as well as how many languages they speak? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(t2.language), t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) > 2",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select district, count(*) from city group by district having avg(population) > (select avg(population) from city)",
        "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "Find the number of towns in each district whose number of residents is greater than the average population of towns?",
        "context": "Find the number of towns in each district whose number of residents is greater than the average population of towns? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(*), district from city where population > (select avg(population) from city) group by district",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*), district from city where population > (select avg(population) from city) group by district",
        "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "How many towns in each district have a population that is above the average number of residents across all towns?",
        "context": "How many towns in each district have a population that is above the average number of residents across all towns? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(*), district from city where population > (select avg(population) from city) group by district",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name, sum(t2.population), t2.governmentform from city as t1 join country as t2 on t1.id = t2.governmentform group by t2.governmentform having avg(t2.lifeexpectancy) >= 72",
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "question": "Find the government type name and total number of residents for each government type whose average lifespan is longer than 72.",
        "context": "Find the government type name and total number of residents for each government type whose average lifespan is longer than 72. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select governmentform, avg(lifeexpectancy), sum(lifeexpectancy), governmentform from country group by governmentform having avg(lifeexpectancy) >= 72",
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "question": "What are the different government types and what is the total number of residents of each for government types that have an average lifespan greater than 72?",
        "context": "What are the different government types and what is the total number of residents of each for government types that have an average lifespan greater than 72? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(lifeexpectancy), sum(lifeexpectancy) from country group by continent having avg(lifeexpectancy) < 72",
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "question": "Find the average lifespan and total number of people for each continent where the average lifespan is shorter than 72?",
        "context": "Find the average lifespan and total number of people for each continent where the average lifespan is shorter than 72? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "question": "What are the different continents and the total number of people and average lifespan corresponding to each, for continents that have an average lifespan less than 72?",
        "context": "What are the different continents and the total number of people and average lifespan corresponding to each, for continents that have an average lifespan less than 72? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name, region from country order by surfacearea desc limit 5",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "What are the names and areas of States with the top 5 largest territory?",
        "context": "What are the names and areas of States with the top 5 largest territory? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name, surfacearea from country order by surfacearea desc limit 5",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name, t1.region from country as t1 join country as t2 on t1.code = t2.country",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "Return the names and territory of the 5 largest countries.",
        "context": "Return the names and territory of the 5 largest countries. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name, surfacearea from country order by surfacearea desc limit 5",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country order by population desc limit 3",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "What are names of nations with the top 3 largest number of people?",
        "context": "What are names of nations with the top 3 largest number of people? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country order by population desc limit 3",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country order by population desc limit 3",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "Return the names of the 3 most populated countries.",
        "context": "Return the names of the 3 most populated countries. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country order by population desc limit 3",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country order by population asc limit 3",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "What are the names of the countries with the 3 lowest number of peoples?",
        "context": "What are the names of the countries with the 3 lowest number of peoples? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country order by population asc limit 3",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country order by population asc limit 3",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "Return the names of the 3 nations with the fewest people.",
        "context": "Return the names of the 3 nations with the fewest people. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country order by population asc limit 3",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from country where continent = 'Asie'",
        "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "question": "how many nations are in Asia?",
        "context": "how many nations are in Asia? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(*) from country where continent = \"Asia\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from country where continent = 'Asie'",
        "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "question": "Count the number of nations in Asia.",
        "context": "Count the number of nations in Asia. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(*) from country where continent = \"Asia\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where continent = 'Europe' and population > 80000",
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "question": "What are the names of the States that are in the continent of Europe and have a number of people of 80000?",
        "context": "What are the names of the States that are in the continent of Europe and have a number of people of 80000? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country where continent = \"Europe\" and population = \"80000\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where continent = 'Europe' and population > 80000",
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "question": "Give the names of nations that are in Europe and have a number of people equal to 80000.",
        "context": "Give the names of nations that are in Europe and have a number of people equal to 80000. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from country where continent = \"Europe\" and population = \"80000\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(t1.population), avg(t2.population) from country as t1 join country as t2 on t1.country",
        "query": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
        "question": "What is the total number of people and average territory of countries in the continent of North America whose territory is bigger than 3000\uff1f",
        "context": "What is the total number of people and average territory of countries in the continent of North America whose territory is bigger than 3000? | world_1 | city : id, name ( Americana ), countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( North America ), region ( North America ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(t1.population), avg(t1.population) from country as t1 join country as t2 on t1.countrycode",
        "query": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
        "question": "Give the total number of people and average territory corresponding to countries in North America that have a territory greater than 3000.",
        "context": "Give the total number of people and average territory corresponding to countries in North America that have a territory greater than 3000. | world_1 | city : id, name ( Americana ), countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent ( North America ), region ( North America ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from city where population between 160000 and 900000",
        "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "question": "What are the towns whose number of residents is between 160000 and 900000?",
        "context": "What are the towns whose number of residents is between 160000 and 900000? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from city where population between 160000 and 900000",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from city where population between 160000 and 900000",
        "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "question": "Return the names of towns that have a number of people between 160000 and 900000.",
        "context": "Return the names of towns that have a number of people between 160000 and 900000. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select name from city where population between 160000 and 900000",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select language from countrylanguage group by language order by count(*) desc limit 1",
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Which language is spoken by the largest number of nations?",
        "context": "Which language is spoken by the largest number of nations? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select language from countrylanguage group by language order by count(*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select language from countrylanguage group by language order by count(*) desc limit 1",
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the language that is spoken in the most nations.",
        "context": "Give the language that is spoken in the most nations. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select language from countrylanguage group by language order by count(*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select language, count(*) from country as t1 join countrylanguage as",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "question": "What is the language spoken by most people in each State?",
        "context": "What is the language spoken by most people in each State? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select language, countrycode, max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name, count(*) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name order by count(*) desc limit 1",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "question": "What are the nation abbreviations of the different nations, and what are the languages spoken by the most people for each?",
        "context": "What are the nation abbreviations of the different nations, and what are the languages spoken by the most people for each? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select language, countrycode, max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from countrylanguage where language = 'Spanish' group by countrycode order by count(*) desc limit 1",
        "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What is the total number of nations where Spanish is spoken by most people?",
        "context": "What is the total number of nations where Spanish is spoken by most people? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Spanish ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(*), max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from countrylanguage where language = 'Spanish' group by language order by count(*) desc limit 1",
        "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Count the number of nations for which Spanish is the predominantly spoken language.",
        "context": "Count the number of nations for which Spanish is the predominantly spoken language. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Spanish ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select count(*), max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select countrycode from countrylanguage where language = 'Spanish' group by countrycode order by count(*) desc limit 1",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What are the codes of nations where Spanish is spoken by most people?",
        "context": "What are the codes of nations where Spanish is spoken by most people? | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Spanish ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select countrycode, max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select countrycode from countrylanguage where language = 'Spanish' group by countrycode having count(*) >= 2",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Return the codes of States for which Spanish is the predominantly spoken language.",
        "context": "Return the codes of States for which Spanish is the predominantly spoken language. | world_1 | city : id, name, countrycode, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Spanish ), isofficial, percentage | description | city: an inhabited place of such as town. population is number of residents; country: is a State within a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. surfacearea is the area of total territory. indepyear is the year of independence when the country was founded. population is total number of people. surfacearea is how much territory a country covers. lifeexpectancy is life expectancy span in numner of years. gnp is the gross national product, which is the total market value of the final goods and services produced. localname is the local name of the country. governmentform is government form of the country; countrylanguage: a word communication system used by a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language and determines the popularity of a language;",
        "label": "world_1 | select countrycode, max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "orchestra | select count(*) from conductor",
        "query": "SELECT count(*) FROM conductor",
        "question": "How many directors are there?",
        "context": "How many directors are there? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select count(*) from conductor",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select count (*) from conductor",
        "query": "SELECT count(*) FROM conductor",
        "question": "Count the number of directors.",
        "context": "Count the number of directors. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select count(*) from conductor",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select name from conductor order by age asc",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "List the names of directors in ascending order of age.",
        "context": "List the names of directors in ascending order of age. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select name from conductor order by age asc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select name from",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "What are the names of directors, ordered by age?",
        "context": "What are the names of directors, ordered by age? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select name from conductor order by age asc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select name from conductor where nationality!= 'USA'",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "What are the names of directors whose countries are not \"USA\"?",
        "context": "What are the names of directors whose countries are not \"USA\"? | orchestra | conductor : conductor_id, name, age, nationality ( USA ), year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select name from conductor where nationality!= 'USA'",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select name from conductor where nationality!= 'USA'",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "Return the names of directors that do not have the country \"USA\".",
        "context": "Return the names of directors that do not have the country \"USA\". | orchestra | conductor : conductor_id, name, age, nationality ( USA ), year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select name from conductor where nationality!= 'USA'",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company from orchestra order by year_of_founded desc",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "What are the record enterprise of ensembles in descending order of years in which they were set up?",
        "context": "What are the record enterprise of ensembles in descending order of years in which they were set up? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select record_company from orchestra order by year_of_founded desc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company from orchestra order by year_of_founded desc",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "Return the record enterprise of ensembles, sorted descending by the years in which they were set up.",
        "context": "Return the record enterprise of ensembles, sorted descending by the years in which they were set up. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select record_company from orchestra order by year_of_founded desc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select avg(attendance) from show",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "question": "What is the average guest of shows?",
        "context": "What is the average guest of shows? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select avg(attendance) from show",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select avg(attendance) from show",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "question": "Return the average guest across all shows.",
        "context": "Return the average guest across all shows. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select avg(attendance) from show",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select max(share), min(share) from performance where type!= \"Live final\"",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "context": "What are the maximum and minimum share of performances whose type is not \"Live final\". | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type ( Live final ), date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select max(share), min(share) from performance where type!= \"Live final\"",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select max(share), min(share) from performance where type!= \"Live final\"",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "Return the maximum and minimum shares for performance that do not have the type \"Live final\".",
        "context": "Return the maximum and minimum shares for performance that do not have the type \"Live final\". | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type ( Live final ), date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select max(share), min(share) from performance where type!= \"Live final\"",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select count(distinct nationality) from conductor",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "How many different countries do directors have?",
        "context": "How many different countries do directors have? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select count(distinct nationality) from conductor",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select count(distinct nationality) from conductor",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "Count the number of different countries of directors.",
        "context": "Count the number of different countries of directors. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select count(distinct nationality) from conductor",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "List names of directors in descending order of time of as a director.",
        "context": "List names of directors in descending order of time of as a director. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select name from conductor order by year_of_work desc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t2.name from performance as t1 join orchestra as t2",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "What are the names of directors, sorted descending by the time they became a director?",
        "context": "What are the names of directors, sorted descending by the time they became a director? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select name from conductor order by year_of_work desc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select name from conductor order by year_of_work desc limit 1",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "List the name of the director with the most years of as a director.",
        "context": "List the name of the director with the most years of as a director. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select name from conductor order by year_of_work desc limit 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t2.name from performance as t1 join conductor as t2 on",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "What is the name of the director who has worked the greatest number of years?",
        "context": "What is the name of the director who has worked the greatest number of years? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select name from conductor order by year_of_work desc limit 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t1.name, t2.orchestr",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "Show the names of directors and the ensembles they have directed.",
        "context": "Show the names of directors and the ensembles they have directed. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select t1.name, t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t2.name, t2.orchestr",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "What are the names of directors as well as the corresonding ensembles that they have directed?",
        "context": "What are the names of directors as well as the corresonding ensembles that they have directed? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select t1.name, t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.orchestr",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "Show the names of directors that have conducted more than one ensembles.",
        "context": "Show the names of directors that have conducted more than one ensembles. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "What are the names of directors who have directed at more than one ensemble?",
        "context": "What are the names of directors who have directed at more than one ensemble? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.orchestr",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the director that has directed the most number of ensembles.",
        "context": "Show the name of the director that has directed the most number of ensembles. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the director who has directed the most ensembles?",
        "context": "What is the name of the director who has directed the most ensembles? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.orchestr",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "question": "Please show the name of the director that has directed ensembles set up after 2008.",
        "context": "Please show the name of the director that has directed ensembles set up after 2008. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t2.name from performance as t1 join conductor as t2 on t1.orchestr",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "question": "What are the names of directors who have conducted ensembles set up after the year 2008?",
        "context": "What are the names of directors who have conducted ensembles set up after the year 2008? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company, count(*) from orchestra group by record_company",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "Please show the different record enterprise and the corresponding number of ensembles.",
        "context": "Please show the different record enterprise and the corresponding number of ensembles. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select record_company, count(*) from orchestra group by record_company",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t2.name, count(*) from performance as t1 join orchestra as t2",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "How many ensembles does each enterprise manage?",
        "context": "How many ensembles does each enterprise manage? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select record_company, count(*) from orchestra group by record_company",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select type from performance order by count(*) asc",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "Please show the record type of ensembles in ascending order of count.",
        "context": "Please show the record type of ensembles in ascending order of count. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select major_record_format from orchestra order by count(*) desc",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "What are the major record formats of ensembles, sorted by their frequency?",
        "context": "What are the major record formats of ensembles, sorted by their frequency? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the record enterprise shared by the most number of ensembles.",
        "context": "List the record enterprise shared by the most number of ensembles. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the record enterprise used by the greatest number of ensembles?",
        "context": "What is the record enterprise used by the greatest number of ensembles? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "List the names of ensembles that have no performance.",
        "context": "List the names of ensembles that have no performance. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "What are the ensembles that do not have any performance?",
        "context": "What are the ensembles that do not have any performance? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "question": "Show the record enterprises shared by ensembles founded before 2003 and after 2003.",
        "context": "Show the record enterprises shared by ensembles founded before 2003 and after 2003. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "question": "What are the record enterprises that are used by both ensembles founded before 2003 and those founded after 2003?",
        "context": "What are the record enterprises that are used by both ensembles founded before 2003 and those founded after 2003? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Find the number of ensembles whose record type is \"CD\" or \"DVD\".",
        "context": "Find the number of ensembles whose record type is \"CD\" or \"DVD\". | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format ( DVD, CD ) | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select count(*) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD'",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Count the number of ensembles that have CD or DVD as their record type.",
        "context": "Count the number of ensembles that have CD or DVD as their record type. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format ( DVD, CD ) | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select year_of_founded from orchestra group by year_of_founded having count(*) > 1",
        "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "Show the years in which ensembles that have given more than one performance are set up.",
        "context": "Show the years in which ensembles that have given more than one performance are set up. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id = t2.orchestra_id group by t2.orchestra_id having count(*) > 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t2.year_of_founded from performance as t1 join orchestra as t2 on t1.orchestr",
        "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "What are years of seting up for ensembles that have had more than a single performance?",
        "context": "What are years of seting up for ensembles that have had more than a single performance? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id, if_first_show, result, attendance | description | conductor: director of the performance of an orchestra or choir. year_of work is number of years of as a director. nationality is the country the director comes from; orchestra: ensemble of instrumentalists which are directed by a director conductor. orchestra is the name of the ensemble. record_company is record enterprise. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the number of share of performances; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of guest of shows;",
        "label": "orchestra | select year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id = t2.orchestra_id group by t2.orchestra_id having count(*) > 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*) from highschooler",
        "query": "SELECT count(*) FROM Highschooler",
        "question": "How many students are there?",
        "context": "How many students are there? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select count(*) from highschooler",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*) from highschooler",
        "query": "SELECT count(*) FROM Highschooler",
        "question": "Count the number of students.",
        "context": "Count the number of students. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select count(*) from highschooler",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name, grade from highschooler",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "Show the names and grades of each student.",
        "context": "Show the names and grades of each student. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select name, grade from highschooler",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name, grade from highschooler",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "What are the names and grades for each student?",
        "context": "What are the names and grades for each student? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select name, grade from highschooler",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select distinct grade from highschooler",
        "query": "SELECT grade FROM Highschooler",
        "question": "Show all the grades of the students.",
        "context": "Show all the grades of the students. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select grade from highschooler",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select distinct grade from highschooler",
        "query": "SELECT grade FROM Highschooler",
        "question": "What is the grade of each student?",
        "context": "What is the grade of each student? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select grade from highschooler",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select grade from highschooler where name = 'Knowy'",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What grade is Kyle in?",
        "context": "What grade is Kyle in? | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select grade from highschooler where name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select grade from highschooler where name = 'Knowy'",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Return the grade for the student named Kyle.",
        "context": "Return the grade for the student named Kyle. | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select grade from highschooler where name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name from highschooler where grade = 10",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "Show the names of all students in grade 10.",
        "context": "Show the names of all students in grade 10. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select name from highschooler where grade = 10",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name from highschooler where grade = 10",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "What are the names of all students in grade 10?",
        "context": "What are the names of all students in grade 10? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select name from highschooler where grade = 10",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t2.student_id from highschooler as t1 join",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Show the ID of the student named Kyle.",
        "context": "Show the ID of the student named Kyle. | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select id from highschooler where name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select id from highschooler where name = 'Knowy'",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What is Kyle's id?",
        "context": "What is Kyle's id? | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select id from highschooler where name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*) from highschooler where grade = 9 or grade = 10",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "How many students are there in grade 9 or 10?",
        "context": "How many students are there in grade 9 or 10? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select count(*) from highschooler where grade = 9 or grade = 10",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*) from highschooler where grade = 9 or grade = 10",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "Count the number of students in grades 9 or 10.",
        "context": "Count the number of students in grades 9 or 10. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select count(*) from highschooler where grade = 9 or grade = 10",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select grade, count(*) from highschooler group by grade",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "Show the number of students for each grade.",
        "context": "Show the number of students for each grade. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select grade, count(*) from highschooler group by grade",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select grade, count(*) from highschooler group by grade",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "How many students are in each grade?",
        "context": "How many students are in each grade? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select grade, count(*) from highschooler group by grade",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select grade from highschooler group by grade order by count(*) desc limit 1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Which grade has the most students?",
        "context": "Which grade has the most students? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select grade from highschooler group by grade order by count(*) desc limit 1",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select grade from highschooler group by grade order by count(*) desc limit 1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the grade that has the greatest number of students.",
        "context": "Return the grade that has the greatest number of students. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select grade from highschooler group by grade order by count(*) desc limit 1",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select distinct grade from highschooler group by grade having count(*) >= 4",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Show me all grades that have at least 4 students.",
        "context": "Show me all grades that have at least 4 students. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select grade from highschooler group by grade having count(*) >= 4",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select grade from highschooler group by grade having count(*) >= 4",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Which grades have 4 or more students?",
        "context": "Which grades have 4 or more students? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select grade from highschooler group by grade having count(*) >= 4",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select student_id, count(*) from friend group by student_id",
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "context": "Show the student IDs and numbers of friends corresponding to each. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select student_id, count(*) from friend group by student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(t2.friend_id), count(*) from likes as t1 join friend as t2 on t1.student_id = t2.student_id group by t2.friend_id",
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "How many friends does each student have?",
        "context": "How many friends does each student have? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select student_id, count(*) from friend group by student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t2.name, count(*) from",
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "Show the names of students and their corresponding number of friends.",
        "context": "Show the names of students and their corresponding number of friends. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name, count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name, count(t1.friend_id), t2.student_id",
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of the students and how many friends does each have?",
        "context": "What are the names of the students and how many friends does each have? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name, count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select student_id, count(*) from friend group by student_id order by count(*) desc limit 1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the student who has the greatest number of friends?",
        "context": "What is the name of the student who has the greatest number of friends? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select avg(t1.friend_id), t2.name from",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the student with the most friends.",
        "context": "Return the name of the student with the most friends. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t1.student_id group by t1.student_id having count(*) >= 3",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "Show the names of students who have at least 3 friends.",
        "context": "Show the names of students who have at least 3 friends. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 3",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.friend_id = t1.student_id group by t1.student_id having count(*) >= 3",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "What are the names of students who have 3 or more friends?",
        "context": "What are the names of students who have 3 or more friends? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 3",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t2.name from friend as t1 join",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Show the names of all of the student Kyle's friends.",
        "context": "Show the names of all of the student Kyle's friends. | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t3.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id join highschooler as t3 on t1.friend_id = t3.id where t2.name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t2.friend_id from likes as t1 join friend as t2 on t2.friend_id = t1.friend_id",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the names of friends of the student Kyle.",
        "context": "Return the names of friends of the student Kyle. | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t3.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id join highschooler as t3 on t1.friend_id = t3.id where t2.name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(distinct t2.friend_id) from highschooler as t1 join",
        "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "How many friends does the student Kyle have?",
        "context": "How many friends does the student Kyle have? | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id where t2.name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(t1.friend_id) from friend as t1 join highschooler as t2 on t1.friend_id = t1.student_id where t2.name = 'Knowy'",
        "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "Count the number of friends Kyle has.",
        "context": "Count the number of friends Kyle has. | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id where t2.name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select student_id",
        "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "Show ids of all students who do not have any friends.",
        "context": "Show ids of all students who do not have any friends. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select id from highschooler except select student_id from friend",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select student_id from",
        "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "What are the ids of students who do not have friends?",
        "context": "What are the ids of students who do not have friends? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select id from highschooler except select student_id from friend",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name from highschooler where student_id not in (select student_id from friend",
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "question": "Show names of all students who do not have any friends.",
        "context": "Show names of all students who do not have any friends. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select name from highschooler except select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name from",
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "question": "What are the names of students who have no friends?",
        "context": "What are the names of students who have no friends? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select name from highschooler except select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select student_id from likes intersect select student_id from likes",
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "Show the ids of students who have friends and are also liked by someone else.",
        "context": "Show the ids of students who have friends and are also liked by someone else. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select student_id from friend intersect select liked_id from likes",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select student_id from likes intersect select student_id from likes",
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "What are the ids of students who both have friends and are liked?",
        "context": "What are the ids of students who both have friends and are liked? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select student_id from friend intersect select liked_id from likes",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t2.name from likes as t1 join",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "context": "Show name of all students who have some friends and also are liked by someone else. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id = t2.id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name from highschooler as t1 join likes as t2 on t2.student_id = t2.student_id intersect select t1.name from highschooler as t1 join likes as t2 on t2.student_id = t2.student_id where liked_id = 1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "question": "What are the names of students who both have friends and are liked?",
        "context": "What are the names of students who both have friends and are liked? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id = t2.id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*), student_id from likes group by student_id",
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "Count the number of likes for each student id.",
        "context": "Count the number of likes for each student id. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select student_id, count(*) from likes group by student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select student_id, count(*) from likes group by student_id",
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "How many likes correspond to each student id?",
        "context": "How many likes correspond to each student id? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select student_id, count(*) from likes group by student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t2.name, count(*) from likes as t1 join highschooler as t2 on t1.student_id = t1.student_id group by t1.student_id",
        "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "Show the names of students who have likes, and numbers of likes for each.",
        "context": "Show the names of students who have likes, and numbers of likes for each. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name, count(*) from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t2.name, count(*) from likes as t1 join highschooler as t2 on t1.student_id = t1.student_id group by t1.student_id",
        "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of students who have likes, and how many likes does each have?",
        "context": "What are the names of students who have likes, and how many likes does each have? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name, count(*) from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select student_id, count(*) from likes group by student_id order by count(*) desc limit 1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the student who has the greatest number of likes?",
        "context": "What is the name of the student who has the greatest number of likes? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t1.student_id group by t1.student_id order by count(*) desc limit 1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the name of the student with the most likes.",
        "context": "Give the name of the student with the most likes. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t1.student_id group by t1.student_id having count(*) >= 2",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have at least 2 likes.",
        "context": "Show the names of students who have at least 2 likes. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 2",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name from highschooler group by name having count(*) >= 2",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of students who have 2 or more interests?",
        "context": "What are the names of students who have 2 or more interests? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 2",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name from highschooler where grade > 5 group by name having count(*) >= 2",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "context": "Show the names of students who have a grade higher than 5 and have at least 2 friends. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id where t2.grade > 5 group by t1.student_id having count(*) >= 2",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name from highschooler where grade > 5 intersect select name from highschooler group by name having count(*) >= 2",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of students who have a grade of over 5 and have 2 or more friends?",
        "context": "What are the names of students who have a grade of over 5 and have 2 or more friends? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id where t2.grade > 5 group by t1.student_id having count(*) >= 2",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*) from friend as t1 join highschooler as t2 on t1.friend_id = t1.friend_id where t2.name = 'Knowy'",
        "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "How many interests does Kyle have?",
        "context": "How many interests does Kyle have? | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select count(*) from likes as t1 join highschooler as t2 on t1.student_id = t2.id where t2.name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*) from friend as t1 join highschooler as t2 on t1.friend_id = t1.friend_id where t2.name = 'Knowy'",
        "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the number of interests that the student named Kyle has.",
        "context": "Return the number of interests that the student named Kyle has. | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select count(*) from likes as t1 join highschooler as t2 on t1.student_id = t2.id where t2.name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select avg(t2.grade) from friend as t1 join highschooler as t2 on t1.friend_id = t1.student_id",
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the average grade of all students who have some friends.",
        "context": "Find the average grade of all students who have some friends. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id = t2.id)",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select avg(t2.grade) from friend as t1 join highschooler as t2 on t1.friend_id = t1.student_id",
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the average grade of students who have friends?",
        "context": "What is the average grade of students who have friends? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id = t2.id)",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select min(grade) from highschooler where id not in (select student_id from friend)",
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the minimum grade of students who have no friends.",
        "context": "Find the minimum grade of students who have no friends. | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id = t2.id)",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select min(grade) from highschooler where id not in (select student_id from friend)",
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the lowest grade of students who do not have any friends?",
        "context": "What is the lowest grade of students who do not have any friends? | network_1 | highschooler : id, name, grade | friend : student_id, friend_id | likes : student_id, liked_id | description | highschooler: is a student at a high school. grade is a number obtained by a student in the exam; friend: keep track of the friends/ interests of each student. student_id is the highschooler who has a friend. friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. student_id is the highschooler who has likes. liked_id is the highschooler who is liked the student_id;",
        "label": "network_1 | select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id = t2.id)",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "dog_kennels | select state from owners intersect select state from owners where email_address like '%balance%'",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Which states have both guardians and veterinarians living there?",
        "context": "Which states have both guardians and veterinarians living there? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ",
        "label": "dog_kennels | select state from owners intersect select state from professionals",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select state from owners intersect select state from owners where email_address like '%balance%'",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Find the states where both guardians and veterinarians live.",
        "context": "Find the states where both guardians and veterinarians live. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ",
        "label": "dog_kennels | select state from owners intersect select state from professionals",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select avg(age) from dogs where treatment_type_code = 'Medication_type - avg(age) from dogs where abandoned_yn!= \"",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "What is the average age of the dogs who have gone through any medical care?",
        "context": "What is the average age of the dogs who have gone through any medical care? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the",
        "label": "dog_kennels | select avg(age) from dogs where dog_id in ( select dog_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select avg(age), dog_id from dogs where date_arrived like '%santa%'",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "Find the average age of the dogs who went through health care.",
        "context": "Find the average age of the dogs who went through health care. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the",
        "label": "dog_kennels | select avg(age) from dogs where dog_id in ( select dog_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select professional_id, first_name, last_name, cell_number from professionals where state = \"Indiana\" group by professional_id having count(*) > 2",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Which veterinarians live in the state of Indiana or have done more than 2 medical cares? List his or her id, family name and cell phone.",
        "context": "Which veterinarians live in the state of Indiana or have done more than 2 medical cares? List his or her id, family name and cell phone. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state ( Indiana ), zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state ( Indiana ), zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is ",
        "label": "dog_kennels | select professional_id, last_name, cell_number from professionals where state = 'Indiana' union select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) > 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select professional_id, first_name, last_name, cell_number from",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Find the id, last name and cell phone of the veterinarians who live in the state of Indiana or have performed more than two health-cares.",
        "context": "Find the id, last name and cell phone of the veterinarians who live in the state of Indiana or have performed more than two health-cares. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state ( Indiana ), zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state ( Indiana ), zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is ",
        "label": "dog_kennels | select professional_id, last_name, cell_number from professionals where state = 'Indiana' union select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) > 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select name from dogs except select t1.name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id where t2.city = '1000'",
        "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "question": "Which dogs have not cost their guardian more than 1000 for health-care? List the dog names.",
        "context": "Which dogs have not cost their guardian more than 1000 for health-care? List the dog names. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is",
        "label": "dog_kennels | select name from dogs where dog_id not in( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.name from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id group by t2.dog_id having count(*) > 1000",
        "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "question": "What are the names of the dogs for which the guardian spent more than 1000 for health-care?",
        "context": "What are the names of the dogs for which the guardian spent more than 1000 for health-care? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is",
        "label": "dog_kennels | select name from dogs where dog_id not in( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select first_name from owners where owner_id not in (select dog_id from dogs)",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Which first names are used for veterinarians or guardians but are not used as dog names?",
        "context": "Which first names are used for veterinarians or guardians but are not used as dog names? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of",
        "label": "dog_kennels | select first_name from professionals union select first_name from owners except select name from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select distinct first_name from owners as t1 join dogs as t2 on t1.owner_id = t2.dog_id where t1.email_address like '%dain_yn%'",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Find the first names that are used for veterinarians or guardians but are not used as dog names.",
        "context": "Find the first names that are used for veterinarians or guardians but are not used as dog names. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the",
        "label": "dog_kennels | select first_name from professionals union select first_name from owners except select name from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.professional_id, t2.role_code, t2.email_address from dogs as t1 join treatments on t1.dog_id = t2.dog_id",
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Which veterinarian did not operate any medical care on dogs? List the veterinarian's id, role and email.",
        "context": "Which veterinarian did not operate any medical care on dogs? List the veterinarian's id, role and email. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrive",
        "label": "dog_kennels | select professional_id, role_code, email_address from professionals except select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join dogs as t2 on t1.professional_id = t2.professional_id",
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Give me the id, role and email of the veterinarians who did not perform any health-care on dogs.",
        "context": "Give me the id, role and email of the veterinarians who did not perform any health-care on dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_",
        "label": "dog_kennels | select professional_id, role_code, email_address from professionals except select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which people owns the most dogs? List the people id, given name and family name.",
        "context": "Which people owns the most dogs? List the people id, given name and family name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the",
        "label": "dog_kennels | select t1.owner_id, t2.first_name, t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.first_name, t1.last_name, t2.home_phone from owners as t1 join dogs as t2",
        "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the people id, given name and family name of the guardian who has the most dogs.",
        "context": "Return the people id, given name and family name of the guardian who has the most dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived",
        "label": "dog_kennels | select t1.owner_id, t2.first_name, t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.role_code, t2.name from professionals as t1 join treatment_types as t2",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which veterinarians have done at least two medical cares? List the veterinarian's id, role, and given name.",
        "context": "Which veterinarians have done at least two medical cares? List the veterinarian's id, role, and given name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog.",
        "label": "dog_kennels | select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.role_code, t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "What are the id, role, and given name of the veterinarians who have performed two or more health-cares?",
        "context": "What are the id, role, and given name of the veterinarians who have performed two or more health-cares? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog.",
        "label": "dog_kennels | select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select breed_code from dogs group by breed_code order by count(*) desc limit 1",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the breed with the most puppies?",
        "context": "What is the name of the breed with the most puppies? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ",
        "label": "dog_kennels | select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which breed do the most puppies have? Give me the breed name.",
        "context": "Which breed do the most puppies have? Give me the breed name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in",
        "label": "dog_kennels | select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which guardian has paid for the most health cares on his or her dogs? List the guardian id and family name.",
        "context": "Which guardian has paid for the most health cares on his or her dogs? List the guardian id and family name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of",
        "label": "dog_kennels | select t1.owner_id, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Tell me the guardian id and family name of the guardian who spent the most on treatments of his or her puppies.",
        "context": "Tell me the guardian id and family name of the guardian who spent the most on treatments of his or her puppies. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the",
        "label": "dog_kennels | select t1.owner_id, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t1.treatment_type_code order by sum(t2.cost_of_treatment) asc limit 1",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "What is the describing details of the health-care type that costs the least money in total?",
        "context": "What is the describing details of the health-care type that costs the least money in total? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date",
        "label": "dog_kennels | select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t1.treatment_type_code order by sum(t2.cost_of_treatment) asc limit 1",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "Give me the describing details of the health-care whose total cost is the lowest.",
        "context": "Give me the describing details of the health-care whose total cost is the lowest. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of",
        "label": "dog_kennels | select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Which guardian has paid the largest amount of money in total for their puppies? Show the guardian id and zip code.",
        "context": "Which guardian has paid the largest amount of money in total for their puppies? Show the guardian id and zip code. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the",
        "label": "dog_kennels | select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Find the guardian id and zip code of the guardian who spent the most money in total for his or her puppies.",
        "context": "Find the guardian id and zip code of the guardian who spent the most money in total for his or her puppies. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the",
        "label": "dog_kennels | select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which veterinarians have done at least two types of health-care? List the veterinarian id and cell phone.",
        "context": "Which veterinarians have done at least two types of health-care? List the veterinarian id and cell phone. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrive",
        "label": "dog_kennels | select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Find the id and cell phone of the veterinarians who operate two or more types of health-care.",
        "context": "Find the id and cell phone of the veterinarians who operate two or more types of health-care. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived",
        "label": "dog_kennels | select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.f",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN  Treatments AS T2 on T2.professional_id = T1.professional_id WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "What are the first name and family name of the veterinarians who have done medical care with cost below average?",
        "context": "What are the first name and family name of the veterinarians who have done medical care with cost below average? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is",
        "label": "dog_kennels | select distinct t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t2.professional_id = t1.professional_id where cost_of_treatment < ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.first_name, t1.last_name from owners as t1 join treatments as t2 on t1.owner_id = t2.professional_id where t2.cost_of_treatment < ( select avg(cost_of_treatment) from treatments )",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 on T2.professional_id = T1.professional_id WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "Which veterinarians have operated a medical care that costs less than the average? Give me theor given names and family names.",
        "context": "Which veterinarians have operated a medical care that costs less than the average? Give me theor given names and family names. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date",
        "label": "dog_kennels | select distinct t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t2.professional_id = t1.professional_id where cost_of_treatment < ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.date_arrived, t1.email_address from treatment_types as t2 join dogs as t3 on t1.treatment_type_code = t2.treatment_type",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "List the date of each medical care, together with the given name of the veterinarian who operated it.",
        "context": "List the date of each medical care, together with the given name of the veterinarian who operated it. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date",
        "label": "dog_kennels | select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.date_arrived, t1.date_adopted from treatments as t2 join dogs as t1 on t1.dog_id = t2.dog_id group by t2.treatment_type_code",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "What are the date and the operating veterinarian's given name of each medical care?",
        "context": "What are the date and the operating veterinarian's given name of each medical care? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of",
        "label": "dog_kennels | select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select avg(cost_of_treatment), t1.treatment_type_description from treatment_types as t1 join charges as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "List the cost of each health-care and the corresponding health-care type describing details.",
        "context": "List the cost of each health-care and the corresponding health-care type describing details. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date",
        "label": "dog_kennels | select t1.cost_of_treatment, t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.charge_type, t2.treatment_type_description, t2.treatment_type_code from treatment_types as t2 join treatment_types as t3 on t1.treatment_type_code = t3.treatment_type",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "What are the cost and health-care type describing content of each health-care?",
        "context": "What are the cost and health-care type describing content of each health-care? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival",
        "label": "dog_kennels | select t1.cost_of_treatment, t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.last_name, t1.size_code from dogs as t1 join",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List each guardian's first name, last name, and the size of his for her dog.",
        "context": "List each guardian's first name, last name, and the size of his for her dog. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is",
        "label": "dog_kennels | select t1.first_name, t1.last_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.last_name, t1.size_code from dogs as t1 join",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each guardians's first name, last name, and the size of their dog?",
        "context": "What are each guardians's first name, last name, and the size of their dog? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date",
        "label": "dog_kennels | select t1.first_name, t1.last_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.last_name from owners as t1 join dogs as t2",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List pairs of the guardians's given name and the puppies's name.",
        "context": "List pairs of the guardians's given name and the puppies's name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of",
        "label": "dog_kennels | select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each guardians's given name and their puppies's name?",
        "context": "What are each guardians's given name and their puppies's name? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the",
        "label": "dog_kennels | select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.name, t1.date_arrived from dogs as t1 join",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "List the names of the puppies of the rarest breed and the health care dates of them.",
        "context": "List the names of the puppies of the rarest breed and the health care dates of them. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date",
        "label": "dog_kennels | select t1.name, t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id where t1.breed_code = ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select name, date_arrived from dogs order by date_arrived limit 1",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "Which dogs are of the rarest breed? Show their names and medical care dates.",
        "context": "Which dogs are of the rarest breed? Show their names and medical care dates. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival",
        "label": "dog_kennels | select t1.name, t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id where t1.breed_code = ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select first_name, last_name from dogs as t1 join owners as t2 on t1.owner_id= t2.owner_id where t2.state = \"Virgina\"",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Which dogs are owned by someone who lives in Virginia? List the guardian's first name and the dog's name.",
        "context": "Which dogs are owned by someone who lives in Virginia? List the guardian's first name and the dog's name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state ( Virginia ), zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed",
        "label": "dog_kennels | select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.first_name, t1.last_name, t2.owner_id from owners as t1 join dogs as t2 on t2.dog_id = t1.owner_id where t1.state = \"Virgina\"",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Find the given names of guardians living in Virginia and the names of dogs they own.",
        "context": "Find the given names of guardians living in Virginia and the names of dogs they own. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state ( Virginia ), zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is",
        "label": "dog_kennels | select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select date_arrived, date_departed from dogs where",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "What are the arriving and leaving date of the puppies who have gone through a medical care?",
        "context": "What are the arriving and leaving date of the puppies who have gone through a medical care? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of",
        "label": "dog_kennels | select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select date_arrived, date_departed from dogs where abandoned_yn = 'Health check'",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "Find the arriving and leaving date of the puppies that received a health care.",
        "context": "Find the arriving and leaving date of the puppies that received a health care. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the",
        "label": "dog_kennels | select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t2.date_of_birth desc limit 1",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "List the family name of the guardian owning the youngest puppy.",
        "context": "List the family name of the guardian owning the youngest puppy. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog",
        "label": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.age = ( select max(age) from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id order by t1.date_of_birth desc limit 1",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "Who owns the youngest puppy? Give me his or her last name.",
        "context": "Who owns the youngest puppy? Give me his or her last name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog",
        "label": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.age = ( select max(age) from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select email_address from professionals where state = \"Wisconsin\" or state = \"Wisconsin\"",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "List the emails of the veterinarians who live in the state of Hawaii or the state of Wisconsin.",
        "context": "List the emails of the veterinarians who live in the state of Hawaii or the state of Wisconsin. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state ( Wisconsin ), zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state ( Wisconsin, Hawaii ), zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed",
        "label": "dog_kennels | select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select email_address from owners where state = \"Wisconsin\" or state = \"Wisconsin\"",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "What are the emails of the veterinarians living in either the state of Hawaii or the state of Wisconsin?",
        "context": "What are the emails of the veterinarians living in either the state of Hawaii or the state of Wisconsin? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state ( Wisconsin ), zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state ( Wisconsin, Hawaii ), zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the",
        "label": "dog_kennels | select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select date_arrived, date_departed from dogs",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "What are the arriving and leaving date of all the puppies?",
        "context": "What are the arriving and leaving date of all the puppies? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ",
        "label": "dog_kennels | select date_arrived, date_departed from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select date_arrived, date_departed from dogs",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "List the arriving and leaving date for all the puppies.",
        "context": "List the arriving and leaving date for all the puppies. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the kenn",
        "label": "dog_kennels | select date_arrived, date_departed from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where date_arrived like \"%santa%\"",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "How many puppies went through any health cares?",
        "context": "How many puppies went through any health cares? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the kenne",
        "label": "dog_kennels | select count(distinct dog_id) from treatments",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where date_arrived like \"%santa%\"",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "Count the number of puppies that went through a health care.",
        "context": "Count the number of puppies that went through a health care. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in",
        "label": "dog_kennels | select count(distinct dog_id) from treatments",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(distinct t2.professional_id) from treatment_types as t1 join dogs as t2",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "How many veterinarians have performed any health care to puppies?",
        "context": "How many veterinarians have performed any health care to puppies? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ",
        "label": "dog_kennels | select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from treatments where treatment_type_code = 'PROF'",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "Find the number of veterinarians who have ever treated puppies.",
        "context": "Find the number of veterinarians who have ever treated puppies. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ",
        "label": "dog_kennels | select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select role_code, street, state from professionals where city like '%west%'",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Which veterinarians live in a city containing the substring 'West'? List his or her role, street, town and state.",
        "context": "Which veterinarians live in a city containing the substring 'West'? List his or her role, street, town and state. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of",
        "label": "dog_kennels | select role_code, street, city, state from professionals where city like '%west%'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.role_code, t2.street, t2.city, t2.state from owners as t1 join professional",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Find the role, street, town and state of the veterinarians living in a town that contains the substring 'West'.",
        "context": "Find the role, street, town and state of the veterinarians living in a town that contains the substring 'West'. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog",
        "label": "dog_kennels | select role_code, street, city, state from professionals where city like '%west%'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select first_name, last_name, email_address from owners where state like '%ny%'",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Which guardians live in the state whose name contains the substring 'North'? List his given name, family name and email.",
        "context": "Which guardians live in the state whose name contains the substring 'North'? List his given name, family name and email. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the",
        "label": "dog_kennels | select first_name, last_name, email_address from owners where state like '%north%'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select first_name, last_name, email_address from owners where state like '%ny%'",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Return the given name, family name and email of the guardians living in a state whose name contains the substring 'North'.",
        "context": "Return the given name, family name and email of the guardians living in a state whose name contains the substring 'North'. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of",
        "label": "dog_kennels | select first_name, last_name, email_address from owners where state like '%north%'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where age < (select avg(age) from dogs)",
        "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "How many puppies have an age below the average?",
        "context": "How many puppies have an age below the average? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the kenne",
        "label": "dog_kennels | select count(*) from dogs where age < ( select avg(age) from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where age < (select avg(age) from dogs)",
        "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "Count the number of puppies of an age below the average.",
        "context": "Count the number of puppies of an age below the average. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the",
        "label": "dog_kennels | select count(*) from dogs where age < ( select avg(age) from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select max(cost_of_treatment) from treatments",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "How much does the most recent health-care cost?",
        "context": "How much does the most recent health-care cost? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the kenn",
        "label": "dog_kennels | select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "Show me the cost of the most recently performed medical care.",
        "context": "Show me the cost of the most recently performed medical care. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ",
        "label": "dog_kennels | select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where dog_id not in ( select dog_id from treatment_types",
        "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "question": "How many puppies have not gone through any medical care?",
        "context": "How many puppies have not gone through any medical care? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the kenn",
        "label": "dog_kennels | select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where abandoned_yn = 'Health check'",
        "query": "SELECT count(*) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "Tell me the number of puppies that have received any health-care.",
        "context": "Tell me the number of puppies that have received any health-care. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in",
        "label": "dog_kennels | select count(*) from dogs where dog_id in ( select dog_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where abandoned_yn = '1';",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "How many guardians temporarily do not have any puppies?",
        "context": "How many guardians temporarily do not have any puppies? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the kenn",
        "label": "dog_kennels | select count(*) from owners where owner_id not in ( select owner_id from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where owner_id not in (select owner_id from owners)",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "Find the number of guardians who do not own any puppies at this moment.",
        "context": "Find the number of guardians who do not own any puppies at this moment. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the",
        "label": "dog_kennels | select count(*) from owners where owner_id not in ( select owner_id from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where dog_id not in ( select treatment_type_code from treatments )",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "How many veterinarians did not operate any treatment on puppies?",
        "context": "How many veterinarians did not operate any treatment on puppies? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ",
        "label": "dog_kennels | select count(*) from professionals where professional_id not in ( select professional_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where dog_id not in ( select treatment_type_code from treatments )",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "Find the number of veterinarians who have not treated any puppies.",
        "context": "Find the number of veterinarians who have not treated any puppies. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the",
        "label": "dog_kennels | select count(*) from professionals where professional_id not in ( select professional_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select name, age, weight from dogs where abandoned_yn = '1' and 0 = 'null'",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "List the puppy name, age and weight of the puppies who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "context": "List the puppy name, age and weight of the puppies who have been abandoned? 1 stands for yes, and 0 stands for no. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog",
        "label": "dog_kennels | select name, age, weight from dogs where abandoned_yn = 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select name, age, weight from dogs where abandoned_yn = '1' and 0 = 'null'",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "What are the puppy name, age and weight of the puppies that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "context": "What are the puppy name, age and weight of the puppies that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is",
        "label": "dog_kennels | select name, age, weight from dogs where abandoned_yn = 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select avg(age) from dogs",
        "query": "SELECT avg(age) FROM Dogs",
        "question": "What is the average age of all the puppies?",
        "context": "What is the average age of all the puppies? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the kenne",
        "label": "dog_kennels | select avg(age) from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select avg(age) from dogs",
        "query": "SELECT avg(age) FROM Dogs",
        "question": "Compute the average age of all the puppies.",
        "context": "Compute the average age of all the puppies. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the kenne",
        "label": "dog_kennels | select avg(age) from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select age from dogs order by age desc limit 1",
        "query": "SELECT max(age) FROM Dogs",
        "question": "What is the age of the oldest puppy?",
        "context": "What is the age of the oldest puppy? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the kennel",
        "label": "dog_kennels | select max(age) from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select max(age) from dogs",
        "query": "SELECT max(age) FROM Dogs",
        "question": "Tell me the age of the oldest puppy.",
        "context": "Tell me the age of the oldest puppy. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the kennel",
        "label": "dog_kennels | select max(age) from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select charge_type, charge_amount from charges",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "context": "How much does each charge type costs? List both charge type and amount. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog",
        "label": "dog_kennels | select charge_type, charge_amount from charges",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select charge_type, charge_amount from charges;",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "List each charge type and its amount.",
        "context": "List each charge type and its amount. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the kennel as",
        "label": "dog_kennels | select charge_type, charge_amount from charges",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select charge_type, sum(charge_amount) from charges group by charge_type order by sum(charge_type) desc limit 1",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "How much does the most expensive charge type costs?",
        "context": "How much does the most expensive charge type costs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the kenne",
        "label": "dog_kennels | select max(charge_amount) from charges",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select charge_amount from charges order by charge_type desc limit 1",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "What is the charge amount of the most expensive charge type?",
        "context": "What is the charge amount of the most expensive charge type? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ",
        "label": "dog_kennels | select max(charge_amount) from charges",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select email_address - cell_number, home_phone, t2.email_address from dogs as t1 join",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "List the email, cell phone and home phone of all the veterinarians.",
        "context": "List the email, cell phone and home phone of all the veterinarians. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog",
        "label": "dog_kennels | select email_address, cell_number, home_phone from professionals",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select email_address, cell_number - home_phone, t2.email_address from dogs as t1 join professionals as t2 on t1.dog_id = t2.email_address group by t2.email_address",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "What are the email, cell phone and home phone of each veterinarian?",
        "context": "What are the email, cell phone and home phone of each veterinarian? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in",
        "label": "dog_kennels | select email_address, cell_number, home_phone from professionals",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select breed_code, size_code from",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "What are all the possible breed type and size type combinations?",
        "context": "What are all the possible breed type and size type combinations? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ",
        "label": "dog_kennels | select distinct breed_code, size_code from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select distinct breed_code, size_code from",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "Find the distinct breed type and size type combinations for puppies.",
        "context": "Find the distinct breed type and size type combinations for puppies. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ",
        "label": "dog_kennels | select distinct breed_code, size_code from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.last_name, t2.email_address from dogs as t1 join treatment_types as t2",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "List the given name of all the veterinarians along with the description of the medical care they have done.",
        "context": "List the given name of all the veterinarians along with the description of the medical care they have done. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the",
        "label": "dog_kennels | select distinct t1.first_name, t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t2.treatment_type_code = t3.treatment_type_code",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.email_address, t1.home_phone from treatment_types as",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "What are each veterinarian's first name and describing details of the health-care they have performed?",
        "context": "What are each veterinarian's first name and describing details of the health-care they have performed? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: are types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: are guardians of pets. first_name is given name. zip_code is a number that identifies a particular postal delivery area; dogs: puppies. owner_id is the id of the guardian of the dog. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the",
        "label": "dog_kennels | select distinct t1.first_name, t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t2.treatment_type_code = t3.treatment_type_code",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "singer | select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many vocalists are there?",
        "context": "How many vocalists are there? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select count(*) from singer",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the count of  musicians?",
        "context": "What is the count of musicians? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select count(*) from singer",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer order by net_worth_millions asc",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "List the name of vocalists in ascending order of net worth.",
        "context": "List the name of vocalists in ascending order of net worth. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer order by net_worth_millions asc",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer order by net_worth_millions asc",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "What are the names of  musicians ordered by ascending net worth?",
        "context": "What are the names of musicians ordered by ascending net worth? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer order by net_worth_millions asc",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select birth_year, citizenship from singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth year and country of vocalists?",
        "context": "What are the birth year and country of vocalists? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select birth_year, citizenship from singer",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select birth_year, citizenship from singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth years and country of the musicians?",
        "context": "What are the birth years and country of the musicians? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select birth_year, citizenship from singer",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where citizenship!= 'France'",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "List the name of vocalists whose citizenship is not \"France\".",
        "context": "List the name of vocalists whose citizenship is not \"France\". | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship ( France ) | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer where citizenship!= \"France\"",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where citizenship!= \"France\"",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "What are the names of the musicians who are not French citizens?",
        "context": "What are the names of the musicians who are not French citizens? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer where citizenship!= \"France\"",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where birth_year = 1948 or birth_year = 1949",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "Show the name of vocalists whose birth year is either 1948 or 1949?",
        "context": "Show the name of vocalists whose birth year is either 1948 or 1949? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer where birth_year = 1948 or birth_year = 1949",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where birth_year = 1948 or birth_year = 1949",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "What are the names of the musicians whose birth years are either 1948 or 1949?",
        "context": "What are the names of the musicians whose birth years are either 1948 or 1949? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer where birth_year = 1948 or birth_year = 1949",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer order by net_worth_millions desc limit 1",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the vocalist with the largest net worth?",
        "context": "What is the name of the vocalist with the largest net worth? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer order by net_worth_millions desc limit 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer order by net_worth_millions desc limit 1",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the vocalist who is worth the most?",
        "context": "What is the name of the vocalist who is worth the most? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer order by net_worth_millions desc limit 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship, count(*) from singer group by citizenship",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenship of vocalists and the number of vocalists of each country.",
        "context": "Show different citizenship of vocalists and the number of vocalists of each country. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship, count(*) from singer group by citizenship",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "For each country, how many musicians are from that country?",
        "context": "For each country, how many musicians are from that country? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship, count(*) from singer group by citizenship",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common country of vocalists.",
        "context": "Please show the most common country of vocalists. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t1.",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the msot common vocalist country?",
        "context": "What is the msot common vocalist country? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select avg(net_worth_millions), max(net_worth_millions) from singer group by avg(net_worth_millions)",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "Show different country and the maximum net worth of musicians of each country.",
        "context": "Show different country and the maximum net worth of musicians of each country. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship, max(net_worth_millions) from singer group by citizenship",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select max(net_worth_millions),",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "For each country, what is the maximum net worth?",
        "context": "For each country, what is the maximum net worth? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship, max(net_worth_millions) from singer group by citizenship",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t1.title, t2.name from song as t1 join singer as t2 on t1.song_id = t2.song_i",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "Show names of songs and names of musicians.",
        "context": "Show names of songs and names of musicians. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select t2.title, t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t1.title, t2.name from song as t1 join singer as t2 on t1.song_id = t1.song_id where t2.name = \"Song_id\"",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "What are the song names and vocalist names?",
        "context": "What are the song names and vocalist names? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select t2.title, t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select distinct t2.name from song as t1 join singer as t2 on t1.song_id = t1.song_id where t1.sales > 300000",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "Show distinct names of musicians that have songs with sales more than 300000.",
        "context": "Show distinct names of musicians that have songs with sales more than 300000. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select distinct t2.name from song as t1 join singer as t2 on t1.song_id = t1.song_id where t1.sales > 300000",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "what are the different names of the vocalists that have sales more than 300000?",
        "context": "what are the different names of the vocalists that have sales more than 300000? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t2.name, t1.song_id from song as t1 join singer as t2 on t1.song_id = t1.song_id group by t1.song_id having count(*) > 1",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "Show the names of musicians that have more than one song.",
        "context": "Show the names of musicians that have more than one song. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name having count(*) > 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t2.name from song as t1 join singer as t2 on t1.song_id = t1.song_id group by t1.song_id having count(*) > 1",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "What are the names of the vocalists that have more than one songs?",
        "context": "What are the names of the vocalists that have more than one songs? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name having count(*) > 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t2.name, sum(t1.sales) from song as t1 join singer as t2 on t1.song_id = t2.song_id",
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "Show the names of musicians and the total sales of their songs.",
        "context": "Show the names of musicians and the total sales of their songs. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select t1.name, sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select sum(sales), t2.name from song as t1 join singer as t2 on t1.song_id = t1.song_id group by t2.name",
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "For each vocalist name, what is the total sales for their songs?",
        "context": "For each vocalist name, what is the total sales for their songs? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select t1.name, sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where singer_id not in (select singer_id from song)",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "List the name of musicians that do not have any song.",
        "context": "List the name of musicians that do not have any song. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer where singer_id not in (select singer_id from song)",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where singer_id not in (select singer_id from song)",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "What is the name of every vocalist that does not have any song?",
        "context": "What is the name of every vocalist that does not have any song? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer where singer_id not in (select singer_id from song)",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "question": "Show the citizenship shared by musicians with birth year before 1945 and after 1955.",
        "context": "Show the citizenship shared by musicians with birth year before 1945 and after 1955. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "question": "What are the country that are shared by musicians with a birth year before 1945 and after 1955?",
        "context": "What are the country that are shared by musicians with a birth year before 1945 and after 1955? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id, sales, highest_position | description | singer: vocalist or musician whi has and composes sngs. singer_id is the id of the singer. name is the vocalist name. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer/vocalist is from; song: short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "real_estate_properties | select count(*) from other_available_features",
        "query": "SELECT count(*) FROM Other_Available_Features",
        "question": "How many available characteristic are there in total?",
        "context": "How many available characteristic are there in total? | real_estate_properties | ref_feature_types : feature_type_code, feature_type_name | ref_property_types : property_type_code, property_type_description | other_available_features : feature_id, feature_type_code, feature_name, feature_description | properties : property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details | other_property_features : property_id, feature_id, property_feature_description | description | ref_feature_types: the feature types of the buildings are registered; ref_property_types: the property types are registered; other_available_features: available characteristic; properties: the property is a house, an apartment, a field, or another item on which a person has a legal title. date_on_market is the date of placing on the market for sale as datetime. date_sold is the date the property was sold as datetime. agreed_selling_price is the sale price agreed by the buyer and the seller; other_property_features: other features of the properties are recorded;",
        "label": "real_estate_properties | select count(*) from other_available_features",
        "db_id": "real_estate_properties",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Other_Available_Features",
            "Properties",
            "Other_Property_Features"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4
            ],
            "column_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_type_code",
                "feature_name",
                "feature_description",
                "property_id",
                "property_type_code",
                "date_on_market",
                "date_sold",
                "property_name",
                "property_address",
                "room_count",
                "vendor_requested_price",
                "buyer_offered_price",
                "agreed_selling_price",
                "apt_feature_1",
                "apt_feature_2",
                "apt_feature_3",
                "fld_feature_1",
                "fld_feature_2",
                "fld_feature_3",
                "hse_feature_1",
                "hse_feature_2",
                "hse_feature_3",
                "oth_feature_1",
                "oth_feature_2",
                "oth_feature_3",
                "shp_feature_1",
                "shp_feature_2",
                "shp_feature_3",
                "other_property_details",
                "property_id",
                "feature_id",
                "property_feature_description"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                6,
                10,
                35,
                36
            ],
            "other_column_id": [
                1,
                3,
                9,
                5
            ]
        }
    },
    {
        "prediction": "real_estate_properties | select feature_type_code from other_available_features where feature_name = 'AirCon'",
        "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "question": "What is the characteristic type of feature AirCon?",
        "context": "What is the characteristic type of feature AirCon? | real_estate_properties | ref_feature_types : feature_type_code, feature_type_name | ref_property_types : property_type_code, property_type_description | other_available_features : feature_id, feature_type_code, feature_name ( AirCon ), feature_description | properties : property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details | other_property_features : property_id, feature_id, property_feature_description | description | ref_feature_types: the feature types of the buildings are registered; ref_property_types: the property types are registered; other_available_features: available characteristic; properties: the property is a house, an apartment, a field, or another item on which a person has a legal title. date_on_market is the date of placing on the market for sale as datetime. date_sold is the date the property was sold as datetime. agreed_selling_price is the sale price agreed by the buyer and the seller; other_property_features: other features of the properties are recorded;",
        "label": "real_estate_properties | select t2.feature_type_name from other_available_features as t1 join ref_feature_types as t2 on t1.feature_type_code = t2.feature_type_code where t1.feature_name = \"AirCon\"",
        "db_id": "real_estate_properties",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Other_Available_Features",
            "Properties",
            "Other_Property_Features"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4
            ],
            "column_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_type_code",
                "feature_name",
                "feature_description",
                "property_id",
                "property_type_code",
                "date_on_market",
                "date_sold",
                "property_name",
                "property_address",
                "room_count",
                "vendor_requested_price",
                "buyer_offered_price",
                "agreed_selling_price",
                "apt_feature_1",
                "apt_feature_2",
                "apt_feature_3",
                "fld_feature_1",
                "fld_feature_2",
                "fld_feature_3",
                "hse_feature_1",
                "hse_feature_2",
                "hse_feature_3",
                "oth_feature_1",
                "oth_feature_2",
                "oth_feature_3",
                "shp_feature_1",
                "shp_feature_2",
                "shp_feature_3",
                "other_property_details",
                "property_id",
                "feature_id",
                "property_feature_description"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                6,
                10,
                35,
                36
            ],
            "other_column_id": [
                1,
                3,
                9,
                5
            ]
        }
    },
    {
        "prediction": "real_estate_properties | select t1.property_type_description from ref_property_types as t1 join properties as t2 on t1.property_type_code = t2.property_type_code",
        "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "context": "Show the property type descriptions of properties belonging to that code. | real_estate_properties | ref_feature_types : feature_type_code, feature_type_name | ref_property_types : property_type_code, property_type_description | other_available_features : feature_id, feature_type_code, feature_name, feature_description | properties : property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details | other_property_features : property_id, feature_id, property_feature_description | description | ref_feature_types: the feature types of the buildings are registered; ref_property_types: the property types are registered; other_available_features: available characteristic; properties: the property is a house, an apartment, a field, or another item on which a person has a legal title. date_on_market is the date of placing on the market for sale as datetime. date_sold is the date the property was sold as datetime. agreed_selling_price is the sale price agreed by the buyer and the seller; other_property_features: other features of the properties are recorded;",
        "label": "real_estate_properties | select t2.property_type_description from properties as t1 join ref_property_types as t2 on t1.property_type_code = t2.property_type_code group by t1.property_type_code",
        "db_id": "real_estate_properties",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Other_Available_Features",
            "Properties",
            "Other_Property_Features"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4
            ],
            "column_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_type_code",
                "feature_name",
                "feature_description",
                "property_id",
                "property_type_code",
                "date_on_market",
                "date_sold",
                "property_name",
                "property_address",
                "room_count",
                "vendor_requested_price",
                "buyer_offered_price",
                "agreed_selling_price",
                "apt_feature_1",
                "apt_feature_2",
                "apt_feature_3",
                "fld_feature_1",
                "fld_feature_2",
                "fld_feature_3",
                "hse_feature_1",
                "hse_feature_2",
                "hse_feature_3",
                "oth_feature_1",
                "oth_feature_2",
                "oth_feature_3",
                "shp_feature_1",
                "shp_feature_2",
                "shp_feature_3",
                "other_property_details",
                "property_id",
                "feature_id",
                "property_feature_description"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                6,
                10,
                35,
                36
            ],
            "other_column_id": [
                1,
                3,
                9,
                5
            ]
        }
    },
    {
        "prediction": "real_estate_properties | select t1.property_name from properties as t1 join properties as t2 on t1.property_id = t2.property_id where t1.property_type_code = \"Haus\" or t2.property_type_code = \"Apartment\"",
        "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "context": "What are the names of properties that are either houses or apartments with more than 1 room? | real_estate_properties | ref_feature_types : feature_type_code, feature_type_name | ref_property_types : property_type_code ( Apartment, House ), property_type_description | other_available_features : feature_id, feature_type_code, feature_name, feature_description | properties : property_id, property_type_code ( Apartment, House ), date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details | other_property_features : property_id, feature_id, property_feature_description | description | ref_feature_types: the feature types of the buildings are registered; ref_property_types: the property types are registered; other_available_features: available characteristic; properties: the property is a house, an apartment, a field, or another item on which a person has a legal title. date_on_market is the date of placing on the market for sale as datetime. date_sold is the date the property was sold as datetime. agreed_selling_price is the sale price agreed by the buyer and the seller; other_property_features: other features of the properties are recorded",
        "label": "real_estate_properties | select property_name from properties where property_type_code = \"House\" union select property_name from properties where property_type_code = \"Apartment\" and room_count > 1",
        "db_id": "real_estate_properties",
        "db_path": "/transformers_cache/downloads/extracted/7c499a28cf650026353ef5b443f560a844406907fac22b347e1e5ab21dd1e12b/spider-syn/database",
        "db_table_names": [
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Other_Available_Features",
            "Properties",
            "Other_Property_Features"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4
            ],
            "column_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_type_code",
                "feature_name",
                "feature_description",
                "property_id",
                "property_type_code",
                "date_on_market",
                "date_sold",
                "property_name",
                "property_address",
                "room_count",
                "vendor_requested_price",
                "buyer_offered_price",
                "agreed_selling_price",
                "apt_feature_1",
                "apt_feature_2",
                "apt_feature_3",
                "fld_feature_1",
                "fld_feature_2",
                "fld_feature_3",
                "hse_feature_1",
                "hse_feature_2",
                "hse_feature_3",
                "oth_feature_1",
                "oth_feature_2",
                "oth_feature_3",
                "shp_feature_1",
                "shp_feature_2",
                "shp_feature_3",
                "other_property_details",
                "property_id",
                "feature_id",
                "property_feature_description"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                6,
                10,
                35,
                36
            ],
            "other_column_id": [
                1,
                3,
                9,
                5
            ]
        }
    }
]