[
    {
        "prediction": "new_concert_singer | select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many singers do we have?",
        "context": "How many singers do we have? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select count(*) from singer",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the total number of singers?",
        "context": "What is the total number of singers? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select count(*) from singer",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select name, country from singer order by age desc",
        "query": "SELECT name ,  country  FROM singer ORDER BY birthday ASC",
        "question": "Show name, country for all singers ordered by age from the oldest to the youngest.",
        "context": "Show name, country for all singers ordered by age from the oldest to the youngest. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select name, country from singer order by birthday asc",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select name, country from singer order by age desc",
        "query": "SELECT name ,  country  FROM singer ORDER BY birthday ASC",
        "question": "What are the names, countries for every singer in descending order of age?",
        "context": "What are the names, countries for every singer in descending order of age? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select name, country from singer order by birthday asc",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select avg(country), min(country), max(country) from singer",
        "query": "SELECT avg(Singer_ID) ,  min(Singer_ID) ,  max(Singer_ID) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum id of all French singers?",
        "context": "What is the average, minimum, and maximum id of all French singers? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select avg(singer_id), min(singer_id), max(singer_id) from singer where country = 'France'",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select avg(country), min(country), max(country) from singer",
        "query": "SELECT avg(Singer_ID) ,  min(Singer_ID) ,  max(Singer_ID) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum id for French singers?",
        "context": "What is the average, minimum, and maximum id for French singers? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select avg(singer_id), min(singer_id), max(singer_id) from singer where country = 'France'",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select t3.name, t2.song_release_year from singer_in_concert as t1 join song as t2 on t1.song_id = t2.song_id join singer as t3 on t1.song_id = t3.song_id order by t1.birthday desc limit 1",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY birthday desc LIMIT 1",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "context": "Show the name and the release year of the song by the youngest singer. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select song_name, song_release_year from singer order by birthday desc limit 1",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select name, song_release_year from singer order by birthday limit 1",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY birthday desc LIMIT 1",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "context": "What are the names and release years for all the songs of the youngest singer? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select song_name, song_release_year from singer order by birthday desc limit 1",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select distinct country from singer where birth_year = 2001",
        "query": "SELECT DISTINCT country FROM singer WHERE birthday  like '2001%'",
        "question": "What are all distinct countries where singers born in 2001 are from?",
        "context": "What are all distinct countries where singers born in 2001 are from? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select distinct country from singer where birthday like '2001%'",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select distinct country from singer where birth_year = 2001",
        "query": "SELECT DISTINCT country FROM singer WHERE birthday  like  '2001%'",
        "question": "What are  the different countries with singers born in 2001?",
        "context": "What are the different countries with singers born in 2001? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select distinct country from singer where birthday like '2001%'",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select country, count(*) from singer group by country",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "Show all countries and the number of singers in each country.",
        "context": "Show all countries and the number of singers in each country. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select country, count(*) from singer group by country",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select country, count(*) from singer group by country",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "How many singers are from each country?",
        "context": "How many singers are from each country? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select country, count(*) from singer group by country",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select song_name from singer where age > (select avg(age) from singer)",
        "query": "SELECT song_name FROM singer WHERE birthday  <  (SELECT avg(birthday) FROM singer)",
        "question": "List all song names by singers above the average age.",
        "context": "List all song names by singers above the average age. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select song_name from singer where birthday < (select avg(birthday) from singer)",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select name from singer where birthday > (select avg(birthday) from singer)",
        "query": "SELECT song_name FROM singer WHERE birthday  <  (SELECT avg(birthday) FROM singer)",
        "question": "What are all the song names by singers who are older than average?",
        "context": "What are all the song names by singers who are older than average? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select song_name from singer where birthday < (select avg(birthday) from singer)",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select location, name from stadium where capacity between 5000 and 10000",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "context": "Show location and name for all stadiums with a capacity between 5000 and 10000. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select location, name from stadium where capacity between 5000 and 10000",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select location, name from stadium where capacity between 5000 and 10000",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "context": "What are the locations and names of all stations with capacity between 5000 and 10000? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select location, name from stadium where capacity between 5000 and 10000",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select avg(capacity), max(capacity) from stadium",
        "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
        "question": "What is the average and the highest capacity of all stadiums?",
        "context": "What is the average and the highest capacity of all stadiums? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select avg(capacity), max(capacity) from stadium",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select avg(capacity), max(capacity) from stadium",
        "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
        "question": "What is the average and highest capacities for all stations?",
        "context": "What is the average and highest capacities for all stations? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select avg(capacity), max(capacity) from stadium",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select name, capacity from stadium order by average desc limit 1",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "context": "What is the name and capacity for the stadium with highest average attendance? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select name, capacity from stadium order by average desc limit 1",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select name, capacity from stadium order by average desc limit 1",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "context": "What is the name and capacity for the stadium with the highest average attendance? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select name, capacity from stadium order by average desc limit 1",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select count(*) from concert where year > 2014",
        "query": "SELECT count(*) FROM concert WHERE YEAR  >=  2014",
        "question": "How many concerts are there after or in year 2014?",
        "context": "How many concerts are there after or in year 2014? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select count(*) from concert where year >= 2014",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select count(*) from concert where year > 2014",
        "query": "SELECT count(*) FROM concert WHERE YEAR  >=  2014",
        "question": "How many concerts occurred after or in 2014?",
        "context": "How many concerts occurred after or in 2014? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select count(*) from concert where year >= 2014",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "context": "Show the stadium name and the number of concerts in each stadium. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "For each stadium, how many concerts play there?",
        "context": "For each stadium, how many concerts play there? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select name, capacity from stadium order by capacity desc limit 1",
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "context": "Show the stadium name and capacity with most number of concerts in year 2014 or after. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select t2.name, t2.highest from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id join singer_in_concert as t3 on t1.song_id = t3.song_id where t1.year > 2013 group by t1.stadium_id order by avg(t1.attendance) desc limit 1",
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name and highest attendance of the stadium  with the most concerts after 2013?",
        "context": "What is the name and highest attendance of the stadium with the most concerts after 2013? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select concert_name from concert order by year desc limit 1",
        "query": "SELECT concert_Name FROM concert ORDER BY YEAR asc LIMIT 1",
        "question": "Which concert is the oldest?",
        "context": "Which concert is the oldest? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select concert_name from concert order by year asc limit 1",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select concert_name from concert order by year desc limit 1",
        "query": "SELECT concert_Name FROM concert ORDER BY YEAR asc LIMIT 1",
        "question": "Return the oldest concert name?",
        "context": "Return the oldest concert name? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select concert_name from concert order by year asc limit 1",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select highest from concert except select max(attendance) from concert",
        "query": "SELECT highest FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "Show the highest attendance without any concert.",
        "context": "Show the highest attendance without any concert. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select highest from stadium where stadium_id not in (select stadium_id from concert)",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select min(attendance) from stadium where stadium_id not in (select stadium_id from concert)",
        "query": "SELECT lowest FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "What are lowest attendance of the stadiums without any concerts?",
        "context": "What are lowest attendance of the stadiums without any concerts? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select lowest from stadium where stadium_id not in (select stadium_id from concert)",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select country from singer where birth_year = 1981 or birth_year = 1991",
        "query": "SELECT country FROM singer WHERE birthday  like  '1981%' or birthday  like  '1991%'",
        "question": "Show countries where a singer born in 1981 or 1991 are from.",
        "context": "Show countries where a singer born in 1981 or 1991 are from. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select country from singer where birthday like '1981%' or birthday like '1991%'",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select average from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014",
        "query": "SELECT average FROM stadium EXCEPT SELECT T2.average FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "Show average attendance for all stadiums except for stadiums having a concert in year 2014.",
        "context": "Show average attendance for all stadiums except for stadiums having a concert in year 2014. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select average from stadium except select t2.average from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select min(attendance) from stadium where stadium_id not in (select stadium_id from concert where year = 2014)",
        "query": "SELECT lowest FROM stadium EXCEPT SELECT T2.lowest FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "What are the lowest attendance of all stadiums that did not have a concert in 2014?",
        "context": "What are the lowest attendance of all stadiums that did not have a concert in 2014? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select lowest from stadium except select t2.lowest from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select t3.name, t3.theme, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id join singer as t3 on t1.song_id = t3.song_id group by t3.concert_id",
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "context": "Show the name and theme for all concerts and the number of singers in each concert. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select t2.concert_name, t2.theme, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select t3.name, t3.theme, count(*) from singer_in_concert as t1 join concert as t2 on t1.song_id = t2.song_id join singer as t3 on t1.song_id = t3.song_id group by t3.concert_id",
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "question": "What are the names, themes, and number of singers for each and every concert?",
        "context": "What are the names, themes, and number of singers for each and every concert? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select t2.concert_name, t2.theme, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select t2.name, count(*) from singer_in_concert as t1 join concert as t2 on t1.song_id = t2.song_id group by t1.song_id",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "List singer names and number of concerts for each singer.",
        "context": "List singer names and number of concerts for each singer. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select t2.name, count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.singer_id",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select t2.name, count(*) from singer_in_concert as t1 join concert as t2 on t1.song_id = t2.song_id group by t1.song_id",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "What are the names of the singers and number of concerts for each person?",
        "context": "What are the names of the singers and number of concerts for each person? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select t2.name, count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.singer_id",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select t3.name from singer_in_concert as t1 join concert as t2 on t1.song_id = t2.song_id join singer as t3 on t1.song_id = t3.song_id where t2.year > 2014",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  >=  2014",
        "question": "List all singer names in concerts after or in year 2014.",
        "context": "List all singer names in concerts after or in year 2014. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year >= 2014",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select t3.name from singer_in_concert as t1 join concert as t2 on t1.song_id = t2.song_id join singer as t3 on t1.song_id = t3.song_id where t2.year < 2014",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  <=  2014",
        "question": "What are the names of the singers who performed in a concert before or in 2014?",
        "context": "What are the names of the singers who performed in a concert before or in 2014? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year <= 2014",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select t1.name, t1.country from singer as t1 join singer_in_concert as t2 on t1.song_id = t2.song_id where t2.song_name like \"%hey%\"",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "context": "what is the name and nation of the singer who have a song having 'Hey' in its name? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select name, country from singer where song_name like '%hey%'",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select t1.name, t1.country from singer as t1 join singer_in_concert as t2 on t1.song_id = t2.song_id where t2.song_name like \"%hey%\"",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "context": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select name, country from singer where song_name like '%hey%'",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select min(attendance), max(attendance) from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2014 intersect select t1.lowest, t1.highest from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2015",
        "query": "SELECT T2.lowest ,  T2.highest FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "Find the lowest and highest attendance of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "context": "Find the lowest and highest attendance of the stadiums which some concerts happened in the years of both 2014 and 2015. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select t2.lowest, t2.highest from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select min(attendance), max(attendance) from stadium where year = 2014 intersect select t1.lowest, t1.highest from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2015",
        "query": "SELECT T2.lowest ,  T2.highest FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "What are the lowest and highest attendance of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "context": "What are the lowest and highest attendance of the stadiums that had concerts that occurred in both 2014 and 2015? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select t2.lowest, t2.highest from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t2.capacity = (select max(capacity) from stadium)",
        "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1",
        "question": "Find the number of concerts happened in the stadium with the highest capacity.",
        "context": "Find the number of concerts happened in the stadium with the highest capacity. | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id order by t2.capacity desc limit 1",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_concert_singer | select count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t2.capacity = (select max(capacity) from stadium)",
        "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1",
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity?",
        "context": "What are the number of concerts that occurred in the stadium with the largest capacity? | new_concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, birthday, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;",
        "label": "new_concert_singer | select count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id order by t2.capacity desc limit 1",
        "db_id": "new_concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Birthday",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select count(*) from pets where weight > 10",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "context": "Find the number of pets whose weight is heavier than 10. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select count(*) from pets where weight > 10",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select count(*) from pets where weight > 10",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "How many pets have a greater weight than 10?",
        "context": "How many pets have a greater weight than 10? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select count(*) from pets where weight > 10",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select t3.weight from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t1.stuid = t3.stuid where t2.pettype = 'dog' and t3.birthdate = (select min(birthdate) from pets)",
        "query": "SELECT weight FROM pets ORDER BY birthdate desc LIMIT 1",
        "question": "Find the weight of the youngest dog.",
        "context": "Find the weight of the youngest dog. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog ), birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select weight from pets order by birthdate desc limit 1",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select weight from pets order by weight asc limit 1",
        "query": "SELECT weight FROM pets ORDER BY birthdate desc LIMIT 1",
        "question": "How much does the youngest dog weigh?",
        "context": "How much does the youngest dog weigh? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog ), birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select weight from pets order by birthdate desc limit 1",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select max(weight), pettype from pets group by pettype",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "context": "Find the maximum weight for each type of pet. List the maximum weight and pet type. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select max(weight), pettype from pets group by pettype",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select pettype, max(weight), max(weight) from pets group by pettype",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "List the maximum weight and type for each type of pet.",
        "context": "List the maximum weight and type for each type of pet. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select max(weight), pettype from pets group by pettype",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid join student as t3 on t2.stuid = t3.stuid where t3.age > 20",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "Find number of pets owned by students who are older than 20.",
        "context": "Find number of pets owned by students who are older than 20. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.age > 20",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid join student as t3 on t2.stuid = t3.stuid where t3.age > 20;",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "context": "How many pets are owned by students that have an age greater than 20? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.age > 20",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid join student as t3 on t2.stuid = t3.stuid where t3.sex = 'F'",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "Find the number of puppy pets that are raised by female students (with sex F).",
        "context": "Find the number of puppy pets that are raised by female students (with sex F). | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t1.sex = 'F' and t3.pettype = 'dog'",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select count(*) from pets where sex = 'F'",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "How many puppy pets are raised by female students?",
        "context": "How many puppy pets are raised by female students? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t1.sex = 'F' and t3.pettype = 'dog'",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select count(distinct pettype) from pets",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "Find the number of distinct type of pets.",
        "context": "Find the number of distinct type of pets. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select count(distinct pettype) from pets",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select count(distinct pettype) from pets",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "How many different types of pet are there?",
        "context": "How many different types of pet are there? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select count(distinct pettype) from pets",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pettype = 'kitties' or t2.pettype = 'pudding'",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "Find the first name of students who have kitten or puppy pet.",
        "context": "Find the first name of students who have kitten or puppy pet. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' or t3.pettype = 'dog'",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' or t3.lname = 'cat'",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "What are the first names of every student who has a kitten or puppy as a pet?",
        "context": "What are the first names of every student who has a kitten or puppy as a pet? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' or t3.pettype = 'dog'",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select t1.fname, t1.lname from has_pet as t1 join pets as t2 on t1.stuid = t2.stuid where t2.pettype = 'kitten' intersect select t1.lname from has_pet as t1 join pets as t2 on t1.stuid = t2.stuid where t2.pettype = 'dog'",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "question": "Find the name of students who have both Kitten and puppy pets.",
        "context": "Find the name of students who have both Kitten and puppy pets. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select t1.fname from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = 'kitties' intersect select t1.fname from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = 'dog'",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "question": "What are the students' first names who have both kitten and puppy as pets?",
        "context": "What are the students' first names who have both kitten and puppy as pets? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select major, age from student where stuid not in (select stuid from has_pet where birthdate like '%cat%')",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the major and age of students who do not have a kitten pet.",
        "context": "Find the major and age of students who do not have a kitten pet. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select major, age from student where stuid not in (select stuid from has_pet)",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What major is every student who does not own a kitten as a pet, and also how old are they?",
        "context": "What major is every student who does not own a kitten as a pet, and also how old are they? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select stuid from student except select stuid from has_pet where pettype = 'cat'",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "Find the id of students who do not have a kitten pet.",
        "context": "Find the id of students who do not have a kitten pet. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat'",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select stuid from has_pet except select stuid from pets",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "What are the ids of the students who do not own kittens as pets?",
        "context": "What are the ids of the students who do not own kittens as pets? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat'",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select fname, age from has_pet where stuid not in (select stuid from has_pet where pettype = 'dog')",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the first name and age of students who have a dog but do not have a puppy as a pet.",
        "context": "Find the first name and age of students who have a dog but do not have a puppy as a pet. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog ), birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pettype = 'dog' except select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pettype = 'cat'",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What is the first name of every student who has a puppy but does not have a kitten?",
        "context": "What is the first name of every student who has a puppy but does not have a kitten? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select distinct t1.pettype, t1.weight from pets as t1 join has_pet as t2 on t1.petid = t2.petid order by t1.birthdate desc limit 1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY birthdate desc LIMIT 1",
        "question": "Find the type and weight of the youngest pet.",
        "context": "Find the type and weight of the youngest pet. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select pettype, weight from pets order by birthdate desc limit 1",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select pettype, weigh from pets order by weight asc limit 1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY birthdate desc LIMIT 1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "context": "What type of pet is the youngest animal, and how much does it weigh? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select pettype, weight from pets order by birthdate desc limit 1",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select petid, weight from pets where birthdate > (select max(birthdate) from pets where birthdate like \"2020%\")",
        "query": "SELECT petid ,  weight FROM pets WHERE birthdate  <  '2020-01-01'",
        "question": "Find the id and weight of all pets older than that born in 2020.",
        "context": "Find the id and weight of all pets older than that born in 2020. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select petid, weight from pets where birthdate < '2020-01-01'",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select t2.petid, t2.weight from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t1.birthdate > (select max(age) from pets where birthdate like \"2020)",
        "query": "SELECT petid ,  weight FROM pets WHERE birthdate  <  '2020-05-01'",
        "question": "What is the id and weight of every pet who is older than that born in 2020?",
        "context": "What is the id and weight of every pet who is older than that born in 2020? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select petid, weight from pets where birthdate < '2020-05-01'",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select pettype, avg(petid), max(petid) from pets group by pettype",
        "query": "SELECT avg(PetID) ,  max(PetID) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average and maximum id for each type of pet.",
        "context": "Find the average and maximum id for each type of pet. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select avg(petid), max(petid), pettype from pets group by pettype",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select pettype, avg(petid), max(petid) from pets group by pettype",
        "query": "SELECT avg(PetID) ,  max(PetID) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average and maximum id for each pet type?",
        "context": "What is the average and maximum id for each pet type? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select avg(petid), max(petid), pettype from pets group by pettype",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select pettype, avg(petid), max(petid) from pets group by pettype",
        "query": "SELECT avg(PetID) ,  max(PetID) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average and maximum id for each pet type.",
        "context": "Find the average and maximum id for each pet type. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select avg(petid), max(petid), pettype from pets group by pettype",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select pettype, avg(weight) from pets group by pettype",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average weight for each type of pet?",
        "context": "What is the average weight for each type of pet? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select avg(weight), pettype from pets group by pettype",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid",
        "query": "SELECT DISTINCT T1.fname , T1.LName ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "Find the name and age of students who have a pet.",
        "context": "Find the name and age of students who have a pet. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select distinct t1.fname, t1.lname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select distinct t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pettype = 'dog'",
        "query": "SELECT DISTINCT T1.fname , T1.LName  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "What are the different names and ages of the students who do have pets?",
        "context": "What are the different names and ages of the students who do have pets? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select distinct t1.fname, t1.lname t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select t2.petid from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t1.stuid = t3.stuid where t3.lname = 'Smith'",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "context": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select t2.petid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.lname = 'Smith'",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t3.stuid = t1.stuid where t3.lname = 'Smith'",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "context": "What is the id of the pet owned by the student whose last name is 'Smith'? | new_pets_1 | student : stuid, lname ( Smith ), fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select t2.petid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.lname = 'Smith'",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select count(*), t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid group by t1.stuid",
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "context": "Find the number of pets for each student who has any pet and student id. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select count(*), t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select count(*), t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid group by t1.stuid",
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "For students who have pets, how many pets does each student have?",
        "context": "For students who have pets, how many pets does each student have? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select count(*), t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "Find the first name and gender of student who have more than one pet.",
        "context": "Find the first name and gender of student who have more than one pet. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "context": "What is the first name and gender of the all the students who have more than one pet? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pettype = 'cat' and t2.birthdate = 2001",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.birthdate  like  '2001%' AND T3.pettype  =  'cat'",
        "question": "Find the last name of the student who has a cat that born in 2001.",
        "context": "Find the last name of the student who has a cat that born in 2001. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( cat ), birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.birthdate like '2001%' and t3.pettype = 'cat'",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.pettype = 'cat' and t2.birthdate = 2001",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.birthdate  like '2001%' AND T3.pettype  =  'cat'",
        "question": "What is the last name of the student who has a cat that born in 2001?",
        "context": "What is the last name of the student who has a cat that born in 2001? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( cat ), birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.birthdate like '2001%' and t3.pettype = 'cat'",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select avg(age) from student where stuid not in ( select stuid from has_pet );",
        "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
        "question": "Find the average age of students who do not have any pet.",
        "context": "Find the average age of students who do not have any pet. | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select avg(age) from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid)",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "new_pets_1 | select avg(age) from student where stuid not in (select stuid from has_pet)",
        "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
        "question": "What is the average age for all students who do not own any pets?",
        "context": "What is the average age for all students who do not own any pets? | new_pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, birthdate, weight | description | student: person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex is 'M' if the student is male, otherwise if a student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties;",
        "label": "new_pets_1 | select avg(age) from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid)",
        "db_id": "new_pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "birthdate",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from continents",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "How many continents are there?",
        "context": "How many continents are there? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from continents;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from continents",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "What is the number of continents?",
        "context": "What is the number of continents? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from continents;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.continent, t1.continent, count(*) from continents as t1 join countries as t2 on t1.continent = t2.id group by t1.continent",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "context": "How many countries does each continent have? List the continent id, continent name and the number of countries. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.contid, t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent group by t1.contid;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.continent, t1.countryname, count(*) from continents as t1 join countries as t2 on t1.continent = t2.id group by t1.continent",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "context": "For each continent, list its id, name, and how many countries it has? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.contid, t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent group by t1.contid;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(distinct countryid) from countries",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries are listed?",
        "context": "How many countries are listed? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from countries;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(distinct countryid) from countries",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries exist?",
        "context": "How many countries exist? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from countries;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.maker, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.car_id group by t1.id",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "context": "How many models does each car maker produce? List maker full name, id and the number. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.fullname, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.maker, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.car_id group by t1.id",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "context": "What is the full name of each car maker, along with its id and how many models it produces? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.fullname, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.model from model_list as t1 join cars as t2 on t1.model = t2.id where t2.pumpg = (select min(pumpg) from cars_data)",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "Which model of the car has the minimum horsepower?",
        "context": "Which model of the car has the minimum horsepower? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select model from car_makers order by horsepower asc limit 1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "context": "What is the model of the car with the smallest amount of horsepower? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select model from car_names where weight < (select avg(weight) from car_makers)",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "Find the model of the car whose weight is below the average weight.",
        "context": "Find the model of the car whose weight is below the average weight. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.weight < (select avg(weight) from cars_data)",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select model from model_list where weight < (select avg(weight) from cars_data)",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "What is the model for the car with a weight smaller than the average?",
        "context": "What is the model for the car with a weight smaller than the average? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.weight < (select avg(weight) from cars_data)",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.maker from car_makers as t1 join models_data as t2 on t1.id = t2.car_id where t2.year = 2000",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  >=  '2019';",
        "question": "Find the name of the makers that produced some cars in the past two years?",
        "context": "Find the name of the makers that produced some cars in the past two years? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model join cars_data as t4 on t3.makeid = t4.id where t4.year >= '2019';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct maker from model_list where year = 2",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  >=  '2019';",
        "question": "What is the name of the different car makers who produced a car in the past two years?",
        "context": "What is the name of the different car makers who produced a car in the past two years? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model join cars_data as t4 on t3.makeid = t4.id where t4.year >= '2019';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.make, t1.production from car_makers as t1 join models_data as t2 on t1.id = t2.car_id where t2.year = (select min(year) from car_makers)",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "context": "Find the make and production time of the cars that were produced in the earliest year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t2.make, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data);",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select maker, year from car_makers order by year asc limit 1",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "context": "What is the maker of the carr produced in the earliest year and what year was it? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t2.make, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data);",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct model from model_list where year < 1980",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  <=  1980;",
        "question": "Which distinct car models are the produced before or in 1980?",
        "context": "Which distinct car models are the produced before or in 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year <= 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct model from model_list where year < 1980",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  <=  1980;",
        "question": "What are the different models for the cards produced before or in 1980?",
        "context": "What are the different models for the cards produced before or in 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year <= 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.continent, count(*) from continents as t1 join car_makers as t2 on t1.contid = t2.id group by t1.contid",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "context": "How many car makers are there in each continents? List the continent name and the count. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent join car_makers as t3 on t2.countryid = t3.country group by t1.continent;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.continent, count(*) from continents as t1 join car_makers as t2 on t1.id = t2.continent group by t1.continent",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "context": "What is the name of each continent and how many car makers are there in each one? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent join car_makers as t3 on t2.countryid = t3.country group by t1.continent;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.countryid group by t1.countryid order by count(*) desc limit 1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "Which of the countries has the most car makers? List the country name.",
        "context": "Which of the countries has the most car makers? List the country name. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t2.countryname from car_makers as t1 join countries as t2 on t1.country = t2.countryid group by t1.country order by count(*) desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.countryid group by t1.countryid order by count(*) desc limit 1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "What is the name of the country with the most car makers?",
        "context": "What is the name of the country with the most car makers? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t2.countryname from car_makers as t1 join countries as t2 on t1.country = t2.countryid group by t1.country order by count(*) desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*), t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.car_id group by t1.maker",
        "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "question": "How many car models are produced by each maker? List the count and the maker full name.",
        "context": "How many car models are produced by each maker? List the count and the maker full name. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*), t2.fullname, t2.id from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.id, t1.fullname from car_makers as t1 join model_list as t2 on t1.id = t2.car_id group by t1.id",
        "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "context": "What is the number of car models that are produced by each maker and what is the id and full name of each maker? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*), t2.fullname, t2.id from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.accelerated from car_makers as t1 join model_list as t2 on t1.id = t2.car_id where t2.make = \"amc\" and t2.make = \"amc hornet\" and t1.sportabout = \"sw\"",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "context": "What is the accelerate of the car make amc hornet sportabout (sw)? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( amc ), fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( amc ) foreign key car_names | car_names : makeid foreign key cars_data, model ( amc ) foreign key model_list, make ( amc hornet, amc hornet sportabout (sw) ) | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.make = 'amc hornet sportabout (sw)';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select sum(t1.accelerated) from car_makers as t1 join model_list as t2 on t1.id = t2.car_id where t2.make = \"amc\" and t2.make = \"amc hornet\" and t1.sportabout = \"sw\"",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "context": "How much does the car accelerate that makes amc hornet sportabout (sw)? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( amc ), fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( amc ) foreign key car_names | car_names : makeid foreign key cars_data, model ( amc ) foreign key model_list, make ( amc hornet, amc hornet sportabout (sw) ) | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.make = 'amc hornet sportabout (sw)';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(distinct maker) from car_makers where country = \"Japanese\"",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'Japan';",
        "question": "How many Japanese car makers are there?",
        "context": "How many Japanese car makers are there? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.countryname = 'Japan';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(distinct maker) from countries where country = \"Japanese\"",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'Japan';",
        "question": "What is the number of makers of Japanese care?",
        "context": "What is the number of makers of Japanese care? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.countryname = 'Japan';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers where continent = 'america'",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "How many car models are produced in the america?",
        "context": "How many car models are produced in the america? | car_1 | continents : contid, continent ( america ) | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from model_list as t1 join car_makers as t2 on t1.maker = t2.id join countries as t3 on t2.country = t3.countryid where t3.countryname = 'usa';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers where country = \"United States\"",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "What is the count of the car models produced in the United States?",
        "context": "What is the count of the car models produced in the United States? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from model_list as t1 join car_makers as t2 on t1.maker = t2.id join countries as t3 on t2.country = t3.countryid where t3.countryname = 'usa';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(miles per gallon) from cars_data where cylinders = 4",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "context": "What is the average miles per gallon(mpg) of the cars with 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select avg(mpg) from cars_data where cylinders = 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(miles per gallon) from cars_data where cylinders = 4",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "context": "What is the average miles per gallon of all the cards with 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select avg(mpg) from cars_data where cylinders = 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select min(weight) from car_makers where year = 1974 and cylinders = 8",
        "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
        "context": "What is the smallest weight of the car produced with 8 cylinders on 1974? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select weight from cars_data where cylinders = 4 and year = 1974 order by weight asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select min(weight) from cars_data where year = 1974",
        "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
        "question": "What is the minimu weight of the car with 8 cylinders produced in 1974?",
        "context": "What is the minimu weight of the car with 8 cylinders produced in 1974? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select weight from cars_data where cylinders = 4 and year = 1974 order by weight asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select maker, model from car_makers",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are all the makers and models?",
        "context": "What are all the makers and models? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select maker, model from model_list;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select maker, model from model_list",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are the makers and models?",
        "context": "What are the makers and models? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select maker, model from model_list;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryname, t1.id from countries as t1 join car_makers as t2 on t1.countryid = t2.countryid group by t1.countryid having count(*) >= 1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the countries having at least one car maker? List name and id.",
        "context": "What are the countries having at least one car maker? List name and id. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.countryname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryname, t1.id from countries as t1 join car_makers as t2 on t1.countryid = t2.countryid group by t1.countryid having count(*) >= 1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "context": "What are the names and ids of all countries with at least one car maker? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.countryname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_makers where horsepower > 150",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of the cars with horsepower more than 150?",
        "context": "What is the number of the cars with horsepower more than 150? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from cars_data where horsepower > 150;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_makers where horsepower > 150",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "context": "What is the number of cars with a horsepower greater than 150? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from cars_data where horsepower > 150;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(weight), year from cars group by year",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight of cars each year?",
        "context": "What is the average weight of cars each year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select avg(weight), year from cars_data group by year;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(weight), year from cars_data group by year",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight and year for each year?",
        "context": "What is the average weight and year for each year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select avg(weight), year from cars_data group by year;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t2.continent = \"europe\" group by t1.country having count(*) >= 3",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "Which European countries have at least 3 car manufacturers?",
        "context": "Which European countries have at least 3 car manufacturers? | car_1 | continents : contid, continent ( europe ) | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.countryname from countries as t1 join continents as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.countryname having count(*) >= 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryname from countries as t1 join continents as t2 on t1.countryid = t2.continent where t2.continent = \"europe\" group by t1.countryid having count(*) >= 3",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "context": "What are the names of all European countries with at least 3 manufacturers? | car_1 | continents : contid, continent ( europe ) | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.countryname from countries as t1 join continents as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.countryname having count(*) >= 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(price), max(price), t1.make from car_makers as t1 join models as t2 on t1.id = t2.car_id where t2.cylinders = 3",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "context": "What is the maximum horsepower and the make of the car models with 3 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t2.horsepower, t1.make from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(phphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphphph",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "context": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t2.horsepower, t1.make from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select model from cars_data group by model order by sum(miles per gallon) desc limit 1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "context": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.model from model_list as t1 join cars as t2 on t1.model = t2.id order by t2.mpg desc limit 1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "What is the car wmodel with the highest mpg?",
        "context": "What is the car wmodel with the highest mpg? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(php) from cars_makers where year < 1980",
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <=  1980;",
        "question": "What is the average horsepower of the cars before or in 1980?",
        "context": "What is the average horsepower of the cars before or in 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select avg(horsepower) from cars_data where year <= 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(php) from cars_data where year < 1980",
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <=  1980;",
        "question": "What is the average horsepower for all cards produced before or in 1980?",
        "context": "What is the average horsepower for all cards produced before or in 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select avg(horsepower) from cars_data where year <= 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(edispl) from models where model = tesla",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'tesla';",
        "question": "What is the average edispl of the cars of model tesla?",
        "context": "What is the average edispl of the cars of model tesla? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'tesla';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(edispl) from cars_data",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'tesla';",
        "question": "What is the average edispl for all teslas?",
        "context": "What is the average edispl for all teslas? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'tesla';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(elevation), count(*) from cylinders group by t1.id",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "context": "What is the maximum accelerate for different number of cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select max(accelerate), cylinders from cars_data group by cylinders;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(elevation), cylinders from cars_data group by cylinders",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "context": "What is the maximum accelerate for all the different cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select max(accelerate), cylinders from cars_data group by cylinders;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select model from model_list where make = (select max(make) from cars)",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which model has the most version(make) of cars?",
        "context": "Which model has the most version(make) of cars? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select model from car_names group by model order by count(*) desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select model from model group by model order by count(*) desc limit 1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "What model has the most different versions?",
        "context": "What model has the most different versions? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select model from car_names group by model order by count(*) desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars where cylinders > 4",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "How many cars have more than 4 cylinders?",
        "context": "How many cars have more than 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from cars_data where cylinders > 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars where cylinders > 4",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "What is the number of cars with more than 4 cylinders?",
        "context": "What is the number of cars with more than 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from cars_data where cylinders > 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_makers where year = (select max(year) from cars_makers)",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  >=  2019;",
        "question": "how many cars were produced in the last two years?",
        "context": "how many cars were produced in the last two years? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from cars_data where year >= 2019;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers where make = 2",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  >=  2019;",
        "question": "In the last two years, how many cars were made?",
        "context": "In the last two years, how many cars were made? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from cars_data where year >= 2019;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(distinct t1.id) from model_list as t1 join car_makers as t2 on t1.car_id = t2.id where t2.name = \"American Motor\"",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "How many car models were produced by American Motor?",
        "context": "How many car models were produced by American Motor? | car_1 | continents : contid, continent ( america ) | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American motor Company';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from model_list as t1 join car_makers as t2 on t1.modelid = t2.id where t2.name = \"American Motor\"",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "What is the number of car models created by American Motor?",
        "context": "What is the number of car models created by American Motor? | car_1 | continents : contid, continent ( america ) | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American motor Company';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.fullname, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) > 3",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "context": "Which makers designed more than 3 car models? List full name and the id. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.fullname, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) > 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.maker, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.maker having count(*) > 3",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "context": "What are the names and ids of all makers with more than 3 models? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.fullname, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) > 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct t1.model from model_list as t1 join car_makers as t2 on t1.maker = t2.id where t2.fullname = \"General Motors\" or t2.weight > 3500",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "context": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname ( General Motors ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select distinct t2.model from car_names as t1 join model_list as t2 on t1.model = t2.model join car_makers as t3 on t2.maker = t3.id join cars_data as t4 on t1.makeid = t4.id where t3.fullname = 'General Motors' or t4.weight > 3500;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct t1.model from model_list as t1 join car_makers as t2 on t1.maker = t2.id where t2.fullname = \"General Motors\" or t2.weight > 3500",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "context": "What are the different models created by either the car maker General Motors or weighed more than 3500? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname ( General Motors ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select distinct t2.model from car_names as t1 join model_list as t2 on t1.model = t2.model join car_makers as t3 on t2.maker = t3.id join cars_data as t4 on t1.makeid = t4.id where t3.fullname = 'General Motors' or t4.weight > 3500;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select year from cars_data where weight < 3000 intersect select year from cars_makers where weight < 4000",
        "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000?",
        "context": "In which years cars were produced weighing no less than 3000 and no more than 4000? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select distinct t1.year from cars_data as t1 where t1.weight > 3000 and t1.weight < 4000;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct year from cars_data where weight < 4000 intersect select distinct year from cars_data where weight > 3000",
        "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?",
        "context": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select distinct t1.year from cars_data as t1 where t1.weight > 3000 and t1.weight < 4000;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.pumpg from car_makers as t1 join accelerate as t2 on t1.id = t2.car_id group by t2.car_id order by sum(t2.spent) desc limit 1",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the horsepower of the car with the largest accelerate?",
        "context": "What is the horsepower of the car with the largest accelerate? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select horsepower from cars_data order by accelerate desc limit 1",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "context": "What is the horsepower of the car with the greatest accelerate? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.cylinders, count(*) from car_names as t1 join models as t2 on t1.id = t2.modelid where t2.speed = (select min(speed) from cars_data)",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'tesla' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For model tesla, how many cylinders does the car with the least accelerate have?",
        "context": "For model tesla, how many cylinders does the car with the least accelerate have? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'tesla' order by t1.accelerate asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*), t1.cylinders from model_list as t1 join cars as t2 on t1.model = t2.id where t2.edispl = (select t1.model from model_list as t1 join cars as t2 on t1.model = t2.id where t2.edispl = \"2008\" group by t1.modelid order by count(*) asc limit 1)",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'tesla' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For a tesla model, how many cylinders does the version with least accelerate have?",
        "context": "For a tesla model, how many cylinders does the version with least accelerate have? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'tesla' order by t1.accelerate asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where accelerate > (select max(speed) from cars_data where horsepower = (select max(hph) from cars_makers)",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "context": "How many cars have a larger accelerate than the car with the largest horsepower? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 );",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where accelerate > (select max(accelerated) from cars_data where horsepower = (select max(pumpg) from cars_makers)",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "context": "What is the number of cars with a greater accelerate than the one with the most horsepower? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 );",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(distinct countryid) from car_makers group by continent having count(distinct countryid) > 2",
        "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
        "question": "How many countries has more than 2 car makers?",
        "context": "How many countries has more than 2 car makers? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from ( select t1.countryid, count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2 );",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(distinct countryid) from car_makers group by countryid having count(*) > 2",
        "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
        "question": "What is the number of countries with more than 2 car makers?",
        "context": "What is the number of countries with more than 2 car makers? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from ( select t1.countryid, count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2 );",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars where cylinders > 6",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "How many cars has over 6 cylinders?",
        "context": "How many cars has over 6 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from cars_data where cylinders > 6;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where cylinders > 6",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "context": "What is the number of carsw ith over 6 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select count(*) from cars_data where cylinders > 6;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.model = t2.id where t2.cylinders = 4 order by t2.pumpg desc limit 1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "context": "For the cars with 4 cylinders, which model has the largest horsepower? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.id from car_names as t1 join models as t2 on t1.model = t2.id where t2.cylinders = 4 and t2.pumpg = (select max(pumpg) from cars_data)",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "context": "For all of the 4 cylinder cars, which model has the most horsepower? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.makeid, t1.makeid from car_names as t1 join cars_data as t2 on t1.car_id = t2.id where t2.pumpg > 3 except select t1.makeid, t1.makeid from car_names as t1 join cars_data as t2 on t1.car_id = t2.id where t2.pumpg > 3",
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "context": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t2.makeid, t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders <= 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select id, make from cars_names where mpg = (select min(pumpg) from cars_data) and cylinders < 4",
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "question": "Among the cars that do not have the minimum horsepower, what are the make ids and names of al those with less than 4 cylinders?",
        "context": "Among the cars that do not have the minimum horsepower, what are the make ids and names of al those with less than 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t2.makeid, t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders <= 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(miles per gallon) from cars_data where cylinders < 1980",
        "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <=  1980 ORDER BY mpg DESC LIMIT 1;",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before or in 1980?",
        "context": "What is the maximum miles per gallon of the car with 8 cylinders or produced before or in 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select mpg from cars_data where cylinders = 8 or year <= 1980 order by mpg desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(mpg) from cars_data where cylinders >= 8 union select max(mpg) from cars_data where year < 1980",
        "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <=  1980 ORDER BY mpg DESC LIMIT 1;",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before or in 1980?",
        "context": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before or in 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select mpg from cars_data where cylinders = 8 or year <= 1980 order by mpg desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select model from model_list where weight < 3500 except select model from car_makers where model = 'Ford Motor'",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor'?",
        "context": "Which models are lighter than 3500 but not built by the 'Ford Motor'? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( ford ), fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( ford ) foreign key car_names | car_names : makeid foreign key cars_data, model ( ford ) foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname!= 'Ford motor Company';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct model from model_list where weight < 3500 except select distinct model from car_makers where model = \"Ford\"",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor?",
        "context": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( ford ), fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( ford ) foreign key car_names | car_names : makeid foreign key cars_data, model ( ford ) foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname!= 'Ford motor Company';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select countryname from countries where countryid not in (select countryid from car_makers)",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the name of the countries where there is not a single car maker?",
        "context": "What are the name of the countries where there is not a single car maker? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select countryname from countries where countryid not in (select countryid from car_makers)",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the names of the countries with no car makers?",
        "context": "What are the names of the countries with no car makers? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.car_id group by t1.id having count(*) >= 2 intersect select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.car_id group by t1.id having count(*) > 3",
        "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker.",
        "context": "Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.car_id group by t1.id having count(*) >= 2 intersect select t1.id, t1.maker from car_makers as t1 join models as t2 on t1.car_id = t2.id group by t1.id having count(*) > 3",
        "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "context": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.countryid where t2.maker = 'tesla' union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.countryid group by t1.countryid having count(*) > 3",
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'tesla';",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'tesla' model?",
        "context": "What are the id and names of the countries which have more than 3 car makers or produce the 'tesla' model? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'tesla';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.id, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.countryid group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.countryid where t2.maker = \"Telas\"",
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'tesla';",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce teslas?",
        "context": "What are the ids and names of all countries that either have more than 3 car makers or produce teslas? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;",
        "label": "car_1 | select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'tesla';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "flight_2 | select country from airlines where airline = 'JetBlue'",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which country does Airline \"JetBlue\" belong to?",
        "context": "Which country does Airline \"JetBlue\" belong to? | flight_2 | airlines : uid, airline, abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select country from airlines where airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select country from airlines where abbreviation = 'JetBlue Airways'",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What country is Jetblue affiliated with?",
        "context": "What country is Jetblue affiliated with? | flight_2 | airlines : uid, airline, abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select country from airlines where airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select abbreviation from airlines where abbreviation = 'JetBlue'",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What is the abbreviation of Airline \"JetBlue\"?",
        "context": "What is the abbreviation of Airline \"JetBlue\"? | flight_2 | airlines : uid, airline, abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select abbreviation from airlines where abbreviation = 'JetBlue'",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which abbreviation corresponds to JetBlue?",
        "context": "Which abbreviation corresponds to JetBlue? | flight_2 | airlines : uid, airline, abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airport, t1.abbreviation from airlines as t1 join flights as t2 on t1.uid = t2.airport where t1.abbreviation = 'American Airlines'",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "List all american airline names and their abbreviations.",
        "context": "List all american airline names and their abbreviations. | flight_2 | airlines : uid, airline ( American Airlines ), abbreviation ( American ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select airline, abbreviation from airlines where country = \"USA\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airportname, t1.abbreviation from airlines as t1 join flights as t2 on t1.uid = t2.airport where t1.abbreviation = 'American Airlines'",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "What are american airline names and abbreviations for airlines?",
        "context": "What are american airline names and abbreviations for airlines? | flight_2 | airlines : uid, airline ( American Airlines ), abbreviation ( American ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select airline, abbreviation from airlines where country = \"USA\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportcode, airportname from airports where city like \"%jenna%\"",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Jackson\"",
        "question": "List the airport code and name in Jackson.",
        "context": "List the airport code and name in Jackson. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select airportcode, airportname from airports where city = \"Jackson\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportcode, airportname from airports where city like \"%sylvania%\"",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Syracuse\"",
        "question": "Give the airport code and airport name corresonding to the Syracuse.",
        "context": "Give the airport code and airport name corresonding to the Syracuse. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select airportcode, airportname from airports where city = \"Syracuse\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "How many airlines do we have?",
        "context": "How many airlines do we have? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "What is the total number of airlines?",
        "context": "What is the total number of airlines? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "How many airports do we have?",
        "context": "How many airports do we have? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from airports",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "Return the number of  airports.",
        "context": "Return the number of airports. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from airports",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "How many flights do we have?",
        "context": "How many flights do we have? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "Return the number of flights.",
        "context": "Return the number of flights. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airline from airlines where abbreviation = 'UAL'",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Which airline has abbreviation 'UAL'?",
        "context": "Which airline has abbreviation 'UAL'? | flight_2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select airline from airlines where abbreviation = \"UAL\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airline from airlines where abbreviation = 'UAL'",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Give the airline with abbreviation 'UAL'.",
        "context": "Give the airline with abbreviation 'UAL'. | flight_2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select airline from airlines where abbreviation = \"UAL\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines where country = 'USA'",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "How many airlines are from America?",
        "context": "How many airlines are from America? | flight_2 | airlines : uid, airline, abbreviation ( American ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines where country = \"USA\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines where country = 'USA'",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "Return the number of airlines in the America.",
        "context": "Return the number of airlines in the America. | flight_2 | airlines : uid, airline, abbreviation ( American ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines where country = \"USA\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city, country from airports where airportname = 'Alton'",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Which city and country is the Alton airport at?",
        "context": "Which city and country is the Alton airport at? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Alton ), airportcode, airportname ( Alton ), country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select city, country from airports where airportname = \"Alton\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city, country from airports where airportname = 'Alton'",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Give the city and country for the Alton airport.",
        "context": "Give the city and country for the Alton airport. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Alton ), airportcode, airportname ( Alton ), country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select city, country from airports where airportname = \"Alton\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportname from airports where airportcode = 'AKO'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "What is the airport name for airport 'AKO'?",
        "context": "What is the airport name for airport 'AKO'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AKO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AKO ) foreign key airports, destairport ( AKO ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select airportname from airports where airportcode = \"AKO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportname from airports where airportcode = 'AKO'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "Return the name of the airport with code 'AKO'.",
        "context": "Return the name of the airport with code 'AKO'. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AKO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AKO ) foreign key airports, destairport ( AKO ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select airportname from airports where airportcode = \"AKO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportname from airports where airportname = 'Jackson'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Jackson\"",
        "question": "What are airport names at 'Jackson'?",
        "context": "What are airport names at 'Jackson'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select airportname from airports where city = \"Jackson\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportname from airports where city = 'Janessa'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Jackson\"",
        "question": "What are the names of airports in Jackson?",
        "context": "What are the names of airports in Jackson? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select airportname from airports where city = \"Jackson\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where sourceairport = 'APG'",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "How many flights depart from 'APG'?",
        "context": "How many flights depart from 'APG'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ) foreign key airports, destairport ( APG ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights where sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where sourceairport = 'APG'",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Count the number of flights departing from 'APG'.",
        "context": "Count the number of flights departing from 'APG'. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ) foreign key airports, destairport ( APG ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights where sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where airportcode = 'ATO'",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "How many flights have destination ATO?",
        "context": "How many flights have destination ATO? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights where destairport = \"ATO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where airportcode = 'ATO'",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "Count the number of flights into ATO.",
        "context": "Count the number of flights into ATO. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights where destairport = \"ATO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where destairport = \"Janessa\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "How many flights depart from Jackson?",
        "context": "How many flights depart from Jackson? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Jackson\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where destairport = \"Janessa\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "Return the number of flights departing from Jackson.",
        "context": "Return the number of flights departing from Jackson. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Jackson\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where city = \"Janessa\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "How many flights arriving in Jackson city?",
        "context": "How many flights arriving in Jackson city? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Jackson\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where country = 'Janessa'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "Return the number of flights arriving in Jackson.",
        "context": "Return the number of flights arriving in Jackson. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Jackson\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where city = 'Syracuse' and city = 'Ashley'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Syracuse\"",
        "question": "How many flights depart from City 'Syracuse' and have destination City 'Ashley'?",
        "context": "How many flights depart from City 'Syracuse' and have destination City 'Ashley'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Ashley ), airportcode, airportname ( Ashley ), country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airports as t3 on t1.sourceairport = t3.airportcode where t2.city = \"Ashley\" and t3.city = \"Syracuse\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.airport = t2.airport where t2.city = 'Staford' and t2.airportname = 'Ashley'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Syracuse\"",
        "question": "How many flights fly from Syracuse to Ashley?",
        "context": "How many flights fly from Syracuse to Ashley? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Ashley ), airportcode, airportname ( Ashley ), country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airports as t3 on t1.sourceairport = t3.airportcode where t2.city = \"Ashley\" and t3.city = \"Syracuse\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airport where t1.abbreviation = 'JetBlue'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "How many flights does airline 'JetBlue' have?",
        "context": "How many flights does airline 'JetBlue' have? | flight_2 | airlines : uid, airline, abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airlines as t2 on t1.airline = t2.uid where t2.airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airport where t1.abbreviation = 'JetBlue Airways'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "Give the number of Jetblue flights.",
        "context": "Give the number of Jetblue flights. | flight_2 | airlines : uid, airline, abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airlines as t2 on t1.airline = t2.uid where t2.airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.airport = t2.sourceairport where t2.airportcode = 'ASY'",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"JetBlue Airways\" AND T2.DestAirport  =  \"ASY\"",
        "question": "How many 'JetBlue' flights go to Airport 'ASY'?",
        "context": "How many 'JetBlue' flights go to Airport 'ASY'? | flight_2 | airlines : uid, airline, abbreviation ( JetBlue ), country | airports : city, airportcode ( ASY ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"JetBlue Airways\" and t2.destairport = \"ASY\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.airport = t2.airport where t2.airportcode = 'ASY'",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"JetBlue Airways\" AND T2.DestAirport  =  \"ASY\"",
        "question": "Count the number of JetBlue flights arriving in ASY Airport.",
        "context": "Count the number of JetBlue flights arriving in ASY Airport. | flight_2 | airlines : uid, airline, abbreviation ( JetBlue ), country | airports : city, airportcode ( ASY ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"JetBlue Airways\" and t2.destairport = \"ASY\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.airport = t2.airport where t2.airport = 'AHD' and t2.fleetno = 'JetBlue'",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"JetBlue Airways\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "How many 'JetBlue' flights depart from Airport 'AHD'?",
        "context": "How many 'JetBlue' flights depart from Airport 'AHD'? | flight_2 | airlines : uid, airline, abbreviation ( JetBlue ), country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ) foreign key airports, destairport ( AHD ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"JetBlue Airways\" and t2.sourceairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.airport = t2.airport where t2.airport = 'AHD'",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"JetBlue Airways\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "Return the number of JetBlue flights leaving from AHD Airport.",
        "context": "Return the number of JetBlue flights leaving from AHD Airport. | flight_2 | airlines : uid, airline, abbreviation ( JetBlue ), country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ) foreign key airports, destairport ( AHD ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"JetBlue Airways\" and t2.sourceairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.airport = t2.airport where t2.city = 'Aberdeen'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"JetBlue Airways\"",
        "question": "How many JetBlue flights go to City 'Aberdeen'?",
        "context": "How many JetBlue flights go to City 'Aberdeen'? | flight_2 | airlines : uid, airline, abbreviation ( JetBlue ), country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airlines as t3 on t3.uid = t1.airline where t2.city = \"Aberdeen\" and t3.airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.airport = t2.destairport where t2.city = 'Aberdeen'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"JetBlue Airways\"",
        "question": "Count the number of JetBlue flights that arrive in Aberdeen.",
        "context": "Count the number of JetBlue flights that arrive in Aberdeen. | flight_2 | airlines : uid, airline, abbreviation ( JetBlue ), country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airlines as t3 on t3.uid = t1.airline where t2.city = \"Aberdeen\" and t3.airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city from flights group by city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of arriving flights?",
        "context": "Which city has most number of arriving flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.destairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city from airport group by city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has the most frequent destination airport?",
        "context": "Which city has the most frequent destination airport? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.destairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city from flights group by city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of departing flights?",
        "context": "Which city has most number of departing flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city from airports group by city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city is the most frequent source airport?",
        "context": "Which city is the most frequent source airport? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportcode from flights group by airportcode order by count(*) desc limit 1",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of airport that has the highest number of flights?",
        "context": "What is the code of airport that has the highest number of flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airport = t2.airport group by t1.airportcode order by count(*) desc limit 1",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the airport code of the airport with the most flights?",
        "context": "What is the airport code of the airport with the most flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportcode from flights group by airportcode order by count(*) limit 1",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "What is the code of airport that has fewest number of flights?",
        "context": "What is the code of airport that has fewest number of flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportcode from flights group by airportcode order by count(*) asc limit 1",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "Give the code of the airport with the least flights.",
        "context": "Give the code of the airport with the least flights. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airline from flights group by airline order by count(*) desc limit 1",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "Which airline has most number of flights?",
        "context": "Which airline has most number of flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.aircraft from flights as t1 join airlines as t2 on t1.airport = t2.airport group by t2.airport order by count(*) desc limit 1",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "What airline serves the most flights?",
        "context": "What airline serves the most flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airport group by t2.uid order by count(*) limit 1",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "context": "Find the abbreviation and country of the airline that has fewest number of flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select abbreviation, country from flights group by countryabbrev order by count(*) limit 1",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "context": "What is the abbreviation of the airilne has the fewest flights and what country is it in? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.aircraft from airlines as t1 join flights as t2 on t1.uid = t2.airport where t2.airport = 'AHD'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "context": "What are airlines that have some flight departing from airport 'AHD'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ) foreign key airports, destairport ( AHD ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.aircraft from airlines as t1 join flights as t2 on t1.uid = t2.airport where t2.sourceairport = 'AHD'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with source airport AHD?",
        "context": "Which airlines have a flight with source airport AHD? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ) foreign key airports, destairport ( AHD ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.aircraft from airlines as t1 join flights as t2 on t1.uid = t2.airport where t2.airport = 'AHD'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "context": "What are airlines that have flights arriving at airport 'AHD'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ) foreign key airports, destairport ( AHD ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.destairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.aircraft from airlines as t1 join flights as t2 on t1.uid = t2.airport where t2.airport = 'AHD'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with destination airport AHD?",
        "context": "Which airlines have a flight with destination airport AHD? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ) foreign key airports, destairport ( AHD ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.destairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.aircraft from airlines as t1 join flights as t2 on t1.uid = t2.airport where t2.airport = 'APG' intersect select t1.aircraft from airlines as t1 join flights as t2 on t1.airport = t2.airport where t2.airport = 'CVO'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "context": "Find all airlines that have flights from both airports 'APG' and 'CVO'. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( CVO, APG ) foreign key airports, destairport ( CVO, APG ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airport where t2.airportcode = 'APG' intersect select t1.airline from airlines as t1 join flights as t2 on t1.airport = t2.airport where t2.destairport = 'CVO'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "context": "Which airlines have departing flights from both APG and CVO airports? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( CVO, APG ) foreign key airports, destairport ( CVO, APG ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.aircraft from airlines as t1 join flights as t2 on t1.uid = t2.airport where t2.airport = 'CVO' except select t1.aircraft from airlines as t1 join flights as t2 on t1.uid = t2.airport where t2.airport = 'APG'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "context": "Find all airlines that have flights from airport 'CVO' but not from 'APG'. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( CVO, APG ) foreign key airports, destairport ( CVO, APG ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.aircraft from airlines as t1 join flights as t2 on t1.uid = t2.airport where t2.airport = \"CVO\" except select t1.aircraft from airlines as t1 join flights as t2 on t1.airport = t2.airport where t2.airport = \"APG\"",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "context": "Which airlines have departures from CVO but not from APG airports? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( CVO, APG ) foreign key airports, destairport ( CVO, APG ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.aircraft from airlines as t1 join flights as t2 on t1.uid = t2.airport group by t2.uid having count(*) >= 10",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Find all airlines that have at least 10 flights.",
        "context": "Find all airlines that have at least 10 flights. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) > 10",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.aircraft from airlines as t1 join flights as t2 on t1.uid = t2.airport group by t1.uid having count(*) >= 10",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Which airlines have at least 10 flights?",
        "context": "Which airlines have at least 10 flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) > 10",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airline from flights group by airline having count(*) < 200",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Find all airlines that have fewer than 200 flights.",
        "context": "Find all airlines that have fewer than 200 flights. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) < 200",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airline from flights group by airline having count(*) < 200",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Which airlines have less than 200 flights?",
        "context": "Which airlines have less than 200 flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) < 200",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where abbreviation = \"JetBlue\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"JetBlue Airways\"",
        "question": "What are flight numbers belonging to \"JetBlue\"?",
        "context": "What are flight numbers belonging to \"JetBlue\"? | flight_2 | airlines : uid, airline, abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.flightno from flights as t1 join airlines as t2 on t2.uid = t1.airline where t2.airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where abbreviation = \"JetBlue\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"JetBlue Airways\"",
        "question": "Which flight numbers correspond to JetBlue flights?",
        "context": "Which flight numbers correspond to JetBlue flights? | flight_2 | airlines : uid, airline, abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.flightno from flights as t1 join airlines as t2 on t2.uid = t1.airline where t2.airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where sourceairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "context": "What are flight numbers of flights departing from Airport \"APG\"? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ) foreign key airports, destairport ( APG ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select flightno from flights where sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where sourceairport = 'APG'",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights leaving from APG.",
        "context": "Give the flight numbers of flights leaving from APG. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ) foreign key airports, destairport ( APG ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select flightno from flights where sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where sourceairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "context": "What are flight numbers of flights arriving at Airport \"APG\"? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ) foreign key airports, destairport ( APG ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select flightno from flights where destairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where airportcode = 'APG'",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights landing at APG.",
        "context": "Give the flight numbers of flights landing at APG. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ) foreign key airports, destairport ( APG ) foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select flightno from flights where destairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where flight from \"Jackson\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "What are flight numbers of flights departing from \"Jackson\"?",
        "context": "What are flight numbers of flights departing from \"Jackson\"? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Jackson\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where destairport = \"Janessa\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "Give the flight numbers of flights leaving from Jackson.",
        "context": "Give the flight numbers of flights leaving from Jackson. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Jackson\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where airport = \"Jackson\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "What are flight numbers of flights arriving at \"Jackson\"?",
        "context": "What are flight numbers of flights arriving at \"Jackson\"? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Jackson\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where country = 'Janessa'",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "Give the flight numbers of flights arriving in Jackson.",
        "context": "Give the flight numbers of flights arriving in Jackson. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Jackson\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where city = \"Sylvania\" or city = \"Janessa\"",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Syracuse\" OR T2.city  =  \"Jackson\"",
        "question": "Find the number of flights landing in the  Syracuse or Jackson.",
        "context": "Find the number of flights landing in the Syracuse or Jackson. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Syracuse\" or t2.city = \"Jackson\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where city = \"Sylvania\" or city = \"Janessa\"",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Syracuse\" OR T2.city  =  \"Jackson\"",
        "question": "How many flights land in Syracuse or Jackson?",
        "context": "How many flights land in Syracuse or Jackson? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Syracuse\" or t2.city = \"Jackson\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportname from airports where airportcode not in (select airportname from flights)",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Find the name of airports which do not have any flight in and out.",
        "context": "Find the name of airports which do not have any flight in and out. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportname from airports except select t1.airport from airports as t1 join flights as t2 on t1.airport = t2.airportport",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Which airports do not have departing or arriving flights?",
        "context": "Which airports do not have departing or arriving flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airline is a company that provides air transport services for traveling passengers and freight. airline is the name of the airline, such as 'JetBlue Airways'. abbreviation is the shortened word. country is the state of the airline such as 'USA'; airlines use aircraft to supply these services. airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. country is the country in which the aiport is located. countryabbrev is the country abbreviation; flights: a flight is a journey from a source airport to a destination airport. airline is the airline id which performs the flight. flightno is the flight number. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from documents",
        "query": "SELECT count(*) FROM Documents",
        "question": "How many documents do we have?",
        "context": "How many documents do we have? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from documents",
        "query": "SELECT count(*) FROM Documents",
        "question": "Count the number of documents.",
        "context": "Count the number of documents. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id, document_name, document_description from documents",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "List document IDs with its names and descriptions.",
        "context": "List document IDs with its names and descriptions. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id, document_name, document_description from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id, document_name, document_description from documents",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "Show all the ids with its names and descriptions for all documents?",
        "context": "Show all the ids with its names and descriptions for all documents? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id, document_name, document_description from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_name from documents as t1 join templates as t2 on t1.freeze_id = t2.freeze_id where t2.document_description like '%w%'",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "Show the name with template id of documents with description with the letter 'w' in it?",
        "context": "Show the name with template id of documents with description with the letter 'w' in it? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_name, template_id from documents where document_description like \"%w%\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_name, template_id from documents where document_description like \"%w%\"",
        "query": "SELECT document_name , Document_ID, template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "Return the names with document and template ids for documents that contain the letter w in their description.",
        "context": "Return the names with document and template ids for documents that contain the letter w in their description. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_name, document_id, template_id from documents where document_description like \"%w%\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_description, template_id from documents where document_name = \"Robbin CV\"",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "What is the description for document named \"Robbin CV\" with its document and template id?",
        "context": "What is the description for document named \"Robbin CV\" with its document and template id? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( CV ) | templates : template_id, version_number, template_type_code ( CV ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Robbin CV ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_description, template_id from documents where document_name = \"Robbin CV\"",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "Return the description with document and template id of the document with the name Robbin CV.",
        "context": "Return the description with document and template id of the document with the name Robbin CV. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( CV ) | templates : template_id, version_number, template_type_code ( CV ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Robbin CV ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(distinct template_id) from documents",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "How many different templates do all document use?",
        "context": "How many different templates do all document use? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(distinct template_id) from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(distinct template_id) from documents",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "Count the number of different templates used for documents.",
        "context": "Count the number of different templates used for documents. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(distinct template_id) from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates where template_type_code = \"PPT\"",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "How many documents are using the PPT template?",
        "context": "How many documents are using the PPT template? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ), template_type_description | templates : template_id, version_number, template_type_code ( PPT ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = 'PPT'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates where template_type_code = \"PPT\"",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "Count the number of documents that use the PPT template type.",
        "context": "Count the number of documents that use the PPT template type. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ), template_type_description | templates : template_id, version_number, template_type_code ( PPT ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = 'PPT'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id, count(*) from documents group by template_id",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "Show all template ids and the number of documents using each template.",
        "context": "Show all template ids and the number of documents using each template. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id, count(*) from documents group by template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*), t1.type_id from templates as t1 join documents as t2 on t1.type_id = t2.type_id group by t1.type_id",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "context": "What are all different template ids used for documents, and how many times were each of them used? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id, count(*) from documents group by template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.date_effective_to from templates as t1 join documents as t2 on t1.model_id = t2.model_id group by t1.model_id order by count(*) desc limit 1",
        "query": "SELECT T2.Date_Effective_From ,  T2.Date_Effective_To FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the effective date period for the template used by the most documents?",
        "context": "What is the effective date period for the template used by the most documents? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t2.date_effective_from, t2.date_effective_to from documents as t1 join templates as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.date_effective_to from templates as t1 join documents as t2 on t1.model_id = t2.model_id group by t1.model_id order by count(*) desc limit 1",
        "query": "SELECT T2.Date_Effective_From ,  T2.Date_Effective_To FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the effective date range of the template that is used for the greatest number of documents.",
        "context": "Return the effective date range of the template that is used for the greatest number of documents. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t2.date_effective_from, t2.date_effective_to from documents as t1 join templates as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from documents group by template_id having count(*) > 1",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "Show ids for all templates that are used by more than one document.",
        "context": "Show ids for all templates that are used by more than one document. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id from documents group by template_id having count(*) > 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from documents group by template_id having count(*) > 1",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "What are the template ids of any templates used in more than a single document?",
        "context": "What are the template ids of any templates used in more than a single document? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id from documents group by template_id having count(*) > 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from templates except select template_id from documents",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "Show ids for all templates not used by any document.",
        "context": "Show ids for all templates not used by any document. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id from templates except select template_id from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from templates except select template_id from documents",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "What are the ids for templates that are not used in any documents?",
        "context": "What are the ids for templates that are not used in any documents? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id from templates except select template_id from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates",
        "query": "SELECT count(*) FROM Templates",
        "question": "How many templates do we have?",
        "context": "How many templates do we have? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates",
        "query": "SELECT count(*) FROM Templates",
        "question": "Count the number of templates.",
        "context": "Count the number of templates. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_from, template_type_code from templates",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates",
        "question": "Show effective date period, and template type codes for all templates.",
        "context": "Show effective date period, and template type codes for all templates. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_from, template_type_code from templates",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates",
        "question": "What are the effective date period, and type codes for each template?",
        "context": "What are the effective date period, and type codes for each template? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates",
        "question": "Show all effective date period for all templates.",
        "context": "Show all effective date period for all templates. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_from from templates",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates",
        "question": "What are the effective date range from to?",
        "context": "What are the effective date range from to? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates where template_type_code = 'PP' or template_type_code = 'PPT'",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "What are the effective date range with template type code PP or PPT?",
        "context": "What are the effective date range with template type code PP or PPT? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT, PP ), template_type_description | templates : template_id, version_number, template_type_code ( PPT, PP ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates where template_type_code = 'PP' or template_type_code = 'PPT'",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "Return the effective date range that have the code PP or PPT.",
        "context": "Return the effective date range that have the code PP or PPT. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT, PP ), template_type_description | templates : template_id, version_number, template_type_code ( PPT, PP ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_to from documents as t1 join templates as t2 on t1.model_id = t2.model_id where t2.model_type_code = \"CV\"",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "Give me the effective date period whose template type code is CV?",
        "context": "Give me the effective date period whose template type code is CV? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( CV ) | templates : template_id, version_number, template_type_code ( CV ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates where template_type_code = \"CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates where template_type_code = \"CV\"",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "Return the effective date period of the template type CV.",
        "context": "Return the effective date period of the template type CV. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( CV ) | templates : template_id, version_number, template_type_code ( CV ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates where template_type_code = \"CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_from, template_type_code from templates where version_number < 5",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "What is the effective date period and template type code for the template with version number later than 5?",
        "context": "What is the effective date period and template type code for the template with version number later than 5? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, template_type_code from templates where version_number > 5",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_from, template_type_code from templates where version_number > 5",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "Return the effective date period and template type codes of templates with a version number greater than 5.",
        "context": "Return the effective date period and template type codes of templates with a version number greater than 5. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, template_type_code from templates where version_number > 5",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_from, count(*) from templates group by date_effective_to",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "Show all effective date period and number of templates for each.",
        "context": "Show all effective date period and number of templates for each. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, count(*) from templates group by template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_to, count(*) from templates group by date_effective_to",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "What are the effective date period, and how many templates correspond to each?",
        "context": "What are the effective date period, and how many templates correspond to each? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, count(*) from templates group by template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates group by date_effective_to order by count(*) desc limit 1",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which effective date period has most number of templates?",
        "context": "Which effective date period has most number of templates? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates group by template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates group by date_effective_to order by count(*) desc limit 1",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the effective date period that the most templates belong to.",
        "context": "Return the effective date period that the most templates belong to. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates group by template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_to from documents group by date_effective_to having count(*) < 3",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "Show all effective date period with less than three templates.",
        "context": "Show all effective date period with less than three templates. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates group by template_type_code having count(*) < 3",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates group by date_effective_to having count(*) < 3",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "What are the effective date period that have fewer than 3 templates?",
        "context": "What are the effective date period that have fewer than 3 templates? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates group by template_type_code having count(*) < 3",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select min(version_number), date_effective_to from templates intersect select min(date_effective_to), date_effective_to from documents",
        "query": "SELECT min(Version_Number) ,  Date_Effective_From ,  Date_Effective_To FROM Templates",
        "question": "What the smallest version number and its effective date date from and to?",
        "context": "What the smallest version number and its effective date date from and to? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select min(version_number), date_effective_from, date_effective_to from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select version_number, date_effective_to from templates order by date_effective_from limit 1",
        "query": "SELECT min(Version_Number) ,  Date_Effective_From ,  Date_Effective_To FROM Templates",
        "question": "Return the lowest version number, along with its corresponding effective date date from and to.",
        "context": "Return the lowest version number, along with its corresponding effective date date from and to. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select min(version_number), date_effective_from, date_effective_to from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.date_effective_to from templates as t1 join documents as t2 on t1.model_id = t2.model_id where t2.document_name = \"Data base\"",
        "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "What is the effective date range of the template used by document with the name \"Data base\"?",
        "context": "What is the effective date range of the template used by document with the name \"Data base\"? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Data base ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.date_effective_to from templates as t1 join documents as t2 on t1.model_id = t2.model_id where t2.document_name = \"Data base\"",
        "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "Return the effective date range of the template that is used by a document named Data base.",
        "context": "Return the effective date range of the template that is used by a document named Data base. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Data base ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_name, template_id from documents where template_type_code = \"BK\"",
        "query": "SELECT T2.document_name, T2.Document_ID, T2.template_id FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "Show all document names along with document and template id using templates with template type code BK.",
        "context": "Show all document names along with document and template id using templates with template type code BK. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( BK ), template_type_description | templates : template_id, version_number, template_type_code ( BK ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t2.document_name, t2.document_id, t2.template_id from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t1.template_type_code = \"BK\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_name, t1.document_id from documents as t1 join templates as t2 on t1.document_id = t2.document_id where t2.model_type_code = \"BK\"",
        "query": "SELECT T2.document_name, T2.Document_ID, T2.template_id FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "Return the names of documents with document and template id that use templates with the code BK?",
        "context": "Return the names of documents with document and template id that use templates with the code BK? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( BK ), template_type_description | templates : template_id, version_number, template_type_code ( BK ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t2.document_name, t2.document_id, t2.template_id from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t1.template_type_code = \"BK\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, count(*) from documents group by template_type_code",
        "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "Show all effective date from and to, and the number of documents using each type.",
        "context": "Show all effective date from and to, and the number of documents using each type. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to, count(*) from documents group by template_type_code",
        "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "What are effective date from and to, and how many documents use each type?",
        "context": "What are effective date from and to, and how many documents use each type? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_to from documents group by date_effective_to order by count(*) desc limit 1",
        "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which effective date period is used by most number of documents?",
        "context": "Which effective date period is used by most number of documents? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_to from documents group by date_effective_to order by count(*) desc limit 1",
        "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the effective date period that is most commonly used in documents.",
        "context": "Return the effective date period that is most commonly used in documents. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t1.date_effective_from, t1.date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from documents where document_id not in (select document_id from documents)",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates EXCEPT SELECT Date_Effective_From ,  Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "Show all effective date from and to that are not used by any document.",
        "context": "Show all effective date from and to that are not used by any document. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates except select date_effective_from, date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from documents where document_id not in (select document_id from documents)",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates EXCEPT SELECT Date_Effective_From ,  Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "What are the effective date from and to that are not used for any document?",
        "context": "What are the effective date from and to that are not used for any document? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select date_effective_from, date_effective_to from templates except select date_effective_from, date_effective_to from templates as t1 join documents as t2 on t1.template_id = t2.template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code, template_type_description from ref_template_types",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "Show all template type codes and descriptions.",
        "context": "Show all template type codes and descriptions. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code, template_type_description from ref_template_types",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code, template_type_description from ref_template_types",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "What are the type codes and descriptions for all template types?",
        "context": "What are the type codes and descriptions for all template types? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code, template_type_description from ref_template_types",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_description from ref_template_types where template_type_code = \"AD\"",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "What is the template type descriptions for template type code \"AD\".",
        "context": "What is the template type descriptions for template type code \"AD\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( AD ), template_type_description | templates : template_id, version_number, template_type_code ( AD ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_description from ref_template_types where template_type_code = \"AD\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t2.type_type_code = \"AD\"",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "Return the template type description of the template type with the code AD.",
        "context": "Return the template type description of the template type with the code AD. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( AD ), template_type_description | templates : template_id, version_number, template_type_code ( AD ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_description from ref_template_types where template_type_code = \"AD\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "What is the template type code for template type description \"Book\".",
        "context": "What is the template type code for template type description \"Book\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Book ) | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "Return the type code of the template type with the description \"Book\".",
        "context": "Return the type code of the template type with the description \"Book\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Book ) | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select distinct t1.model_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "context": "What are the distinct template type descriptions for the templates ever used by any document? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select distinct t1.type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "context": "Return the different descriptions for templates that have been used in a document. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_from from templates where template_type_description like \"%presentation%\"",
        "query": "SELECT T2.Date_Effective_From ,  T2.Date_Effective_To FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "What are the effective date range from to with template type description \"Presentation\".",
        "context": "What are the effective date range from to with template type description \"Presentation\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Presentation ) | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t2.date_effective_from, t2.date_effective_to from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = \"Presentation\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select date_effective_to from templates where template_type_description = 'Presentation'",
        "query": "SELECT T2.Date_Effective_From ,  T2.Date_Effective_To FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "Return the effective date period corresponding to templates with the description 'Presentation'.",
        "context": "Return the effective date period corresponding to templates with the description 'Presentation'. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Presentation ) | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | ref_template_types: the feature types of the templates are registered. template_type_description describes content such as 'Presentation'; templates: pre-created documents that already have some formatting. version_number is the version number associated with the template. date_effective_from is the effective date from which the template becomes active as a datetime. date_effective_to is the date untill when the template is valid as a datetime; documents: are a form of information and can be put into an electronic form and stored in a computer. template is associated; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select t2.date_effective_from, t2.date_effective_to from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = \"Presentation\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.player_name, t2.player_name from players as t1 join matches as t2 on t1.player_id = t2.player_id group by t2.player_name",
        "query": "SELECT loser_name, winner_name FROM matches",
        "question": "Find both player names in each match.",
        "context": "Find both player names in each match. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in the",
        "label": "wta_1 | select loser_name, winner_name from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.player_name, t2.player_name from players as t1 join matches as t2 on t1.player_id = t2.player_id",
        "query": "SELECT loser_name, winner_name FROM matches",
        "question": "Give me both player names in each match?",
        "context": "Give me both player names in each match? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in",
        "label": "wta_1 | select loser_name, winner_name from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.age, t2.match_name from matches as t1 join players as t2 on t1.player_id = t2.player_id group by t2.match_age",
        "query": "SELECT winner_age, loser_age FROM matches",
        "question": "Find both player ages in each match.",
        "context": "Find both player ages in each match. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in",
        "label": "wta_1 | select winner_age, loser_age from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.age, t2.match_age from matches as t1 join players as t2 on t1.player_id = t2.player_id group by t2.match_age",
        "query": "SELECT winner_age, loser_age FROM matches",
        "question": "Give me both player ages in each match.",
        "context": "Give me both player ages in each match. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied",
        "label": "wta_1 | select winner_age, loser_age from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, birth_date from players where country_code = \"USA\"",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "List the first name and birth date of all American players.",
        "context": "List the first name and birth date of all American players. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings",
        "label": "wta_1 | select first_name, birth_date from players where country_code = 'USA'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, birth_date from players where country_code = \"USA\"",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "What are the first names and birth dates of American players?",
        "context": "What are the first names and birth dates of American players? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select first_name, birth_date from players where country_code = 'USA'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(loser_age), avg(winner_age) from matches",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "Find the average loser and winner age of all matches.",
        "context": "Find the average loser and winner age of all matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select avg(loser_age), avg(winner_age) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(loser_age), avg(winning_age) from matches",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "What are the average loser and winner ages across matches?",
        "context": "What are the average loser and winner ages across matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is",
        "label": "wta_1 | select avg(loser_age), avg(winner_age) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(t1.rank), t2.winner_rank from matches as t1 join rankings as t2 on t1.winning_id = t2.winner_ioc group by t2.winner_rank",
        "query": "SELECT avg(winner_rank), avg(loser_rank) FROM matches",
        "question": "Find their all average rank including winner and loser in each matches.",
        "context": "Find their all average rank including winner and loser in each matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking",
        "label": "wta_1 | select avg(winner_rank), avg(loser_rank) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(t1.loser_rank), t2.winner_rank from matches as t1 join players as t2 on t1.winner_id = t2.winner_id group by t2.winner_rank",
        "query": "SELECT avg(winner_rank), avg(loser_rank) FROM matches",
        "question": "What is the average rank for all players including winner and loser in all matches?",
        "context": "What is the average rank for all players including winner and loser in all matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played;",
        "label": "wta_1 | select avg(winner_rank), avg(loser_rank) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select max(t2.rank_rank), t2.winner_rank from matches as t1 join players as t2 on t1.player_id = t2.player_id group by t2.winner_rank order by count(*) desc limit 1",
        "query": "SELECT min(winner_rank), min(loser_rank) FROM matches",
        "question": "Find the highest rank of all players including winner and loser in all matches.",
        "context": "Find the highest rank of all players including winner and loser in all matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings",
        "label": "wta_1 | select min(winner_rank), min(loser_rank) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.best_rank, t2.winner_rank_points from matches as t1 join players as t2 on t1.player_id = t2.player_id where t1.winner_rank = 'L' group by t1.winner_rank",
        "query": "SELECT min(winner_rank), min(loser_rank) FROM matches",
        "question": "What is the best rank of all players including winner and loser across all matches?",
        "context": "What is the best rank of all players including winner and loser across all matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played;",
        "label": "wta_1 | select min(winner_rank), min(loser_rank) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(distinct country_code) from players",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "question": "find the number of distinct country codes of all players.",
        "context": "find the number of distinct country codes of all players. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position ",
        "label": "wta_1 | select count(distinct country_code) from players",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(distinct country_code) from players",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "question": "How many distinct countries do players come from?",
        "context": "How many distinct countries do players come from? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in",
        "label": "wta_1 | select count(distinct country_code) from players",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(distinct loser_name) from players",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "Find the number of distinct name of losers.",
        "context": "Find the number of distinct name of losers. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied",
        "label": "wta_1 | select count(distinct loser_name) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(distinct loser_name) from the world",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "How many different loser names are there?",
        "context": "How many different loser names are there? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in",
        "label": "wta_1 | select count(distinct loser_name) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select tourney_name from matches group by tourney_name having count(*) > 10",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "Find the name of tourney that has more than 10 matches.",
        "context": "Find the name of tourney that has more than 10 matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is",
        "label": "wta_1 | select tourney_name from matches group by tourney_name having count(*) > 10",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select tourney_name from matches group by tourney_name having count(*) > 10",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "What are the names of tournaments that have more than 10 matches?",
        "context": "What are the names of tournaments that have more than 10 matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking",
        "label": "wta_1 | select tourney_name from matches group by tourney_name having count(*) > 10",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.player_name, t1.winner_name from matches as t1 join players as t2 on t1.player_id = t2.winner_id where t1.year = 2013 intersect select t2.player_name from matches as t1 join players as t2 on t1.player_id = t2.player_id where t1.year = 2016",
        "query": "SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2016",
        "question": "List the names of all match players including winner and loser who played in both 2013 and 2016.",
        "context": "List the names of all match players including winner and loser who played in both 2013 and 2016. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was",
        "label": "wta_1 | select loser_name, winner_name from matches where year = 2013 intersect select loser_name, winner_name from matches where year = 2016",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.player_name from matches as t1 join players as t2 on t1.player_id = t2.winner_id where t1.year = 2013 intersect select t2.player_name from matches as t1 join players as t2 on t1.player_id = t2.player_id where t1.year = 2016",
        "query": "SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2016",
        "question": "What are the names of all match players including winner and loser who played in both 2013 and 2016?",
        "context": "What are the names of all match players including winner and loser who played in both 2013 and 2016? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the",
        "label": "wta_1 | select loser_name, winner_name from matches where year = 2013 intersect select loser_name, winner_name from matches where year = 2016",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.player_name from matches as t1 join players as t2 on t1.player_id = t2.player_id where t1.year = 2013 or t1.year = 2016 group by t2.player_name",
        "query": "SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "List the all player name in each matche who played in years of 2013 or 2016.",
        "context": "List the all player name in each matche who played in years of 2013 or 2016. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played;",
        "label": "wta_1 | select loser_name, winner_name from matches where year = 2013 or year = 2016",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.player_name from matches as t1 join players as t2 on t1.player_id = t2.player_id where t1.year = 2013 or t1.year = 2016",
        "query": "SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "Including winner and loser, Give me all player name of each matche in 2013 or 2016 year?",
        "context": "Including winner and loser, Give me all player name of each matche in 2013 or 2016 year? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which",
        "label": "wta_1 | select loser_name, winner_name from matches where year = 2013 or year = 2016",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.player_id join tourney_date as t3 on t2.turnal_id = t3.turnal_id where t3.turnal_name = \"WTA Championships\" intersect select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.player_ioc where t3.turnal_name = \"Australian Open\"",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "context": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( WTA Championships, Australian Open ), winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a",
        "label": "wta_1 | select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.country_code from players as t1 join matches as t2 on t1.player_id = t2.player_id where t2.turner_name = \"WTA Championships\" intersect select t1.first_name, t1.country_code from players as t1 join matches as t2 on t1.player_id = t2.player_id where t2.turner_name = \"Australian Open\"",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "context": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( WTA Championships, Australian Open ), winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who",
        "label": "wta_1 | select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, country_code from players order by birth_date desc limit 1",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "Find the first name and country code of the oldest player.",
        "context": "Find the first name and country code of the oldest player. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select first_name, country_code from players order by birth_date limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, country_code from players order by birth_date desc limit 1",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "What is the first name and country code of the oldest player?",
        "context": "What is the first name and country code of the oldest player? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is",
        "label": "wta_1 | select first_name, country_code from players order by birth_date limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, last_name from players order by birth_date",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "List the first and last name of all players order of their birth date from old to young.",
        "context": "List the first and last name of all players order of their birth date from old to young. | wta_1 | players : player_id, first_name, last_name ( Young, Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is",
        "label": "wta_1 | select first_name, last_name from players order by birth_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, last_name from players order by birth_date desc",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "What are the full names of all players, sorted from oldest to youngest?",
        "context": "What are the full names of all players, sorted from oldest to youngest? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings",
        "label": "wta_1 | select first_name, last_name from players order by birth_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.last_name from players as t1 join matches as t2 on t1.player_id = t2.player_id where t2.left_handed = 'L' order by t2.birth_date",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "List the first and last name of all players who are left / L hand in the order of their date of birth from the oldest to the youngest.",
        "context": "List the first and last name of all players who are left / L hand in the order of their date of birth from the oldest to the youngest. | wta_1 | players : player_id, first_name, last_name ( Date, Last ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of",
        "label": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select player_name from players where hand = \"left\" order by birth_date",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date desc",
        "question": "What are the name of all left handed players, in order of date of birth from the young to the old?",
        "context": "What are the name of all left handed players, in order of date of birth from the young to the old? | wta_1 | players : player_id, first_name, last_name ( Young, Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a",
        "label": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date desc",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.country_code from players as t1 join tours as t2 on t1.player_id = t2.player_id group by t2.player_id order by count(*) desc limit 1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "context": "Find the first name and country code of the player who did the most number of tours. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played",
        "label": "wta_1 | select t1.country_code, t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.country_code from players as t1 join tours as t2 on t1.player_id = t2.player_id group by t2.player_id order by count(*) desc limit 1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "What is the first name and country code of the player with the most tours?",
        "context": "What is the first name and country code of the player with the most tours? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings",
        "label": "wta_1 | select t1.country_code, t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select year from matches group by year order by count(*) desc limit 1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year that has the most number of matches.",
        "context": "Find the year that has the most number of matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position ",
        "label": "wta_1 | select year from matches group by year order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select year from matches group by year order by count(*) desc limit 1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year had the most matches?",
        "context": "Which year had the most matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in the player",
        "label": "wta_1 | select year from matches group by year order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.player_name, t1.winning_rank_points from players as t1 join rankings as t2 on t1.player_id = t2.winner_id group by t1.player_id order by count(*) desc limit 1",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and rank points of the player who won the most times.",
        "context": "Find the name and rank points of the player who won the most times. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings:",
        "label": "wta_1 | select winner_name, winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.player_name, t2.winning_rank_points from players as t1 join rankings as t2 on t1.player_id = t2.winner_id group by t1.player_id order by count(*) desc limit 1",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the player who has won the most matches, and how many rank points does this player have?",
        "context": "What is the name of the player who has won the most matches, and how many rank points does this player have? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year",
        "label": "wta_1 | select winner_name, winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.player_name, t3.winner_name from players as t1 join matches as t2 on t1.player_id = t2.player_id join tourney as t3 on t2.turner_id = t3.turner_id where t2.winner_name = \"Australian Open\" group by t2.winner_name order by count(*) desc limit 1",
        "query": "SELECT loser_name, winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "Find all match player name including winner and loser where the winner has the highest rank points and participated in the Australian Open tourney.",
        "context": "Find all match player name including winner and loser where the winner has the highest rank points and participated in the Australian Open tourney. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( Australian Open ), winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in",
        "label": "wta_1 | select loser_name, winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.player_name, t1.winner_name from players as t1 join matches as t2 on t1.player_id = t2.player_id where t2.winner_rank_points = (select max(winner_rank) from matches as t3 join tourney_name as t4 on t3.turner_name = 'Australian Open')",
        "query": "SELECT loser_name, winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "What are the match player names including winner and loser where the winner had the most rank points and participated in the Australian Open tournament?",
        "context": "What are the match player names including winner and loser where the winner had the most rank points and participated in the Australian Open tournament? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( Australian Open ), winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in",
        "label": "wta_1 | select loser_name, winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.player_name, t2.player_name from matches as t1 join players as t2 on t1.player_id = t2.player_id group by t2.player_name order by count(*) desc limit 1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "Including winner and loser, find all the player names in each match with greatest number of minutes.",
        "context": "Including winner and loser, find all the player names in each match with greatest number of minutes. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the",
        "label": "wta_1 | select winner_name, loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.winner_name, t1.winner_name from matches as t1 join loser_in as t2 on t1.winner_id = t2.winner_ioc order by t1.year desc limit 1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "In each match, what are the winner with loser names who played in the longest match?",
        "context": "In each match, what are the winner with loser names who played in the longest match? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was",
        "label": "wta_1 | select winner_name, loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(t2.rank), t2.first_name from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t2.player_id",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the average ranking for each player and their first name.",
        "context": "Find the average ranking for each player and their first name. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select avg(ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, avg(t2.rank_points) from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the first names of all players, and their average rankings?",
        "context": "What are the first names of all players, and their average rankings? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking",
        "label": "wta_1 | select avg(ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select sum(t2.rank_points), t2.player_name from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "query": "SELECT sum(ranking_points) ,  T1.first_name, T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the total ranking points for each player and their name.",
        "context": "Find the total ranking points for each player and their name. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select sum(ranking_points), t1.first_name, t1.last_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.player_name, sum(t2.rank_points) from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "query": "SELECT sum(ranking_points) ,  T1.first_name, T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the names of all players, and their total ranking points?",
        "context": "What are the names of all players, and their total ranking points? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking",
        "label": "wta_1 | select sum(ranking_points), t1.first_name, t1.last_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code, count(*) from players group by country_code",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "find the number of players for each country.",
        "context": "find the number of players for each country. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in",
        "label": "wta_1 | select count(*), country_code from players group by country_code",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code, count(*) from players group by country_code",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "How many players are from each country?",
        "context": "How many players are from each country? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in the",
        "label": "wta_1 | select count(*), country_code from players group by country_code",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code from players group by country_code order by count(*) desc limit 1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "find the code of the country where has the greatest number of players.",
        "context": "find the code of the country where has the greatest number of players. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking",
        "label": "wta_1 | select country_code from players group by country_code order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code from players group by country_code order by count(*) desc limit 1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of the country with the most players?",
        "context": "What is the code of the country with the most players? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select country_code from players group by country_code order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code from players group by country_code having count(*) > 50",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "Find the codes of countries that have more than 50 players.",
        "context": "Find the codes of countries that have more than 50 players. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select country_code from players group by country_code having count(*) > 50",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code from players group by country_code having count(*) > 50",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "What are the codes of countries with more than 50 players?",
        "context": "What are the codes of countries with more than 50 players? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position",
        "label": "wta_1 | select country_code from players group by country_code having count(*) > 50",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select sum(t1.tours), t2.rank from rankings as t1 join tours as t2 on t1.rank_date = t2.rank_date group by t2.rank_date",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "Find the total number of tours for each ranking date.",
        "context": "Find the total number of tours for each ranking date. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings:",
        "label": "wta_1 | select sum(tours), ranking_date from rankings group by ranking_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select sum(t1.tours), t2.rank from rankings as t1 join tours as t2 on t1.rank_date = t2.rank_date group by t1.rank_date",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "How many total tours were there for each ranking date?",
        "context": "How many total tours were there for each ranking date? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings:",
        "label": "wta_1 | select sum(tours), ranking_date from rankings group by ranking_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*), year from matches group by year",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "Find the number of matches happened in each year.",
        "context": "Find the number of matches happened in each year. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied",
        "label": "wta_1 | select count(*), year from matches group by year",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select year, count(*) from matches group by year",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "How many matches were played in each year?",
        "context": "How many matches were played in each year? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in",
        "label": "wta_1 | select count(*), year from matches group by year",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.winning_name, t2.winning_rank from matches as t1 join rankings as t2 on t1.winning_id = t2.winning_id order by t1.year limit 3",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "context": "Find the name and rank of the 3 youngest winners across all matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking",
        "label": "wta_1 | select distinct winner_name, winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t2.winning_name, t2.winning_rank from matches as t1 join rankings as t2 on t1.winning_id = t2.winning_id order by t1.year limit 3",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "context": "What are the names and ranks of the three youngest winners across all matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings:",
        "label": "wta_1 | select distinct winner_name, winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(distinct winner_id) from matches where tourney_name = \"WTA Championships\" and hand = \"left handed\"",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "context": "How many different winners both participated in the WTA Championships and were left handed? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( WTA Championships ), winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year",
        "label": "wta_1 | select count(distinct winner_name) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from players as t1 join matches as t2 on t1.winner_id = t2.winner_id where t1.winner_name = \"left\" and t2.turner_name = \"WTA Championships\"",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "context": "Find the number of left handed winners who participated in the WTA Championships. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( WTA Championships ), winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in",
        "label": "wta_1 | select count(distinct winner_name) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.winning_name, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank desc limit 1",
        "query": "SELECT T1.first_name , T1.last_name ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "Find the name and birth date of the winner who has the highest rank points in all matches.",
        "context": "Find the name and birth date of the winner who has the highest rank points in all matches. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in",
        "label": "wta_1 | select t1.first_name, t1.last_name, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.birth_date from players as t1 join rankings as t2 on t1.player_id = t2.winner_id group by t1.player_id order by count(*) desc limit 1",
        "query": "SELECT T1.first_name , T1.last_name  ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "What is the name and birth date of the player with the most winner rank points across all matches?",
        "context": "What is the name and birth date of the player with the most winner rank points across all matches? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year",
        "label": "wta_1 | select t1.first_name, t1.last_name, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select hand, count(*) from players group by hand",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "Find the number of players for each hand type.",
        "context": "Find the number of players for each hand type. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied",
        "label": "wta_1 | select count(*), hand from players group by hand",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select hand, count(*) from players group by hand",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "How many players are there for each hand type?",
        "context": "How many players are there for each hand type? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied",
        "label": "wta_1 | select count(*), hand from players group by hand",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select distinct line_1 from addresses",
        "query": "SELECT line_1 ,  line_2, line_3 FROM addresses",
        "question": "what are all the addresse lines?",
        "context": "what are all the addresse lines? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses",
        "label": "student_transcripts_tracking | select line_1, line_2, line_3 from addresses",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select line_3 from addresses",
        "query": "SELECT line_1 ,  line_2, line_3 FROM addresses",
        "question": "Give me the three addresse lines?",
        "context": "Give me the three addresse lines? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses",
        "label": "student_transcripts_tracking | select line_1, line_2, line_3 from addresses",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "new_orchestra | select count(*) from show",
        "query": "SELECT count(*) FROM show where If_first_show = 'T'",
        "question": "How many first shows?",
        "context": "How many first shows? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select count(*) from show where if_first_show = 'T'",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select count(*) from show as t1 join show as t2 on t1.show_id = t2.if_first_show",
        "query": "SELECT count(*) FROM show where If_first_show = 'T'",
        "question": "Count the number of first show.",
        "context": "Count the number of first show. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select count(*) from show where if_first_show = 'T'",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select name from conductor order by age asc",
        "query": "SELECT Name FROM conductor ORDER BY birthday desc",
        "question": "List the names of conductors in ascending order of age.",
        "context": "List the names of conductors in ascending order of age. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select name from conductor order by birthday desc",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select name from conductor order by age",
        "query": "SELECT Name FROM conductor ORDER BY birthday desc",
        "question": "What are the names of conductors, ordered by age?",
        "context": "What are the names of conductors, ordered by age? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select name from conductor order by birthday desc",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select name from conductor where nationality = 'USA'",
        "query": "SELECT Name FROM conductor WHERE Nationality = 'USA'",
        "question": "What are the names of american conductors?",
        "context": "What are the names of american conductors? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select name from conductor where nationality = 'USA'",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select name from conductor where nationality = 'USA'",
        "query": "SELECT Name FROM conductor WHERE Nationality = 'USA'",
        "question": "Return the names of american conductors.",
        "context": "Return the names of american conductors. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select name from conductor where nationality = 'USA'",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select record_company from orchestra order by year_of_founded desc",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc",
        "question": "What are the record companies of orchestras in the order of founded years from oldest to latest?",
        "context": "What are the record companies of orchestras in the order of founded years from oldest to latest? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select record_company from orchestra order by year_of_founded asc",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select record_company from orchestra order by year_of_founded",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc",
        "question": "Return the record companies of orchestras, sorted by the founded year from oldest to latest.",
        "context": "Return the record companies of orchestras, sorted by the founded year from oldest to latest. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select record_company from orchestra order by year_of_founded asc",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select avg(attendance) from show where if_first_show!= 'T'",
        "query": "SELECT avg(Attendance) FROM SHOW where If_first_show = 'F'",
        "question": "What is the average attendance of non-first shows?",
        "context": "What is the average attendance of non-first shows? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select avg(attendance) from show where if_first_show = 'F'",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select avg(attendance) from show where if_first_show!= 'T'",
        "query": "SELECT avg(Attendance) FROM SHOW where If_first_show = 'F'",
        "question": "Return the average attendance across all non-first shows.",
        "context": "Return the average attendance across all non-first shows. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select avg(attendance) from show where if_first_show = 'F'",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select max(share), min(share) from performance where type!= \"Live final\"",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "context": "What are the maximum and minimum share of performances whose type is not \"Live final\". | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type ( Live final ), date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select max(share), min(share) from performance where type!= \"Live final\"",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select max(share), min(share) from performance where type!= \"Live final\"",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "context": "Return the maximum and minimum shares for performances that do not have the type \"Live final\". | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type ( Live final ), date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select max(share), min(share) from performance where type!= \"Live final\"",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select count(distinct nationality) from conductor",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "How many different nationalities do conductors have?",
        "context": "How many different nationalities do conductors have? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select count(distinct nationality) from conductor",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select count(distinct nationality) from conductor",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "Count the number of different nationalities of conductors.",
        "context": "Count the number of different nationalities of conductors. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select count(distinct nationality) from conductor",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select name from conductor order by age asc",
        "query": "SELECT Name FROM conductor ORDER BY birthday DESC",
        "question": "List names of conductors in ascending order of age.",
        "context": "List names of conductors in ascending order of age. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select name from conductor order by birthday desc",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select name from conductor order by age asc",
        "query": "SELECT Name FROM conductor ORDER BY birthday DESC",
        "question": "What are the names of conductors, sorted ascending by age?",
        "context": "What are the names of conductors, sorted ascending by age? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select name from conductor order by birthday desc",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select name from conductor order by year_of_work desc limit 1",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "List the name of the conductor with the longest work.",
        "context": "List the name of the conductor with the longest work. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select name from conductor order by year_of_work desc limit 1",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select name from conductor order by year_of_work desc limit 1",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "What is the name of the conductor who has worked the longest?",
        "context": "What is the name of the conductor who has worked the longest? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select name from conductor order by year_of_work desc limit 1",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select t2.name, t3.name from performance as t1 join orchestra as t2 on t1.orchester_id = t2.orchester_id join conductor as t3 on t1.orchester_id = t3.orchester_id",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "context": "Show the names of conductors and the orchestras they have conducted. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select t1.name, t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select t2.name, t3.name from performance as t1 join orchestra as t2 on t1.orchester_id = t2.orchester_id join perform as t3 on t1.orchester_id = t3.orchester_id",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "context": "What are the names of conductors as well as the corresonding orchestras that they have conducted? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select t1.name, t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select t2.name from performance as t1 join orchestra as t2 on t1.orchester_id = t2.orchester_id group by t1.orchester_id having count(*) > 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "context": "Show the names of conductors that have conducted more than one orchestras. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select t2.name from performance as t1 join conductor as t2 on t1.orchester_id = t2.orchester_id group by t1.orchester_id having count(*) > 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "context": "What are the names of conductors who have conducted at more than one orchestra? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select t2.name from performance as t1 join orchestra as t2 on t1.orchester_id = t2.orchester_id group by t1.orchester_id order by count(*) desc limit 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "context": "Show the name of the conductor that has conducted the most number of orchestras. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select t2.name from performance as t1 join orchestra as t2 on t1.orchester_id = t2.orchester_id group by t1.orchester_id order by count(*) desc limit 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "context": "What is the name of the conductor who has conducted the most orchestras? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select t2.name from performance as t1 join orchestra as t2 on t1.orchester_id = t2.orchester_id order by t2.year_of_work desc limit 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID order by Year_of_Founded asc limit 1",
        "question": "Please show the name of the conductor who has conducted the oldest orchestras.",
        "context": "Please show the name of the conductor who has conducted the oldest orchestras. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id order by year_of_founded asc limit 1",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select t2.name from performance as t1 join conductor as t2 on t1.orchester_id = t2.orchester_id order by t1.year_of_work desc limit 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID order by Year_of_Founded  desc limit 1",
        "question": "What are the names of conductors who have conducted the latest orchestras?",
        "context": "What are the names of conductors who have conducted the latest orchestras? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id order by year_of_founded desc limit 1",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select record_company, count(*) from orchestra group by record_company",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "context": "Please show the different record companies and the corresponding number of orchestras. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select record_company, count(*) from orchestra group by record_company",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select record_company, count(*) from orchestra group by record_company",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "How many orchestras does each record company manage?",
        "context": "How many orchestras does each record company manage? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select record_company, count(*) from orchestra group by record_company",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select major_record_format from orchestra order by age asc",
        "query": "SELECT Major_Record_Format FROM orchestra ORDER BY Year_of_Founded desc",
        "question": "Please show the record formats of orchestras in ascending order of age.",
        "context": "Please show the record formats of orchestras in ascending order of age. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select major_record_format from orchestra order by year_of_founded desc",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select major_record_format from orchestra order by age",
        "query": "SELECT Major_Record_Format FROM orchestra ORDER BY Year_of_Founded desc",
        "question": "What are the major record formats of orchestras, sorted by their age?",
        "context": "What are the major record formats of orchestras, sorted by their age? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select major_record_format from orchestra order by year_of_founded desc",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select record_company from orchestra order by share desc limit 1",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc LIMIT 1",
        "question": "List the record company shared by the oldest orchestras.",
        "context": "List the record company shared by the oldest orchestras. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select record_company from orchestra order by year_of_founded asc limit 1",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select record_company from orchestra order by year_of_founded desc limit 1",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded desc LIMIT 1",
        "question": "What is the record company used by the newest orchestras?",
        "context": "What is the record company used by the newest orchestras? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select record_company from orchestra order by year_of_founded desc limit 1",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "List the names of orchestras that have no performance.",
        "context": "List the names of orchestras that have no performance. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select orchestra from orchestra except select t1.orchester from performance as t1 join orchestra as t2 on t1.orchester_id = t2.orchester_id",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "What are the orchestras that do not have any performances?",
        "context": "What are the orchestras that do not have any performances? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select record_company from orchestra where year_of_founded < 2003",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <=  2003",
        "question": "Show the record companies shared by orchestras founded before or in 2003.",
        "context": "Show the record companies shared by orchestras founded before or in 2003. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select record_company from orchestra where year_of_founded <= 2003",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select record_company from orchestra where year_of_founded >= 2003",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >=  2003",
        "question": "What are the record companies that are used by both orchestras founded after or in 2003?",
        "context": "What are the record companies that are used by both orchestras founded after or in 2003? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select record_company from orchestra where year_of_founded >= 2003",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select count(*) from show as t1 join show as t2 on t1.show_id = t2.show_id where t1.result = 'Glebe Park'",
        "query": "SELECT COUNT(*) FROM show WHERE Result  =  \"Glebe Park\" and If_first_show  =  \"T\"",
        "question": "Find the number of first shows in \"Glebe Park\".",
        "context": "Find the number of first shows in \"Glebe Park\". | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result ( Glebe Park ), if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select count(*) from show where result = \"Glebe Park\" and if_first_show = \"T\"",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select count(*) from show as t1 join show as t2 on t1.show_id = t2.show_id where t1.result = 'Glebe Park'",
        "query": "SELECT COUNT(*) FROM show WHERE Result  =  \"Glebe Park\" and If_first_show  =  \"T\"",
        "question": "Count the number of all first shows in \"Glebe Park\"",
        "context": "Count the number of all first shows in \"Glebe Park\" | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result ( Glebe Park ), if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select count(*) from show where result = \"Glebe Park\" and if_first_show = \"T\"",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select type from performance where if_first_show > 1",
        "query": "SELECT Type FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID  =  T2.Performance_ID WHERE If_first_show = 'F' GROUP BY T2.Performance_ID HAVING COUNT(*)  >  1",
        "question": "Show the type in which performance that have given more than one non-first show.",
        "context": "Show the type in which performance that have given more than one non-first show. | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select type from performance as t1 join show as t2 on t1.performance_id = t2.performance_id where if_first_show = 'F' group by t2.performance_id having count(*) > 1",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "new_orchestra | select type from performance where if_first_show > 1",
        "query": "SELECT Type FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID  =  T2.Performance_ID Where If_first_show = 'F' GROUP BY T2.Performance_ID HAVING COUNT(*)  >  1",
        "question": "What are type of performances that have had more than one non-first show?",
        "context": "What are type of performances that have had more than one non-first show? | new_orchestra | conductor : conductor_id, name, birthday, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, result, if_first_show, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. birthday is the nirthday of a conductor as datetime ascending when sorting from oldest to youngest conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display, typically an impressive one. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;",
        "label": "new_orchestra | select type from performance as t1 join show as t2 on t1.performance_id = t2.performance_id where if_first_show = 'F' group by t2.performance_id having count(*) > 1",
        "db_id": "new_orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "birthday",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "Result",
                "If_first_show",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "dog_kennels | select state from professionals intersect select state from owners",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Which states have both owners and professionals living there?",
        "context": "Which states have both owners and professionals living there? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the",
        "label": "dog_kennels | select state from owners intersect select state from professionals",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select state from owners intersect select state from professionals",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Find the states where both owners and professionals live.",
        "context": "Find the states where both owners and professionals live. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the",
        "label": "dog_kennels | select state from owners intersect select state from professionals",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select avg(age) from dogs where dog_id in ( select t1.dog_id from treatments as t1 join dogs as t2 on t1.treatment_id = t2.treatment_id group by t1.dog_id having count(*) > 0",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "context": "What is the average age of the dogs who have gone through any treatments? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival",
        "label": "dog_kennels | select avg(age) from dogs where dog_id in ( select dog_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select avg(t1.age) from dogs as t1 join treatment_types as t2 on t1.dog_id = t2.dog_id group by t2.dog_id having count(*) >= 2",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "Find the average age of the dogs who went through treatments.",
        "context": "Find the average age of the dogs who went through treatments. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog",
        "label": "dog_kennels | select avg(age) from dogs where dog_id in ( select dog_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.last_name, t2.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t1.state = \"Indiana\" or t2.cost_of_treatment > 2",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "context": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state ( Indiana ), zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state ( Indiana ), zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it",
        "label": "dog_kennels | select professional_id, last_name, cell_number from professionals where state = 'Indiana' union select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) > 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.last_name, t2.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t1.state = \"Indiana\" or t2.cost_of_treatment > 2",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "context": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state ( Indiana ), zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state ( Indiana ), zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '",
        "label": "dog_kennels | select professional_id, last_name, cell_number from professionals where state = 'Indiana' union select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) > 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select dog_name from dogs where owner_id not in (select dog_id from treatment_types group by dog_id having cost_of_treatment > 1000)",
        "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "question": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names.",
        "context": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the",
        "label": "dog_kennels | select name from dogs where dog_id not in( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.name from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id group by t2.owner_id having count(*) > 1000",
        "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "question": "What are the names of the dogs for which the owner spent more than 1000 for treatment?",
        "context": "What are the names of the dogs for which the owner spent more than 1000 for treatment? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the",
        "label": "dog_kennels | select name from dogs where dog_id not in( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select first_name from professionals union select first_name from owners except select t1.first_name from dogs as t1 join treatments as t2 on t1.dog_id = t2.professional_id",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "context": "Which first names are used for professionals or owners but are not used as dog names? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date",
        "label": "dog_kennels | select first_name from professionals union select first_name from owners except select name from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select first_name from professionals union select first_name from owners except select t1.first_name from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id join professionals as t3 on t2.professional_id = t3.professional_id",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "context": "Find the first names that are used for professionals or owners but are not used as dog names. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is",
        "label": "dog_kennels | select first_name from professionals union select first_name from owners except select name from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.race_of_treatment = 'dogs'",
        "query": "SELECT professional_id ,  first_name , last_name FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, and name.",
        "context": "Which professional did not operate any treatment on dogs? List the professional's id, and name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_",
        "label": "dog_kennels | select professional_id, first_name, last_name from professionals except select t1.professional_id, t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id except select t1.professional_id, t1.last_name from professionals as t1 join dogs as t2 on t1.professional_id = t2.treatment_id",
        "query": "SELECT professional_id ,  first_name , last_name FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Give me the id, and name of the professionals who did not perform any treatment on dogs.",
        "context": "Give me the id, and name of the professionals who did not perform any treatment on dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrive",
        "label": "dog_kennels | select professional_id, first_name, last_name from professionals except select t1.professional_id, t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.owner_id, t1.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "query": "SELECT T1.owner_id ,  T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner owns the most dogs? List the owner id, and name.",
        "context": "Which owner owns the most dogs? List the owner id, and name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the",
        "label": "dog_kennels | select t1.owner_id, t2.first_name, t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.owner_id, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "query": "SELECT T1.owner_id ,  T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the owner id and name of the owner who has the most dogs.",
        "context": "Return the owner id and name of the owner who has the most dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date",
        "label": "dog_kennels | select t1.owner_id, t2.first_name, t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.home_phone, t1.professional_id from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.home_phone ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two treatments? List the professional's id, home and phone number.",
        "context": "Which professionals have done at least two treatments? List the professional's id, home and phone number. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date",
        "label": "dog_kennels | select t1.professional_id, t1.home_phone, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.home_phone, t1.home_phone from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.home_phone ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "What are the id, home and phone number of the professionals who have performed two or more treatments?",
        "context": "What are the id, home and phone number of the professionals who have performed two or more treatments? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_",
        "label": "dog_kennels | select t1.professional_id, t1.home_phone, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2. breed_name from abandoned_yn as t1 join dogs as t2 on t1.dog_id = t2.dog_id group by t2. breed_code order by count(*) desc limit 1",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code where abandoned_yn = 1 GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the breed with the most abandoned dogs?",
        "context": "What is the name of the breed with the most abandoned dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the",
        "label": "dog_kennels | select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code where abandoned_yn = 1 group by t1.breed_name order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2. breed_name from abandoned_yn as t1 join dogs as t2 on t1.dog_id = t2.dog_id group by t2. breed_code order by count(*) desc limit 1",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code where abandoned_yn = 1 GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which breed do the most abandoned dogs have? Give me the breed name.",
        "context": "Which breed do the most abandoned dogs have? Give me the breed name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival",
        "label": "dog_kennels | select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code where abandoned_yn = 1 group by t1.breed_name order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "context": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog.",
        "label": "dog_kennels | select t1.owner_id, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "context": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog",
        "label": "dog_kennels | select t1.owner_id, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select treatment_type_description from treatments group by treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "context": "What is the description of the treatment type that costs the least money in total? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of",
        "label": "dog_kennels | select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select treatment_type_description from treatments group by treatment_type_code order by sum(cost_of_treatment) limit 1",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "context": "Give me the description of the treatment type whose total cost is the lowest. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of",
        "label": "dog_kennels | select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t2.salary) desc limit 1",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "context": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog",
        "label": "dog_kennels | select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t2.admission) desc limit 1",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "context": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog",
        "label": "dog_kennels | select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two types of treatments? List the professional id and name.",
        "context": "Which professionals have done at least two types of treatments? List the professional id and name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived",
        "label": "dog_kennels | select t1.professional_id, t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.home_phone, t1.home_phone from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.home_phone ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Find the id and home and phone number of the professionals who operate two or more types of treatments.",
        "context": "Find the id and home and phone number of the professionals who operate two or more types of treatments. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_",
        "label": "dog_kennels | select t1.professional_id, t1.home_phone, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.cost_of_treatment < ( select avg(cost_of_treatment) from treatments )",
        "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "What are the name of the professionals who have done treatment with cost below average?",
        "context": "What are the name of the professionals who have done treatment with cost below average? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of",
        "label": "dog_kennels | select distinct t1.first_name, t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment < ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t1.cost_of_treatment < ( select avg(cost_of_treatment) from treatments )",
        "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me their names.",
        "context": "Which professionals have operated a treatment that costs less than the average? Give me their names. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is",
        "label": "dog_kennels | select distinct t1.first_name, t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment < ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.date_of_treatment, t1.name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name , T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "List the date of each treatment, together with the name of the professional who operated it.",
        "context": "List the date of each treatment, together with the name of the professional who operated it. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the",
        "label": "dog_kennels | select t1.date_of_treatment, t2.first_name, t2.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.date_of_treatment, t1.first_name, t1.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name , T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "What are the date and the operating professional's name of each treatment?",
        "context": "What are the date and the operating professional's name of each treatment? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival",
        "label": "dog_kennels | select t1.date_of_treatment, t2.first_name, t2.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.cost_of_treatment, t2.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "context": "List the cost of each treatment and the corresponding treatment type description. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of",
        "label": "dog_kennels | select t1.cost_of_treatment, t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.cost_of_treatment, t1.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "What are the cost and treatment type description of each treatment?",
        "context": "What are the cost and treatment type description of each treatment? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog",
        "label": "dog_kennels | select t1.cost_of_treatment, t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.first_name, t1.last_name, t1.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id",
        "query": "SELECT T1.first_name , T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List each owner's name, and the size of his for her dog.",
        "context": "List each owner's name, and the size of his for her dog. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of",
        "label": "dog_kennels | select t1.first_name, t1.last_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.first_name, t1.last_name, t1.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id",
        "query": "SELECT T1.first_name , T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's name, and the size of their dog?",
        "context": "What are each owner's name, and the size of their dog? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival",
        "label": "dog_kennels | select t1.first_name, t1.last_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.last_name, t1.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "query": "SELECT T1.first_name , T1.last_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List pairs of the owner's names and the dogs's name.",
        "context": "List pairs of the owner's names and the dogs's name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival",
        "label": "dog_kennels | select t1.first_name, t1.last_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.owner_name, t1.name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id",
        "query": "SELECT T1.first_name , T1.last_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's name and their dogs's name?",
        "context": "What are each owner's name and their dogs's name? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of",
        "label": "dog_kennels | select t1.first_name, t1.last_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.name, t1.date_of_treatment from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id group by t2.dog_name order by count(*) desc limit 1",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "context": "List the names of the dogs of the rarest breed and the treatment dates of them. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is",
        "label": "dog_kennels | select t1.name, t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id where t1.breed_code = ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.name, t1.date_of_treatment from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id group by t2.dog_name order by count(*) desc limit 1",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "context": "Which dogs are of the rarest breed? Show their names and treatment dates. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date",
        "label": "dog_kennels | select t1.name, t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id where t1.breed_code = ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.city = 'VA'",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Which dogs are owned by someone who lives in VA? List the owner's first name and the dog's name.",
        "context": "Which dogs are owned by someone who lives in VA? List the owner's first name and the dog's name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog",
        "label": "dog_kennels | select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.street = 'VA'",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Find the first names of owners living in VA and the names of dogs they own.",
        "context": "Find the first names of owners living in VA and the names of dogs they own. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date",
        "label": "dog_kennels | select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select date_arrived, date_departed from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "What is the treatment date from dog arriving to departing?",
        "context": "What is the treatment date from dog arriving to departing? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog",
        "label": "dog_kennels | select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select date_of_treatment from treatments order by date_arrived asc limit 1",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "Find the dog treatment period from arriving to departing date.",
        "context": "Find the dog treatment period from arriving to departing date. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog",
        "label": "dog_kennels | select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t2.date_of_birth desc limit 1",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "List the last name of the owner owning the youngest dog.",
        "context": "List the last name of the owner owning the youngest dog. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the",
        "label": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.age = ( select max(age) from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id order by t1.age limit 1",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "context": "Who owns the youngest dog? Give me his or her last name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival",
        "label": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.age = ( select max(age) from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select email_address from professionals where state = 'HI' or state = 'WI'",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "List the emails of the professionals who live in the state of HI or WI.",
        "context": "List the emails of the professionals who live in the state of HI or WI. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date",
        "label": "dog_kennels | select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select email_address from professionals where state = 'HI' or state = 'WI'",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "What are the emails of the professionals living in either the state of HI or WI?",
        "context": "What are the emails of the professionals living in either the state of HI or WI? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the",
        "label": "dog_kennels | select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select date_arrived, date_adopted from dogs where abandoned_yn = '1'",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs where abandoned_yn = 1",
        "question": "What are the arriving date and the departing date of all the abandoned dogs?",
        "context": "What are the arriving date and the departing date of all the abandoned dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of",
        "label": "dog_kennels | select date_arrived, date_departed from dogs where abandoned_yn = 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select date_arrived, date_adopted from dogs where abandoned_yn = '1'",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs where abandoned_yn = 1",
        "question": "List the arrival date and the departure date for all the abandoned dogs.",
        "context": "List the arrival date and the departure date for all the abandoned dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of",
        "label": "dog_kennels | select date_arrived, date_departed from dogs where abandoned_yn = 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where date_arrived not in ( select dog_id from treatments )",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "How many dogs went through any treatments?",
        "context": "How many dogs went through any treatments? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the kenn",
        "label": "dog_kennels | select count(distinct dog_id) from treatments",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs as t1 join treatment_types as t2 on t1.dog_id = t2.treatment_id group by t1.dog_id",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "Count the number of dogs that went through a treatment.",
        "context": "Count the number of dogs that went through a treatment. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the",
        "label": "dog_kennels | select count(distinct dog_id) from treatments",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(distinct professional_id) from treatments",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "How many professionals have performed any treatment to dogs?",
        "context": "How many professionals have performed any treatment to dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the",
        "label": "dog_kennels | select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(distinct professional_id) from treatments",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "Find the number of professionals who have ever treated dogs.",
        "context": "Find the number of professionals who have ever treated dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in",
        "label": "dog_kennels | select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select first_name, last_name from professionals where city like '%west%'",
        "query": "SELECT first_name , last_name FROM professionals WHERE city LIKE '%West%'",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her name.",
        "context": "Which professionals live in a city containing the substring 'West'? List his or her name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date",
        "label": "dog_kennels | select first_name, last_name from professionals where city like '%west%'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select first_name from professionals where city like '%west%'",
        "query": "SELECT first_name , last_name FROM professionals WHERE city LIKE '%West%'",
        "question": "Find the name of the professionals living in a city that contains the substring 'West'.",
        "context": "Find the name of the professionals living in a city that contains the substring 'West'. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrive",
        "label": "dog_kennels | select first_name, last_name from professionals where city like '%west%'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select owner_name from owners where state like '%n%'",
        "query": "SELECT first_name , last_name FROM Owners WHERE state LIKE '%North%'",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his name.",
        "context": "Which owners live in the state whose name contains the substring 'North'? List his name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_",
        "label": "dog_kennels | select first_name, last_name from owners where state like '%north%'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select distinct t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state like '%ny%'",
        "query": "SELECT first_name , last_name FROM Owners WHERE state LIKE '%North%'",
        "question": "Return the name of the owners living in a state whose name contains the substring 'North'.",
        "context": "Return the name of the owners living in a state whose name contains the substring 'North'. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date",
        "label": "dog_kennels | select first_name, last_name from owners where state like '%north%'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where age < (select avg(age) from dogs)",
        "query": "SELECT count(*) FROM Dogs WHERE abandoned_yn = 1 and age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "How many abandoned dogs have an age below the average?",
        "context": "How many abandoned dogs have an age below the average? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in",
        "label": "dog_kennels | select count(*) from dogs where abandoned_yn = 1 and age < ( select avg(age) from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where age < (select avg(age) from dogs)",
        "query": "SELECT count(*) FROM Dogs WHERE abandoned_yn = 1 and age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "Count the number of abandoned dogs of an age below the average.",
        "context": "Count the number of abandoned dogs of an age below the average. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of",
        "label": "dog_kennels | select count(*) from dogs where abandoned_yn = 1 and age < ( select avg(age) from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select max(cost_of_treatment) from treatments",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "How much does the most recent treatment cost?",
        "context": "How much does the most recent treatment cost? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ",
        "label": "dog_kennels | select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "Show me the cost of the most recently performed treatment.",
        "context": "Show me the cost of the most recently performed treatment. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in",
        "label": "dog_kennels | select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where abandoned_yn not in ( select abandoned_yn from treatment_types )",
        "query": "SELECT count(*) FROM Dogs WHERE abandoned_yn = 1 and dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "question": "How many abandoned dogs have not gone through any treatment?",
        "context": "How many abandoned dogs have not gone through any treatment? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in",
        "label": "dog_kennels | select count(*) from dogs where abandoned_yn = 1 and dog_id not in ( select dog_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where dog_id not in ( select dog_id from treatment_types )",
        "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "question": "Tell me the number of dogs that have received any treatment.",
        "context": "Tell me the number of dogs that have received any treatment. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog",
        "label": "dog_kennels | select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from owners where owner_id not in ( select owner_id from dogs where abandoned_yn = '1' )",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs where abandoned_yn = 1 )",
        "question": "How many owners temporarily do not have any abandoned dogs?",
        "context": "How many owners temporarily do not have any abandoned dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in",
        "label": "dog_kennels | select count(*) from owners where owner_id not in ( select owner_id from dogs where abandoned_yn = 1 )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from owners where owner_id not in ( select owner_id from dogs );",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs where abandoned_yn = 1 )",
        "question": "Find the number of owners who do not own any abandoned dogs at this moment.",
        "context": "Find the number of owners who do not own any abandoned dogs at this moment. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of",
        "label": "dog_kennels | select count(*) from owners where owner_id not in ( select owner_id from dogs where abandoned_yn = 1 )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from professionals where professional_id not in ( select professional_id from treatments )",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "How many professionals did not operate any treatment on dogs?",
        "context": "How many professionals did not operate any treatment on dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in",
        "label": "dog_kennels | select count(*) from professionals where professional_id not in ( select professional_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from professionals where professional_id not in ( select professional_id from treatments )",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "Find the number of professionals who have not treated any dogs.",
        "context": "Find the number of professionals who have not treated any dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog",
        "label": "dog_kennels | select count(*) from professionals where professional_id not in ( select professional_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select name, age, weight from dogs where abandoned_yn = '1' and 0 = 'null'",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "List the dog name, age and weight of the abandoned dogs? 1 stands for yes, and 0 stands for no.",
        "context": "List the dog name, age and weight of the abandoned dogs? 1 stands for yes, and 0 stands for no. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog",
        "label": "dog_kennels | select name, age, weight from dogs where abandoned_yn = 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select name, age, weight from dogs where abandoned_yn = '1' and 0 = 0",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "context": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed",
        "label": "dog_kennels | select name, age, weight from dogs where abandoned_yn = 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select avg(t1.age) from dogs as t1 join abandoned_yn as t2 on t1.dog_id = t2.dog_id",
        "query": "SELECT avg(age) FROM Dogs where abandoned_yn = 1",
        "question": "What is the average age of all the abandoned dogs?",
        "context": "What is the average age of all the abandoned dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in",
        "label": "dog_kennels | select avg(age) from dogs where abandoned_yn = 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select avg(age) from dogs where abandoned_yn = '1'",
        "query": "SELECT avg(age) FROM Dogs where abandoned_yn = 1",
        "question": "Compute the average age of all the abandoned dogs.",
        "context": "Compute the average age of all the abandoned dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in",
        "label": "dog_kennels | select avg(age) from dogs where abandoned_yn = 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select age from dogs order by age desc limit 1",
        "query": "SELECT max(age) FROM Dogs",
        "question": "What is the age of the oldest dog?",
        "context": "What is the age of the oldest dog? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ",
        "label": "dog_kennels | select max(age) from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select age from dogs order by age desc limit 1",
        "query": "SELECT max(age) FROM Dogs",
        "question": "Tell me the age of the oldest dog.",
        "context": "Tell me the age of the oldest dog. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ",
        "label": "dog_kennels | select max(age) from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select charge_type, charge_amount from charges group by charge_type",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "context": "How much does each charge type costs? List both charge type and amount. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival",
        "label": "dog_kennels | select charge_type, charge_amount from charges",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select charge_type, charge_amount from charges;",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "List each charge type and its amount.",
        "context": "List each charge type and its amount. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the kenn",
        "label": "dog_kennels | select charge_type, charge_amount from charges",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select charge_type, sum(charge_amount) from charges group by charge_type order by sum(charge_type) desc limit 1;",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "How much does the most expensive charge type costs?",
        "context": "How much does the most expensive charge type costs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the",
        "label": "dog_kennels | select max(charge_amount) from charges",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select charge_amount from charges order by charge_type desc limit 1",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "What is the charge amount of the most expensive charge type?",
        "context": "What is the charge amount of the most expensive charge type? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog",
        "label": "dog_kennels | select max(charge_amount) from charges",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select email_address, email_address from professionals",
        "query": "SELECT email_address , first_name , last_name FROM professionals",
        "question": "List the email and name of all the professionals.",
        "context": "List the email and name of all the professionals. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the",
        "label": "dog_kennels | select email_address, first_name, last_name from professionals",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select email_address, email_name from professionals",
        "query": "SELECT email_address , first_name , last_name FROM professionals",
        "question": "What are the email, and name of each professional?",
        "context": "What are the email, and name of each professional? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in",
        "label": "dog_kennels | select email_address, first_name, last_name from professionals",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select breed_type, size_code from sizes",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "What are all the possible breed type and size type combinations?",
        "context": "What are all the possible breed type and size type combinations? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog",
        "label": "dog_kennels | select distinct breed_code, size_code from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select distinct breed_type, size_code from dogs",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "context": "Find the distinct breed type and size type combinations for dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog",
        "label": "dog_kennels | select distinct breed_code, size_code from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.last_name, t1.treatment_type_description from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "query": "SELECT DISTINCT T1.first_name , T1.last_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "List the name of all the professionals along with the description of the treatment they have done.",
        "context": "List the name of all the professionals along with the description of the treatment they have done. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the",
        "label": "dog_kennels | select distinct t1.first_name, t1.last_name, t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t2.treatment_type_code = t3.treatment_type_code",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.professional_first_name, t2.treatment_type_description from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "query": "SELECT DISTINCT T1.first_name , T1.last_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "What are each professional's name and description of the treatment they have performed?",
        "context": "What are each professional's name and description of the treatment they have performed? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of",
        "label": "dog_kennels | select distinct t1.first_name, t1.last_name, t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t2.treatment_type_code = t3.treatment_type_code",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "singer | select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many singers are there?",
        "context": "How many singers are there? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select count(*) from singer",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the count of singers?",
        "context": "What is the count of singers? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select count(*) from singer",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer order by birth_year asc",
        "query": "SELECT Name FROM singer ORDER BY Birth_Year desc",
        "question": "List the name of singers in ascending order of age.",
        "context": "List the name of singers in ascending order of age. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer order by birth_year desc",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer order by birth_year asc",
        "query": "SELECT Name FROM singer ORDER BY Birth_Year desc",
        "question": "What are the names of singers ordered by ascending age?",
        "context": "What are the names of singers ordered by ascending age? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer order by birth_year desc",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select birth_year, citizenship from singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth year and citizenship of singers?",
        "context": "What are the birth year and citizenship of singers? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select birth_year, citizenship from singer",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select birth_year, citizenship from singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth years and citizenships of the singers?",
        "context": "What are the birth years and citizenships of the singers? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select birth_year, citizenship from singer",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where citizenship!= \"France\"",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "List the name of singers who is not French.",
        "context": "List the name of singers who is not French. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer where citizenship!= \"France\"",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where citizenship!= \"France\"",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "What are the names of the singers who are not French?",
        "context": "What are the names of the singers who are not French? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer where citizenship!= \"France\"",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where birth_year < 1948 or birth_year >= \"Song_id\"",
        "query": "SELECT Name FROM singer WHERE Birth_Year  <=  1948",
        "question": "Show the name of singers whose birth year is earlier than or in 1948?",
        "context": "Show the name of singers whose birth year is earlier than or in 1948? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer where birth_year <= 1948",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where birth_year < 1948 or birth_year >= \"Song_id\"",
        "query": "SELECT Name FROM singer WHERE Birth_Year  <=  1948",
        "question": "What are the names of the singers whose birth years are earlier than or in 1948?",
        "context": "What are the names of the singers whose birth years are earlier than or in 1948? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer where birth_year <= 1948",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer order by birth_year asc limit 1",
        "query": "SELECT Name FROM singer ORDER BY Birth_Year DESC LIMIT 1",
        "question": "What is the name of the singer with the youngest age?",
        "context": "What is the name of the singer with the youngest age? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer order by birth_year desc limit 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer order by birth_year asc limit 1",
        "query": "SELECT Name FROM singer ORDER BY Birth_Year DESC LIMIT 1",
        "question": "What is the name of the singer who is the youngest?",
        "context": "What is the name of the singer who is the youngest? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer order by birth_year desc limit 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship, count(*) from singer group by citizenship",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "context": "Show different citizenship of singers and the number of singers of each citizenship. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship, count(*) from singer group by citizenship",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship, count(*) from singer group by citizenship",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, how many singers are from that country?",
        "context": "For each citizenship, how many singers are from that country? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship, count(*) from singer group by citizenship",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common citizenship of singers.",
        "context": "Please show the most common citizenship of singers. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the msot common singer citizenship?",
        "context": "What is the msot common singer citizenship? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship, max(net_worth_millions) from singer group by citizenship",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenships and the highest net worth of singers of each citizenship.",
        "context": "Show different citizenships and the highest net worth of singers of each citizenship. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship, max(net_worth_millions) from singer group by citizenship",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship, max(net_worth_millions) from singer group by citizenship",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, what is the highest net worth?",
        "context": "For each citizenship, what is the highest net worth? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship, max(net_worth_millions) from singer group by citizenship",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select title from song order by sales desc limit 1",
        "query": "SELECT Title FROM song order by Sales desc limit 1",
        "question": "Show the names of the highest sales songs.",
        "context": "Show the names of the highest sales songs. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select title from song order by sales desc limit 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select title from song order by sales desc limit 1",
        "query": "SELECT Title FROM song order by Sales desc limit 1",
        "question": "What are names of the highest sales songs?",
        "context": "What are names of the highest sales songs? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select title from song order by sales desc limit 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select distinct t1.name from singer as t1 join song as t2 on t1.song_id = t2.song_id where t2.sales > 300000",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "context": "Show distinct names of singers that have songs with sales more than 300000. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select distinct t1.name from singer as t1 join song as t2 on t1.song_id = t2.song_id where t2.sales > 300000",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "context": "what are the different names of the singers that have sales more than 300000? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t1.name from singer as t1 join song as t2 on t1.song_id = t2.song_id group by t1.song_id having count(*) > 1",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "Show the names of singers that have more than one song.",
        "context": "Show the names of singers that have more than one song. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name having count(*) > 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t1.name from singer as t1 join song as t2 on t1.song_id = t2.song_id group by t1.song_id having count(*) > 1",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "What are the names of the singers that have more than one songs?",
        "context": "What are the names of the singers that have more than one songs? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name having count(*) > 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t1.name, max(t2.highest_position) from singer as t1 join song as t2 on t1.song_id = t2.song_id group by t1.song_id",
        "query": "SELECT T1.Name ,  max(T2.Highest_Position) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "Show the names of singers and the max highest position of their songs.",
        "context": "Show the names of singers and the max highest position of their songs. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select t1.name, max(t2.highest_position) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t1.name, max(t2.highest_position) from singer as t1 join song as t2 on t1.song_id = t2.song_id group by t1.song_id",
        "query": "SELECT T1.Name ,  max(T2.Highest_Position) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "For each singer name, what is the maximum highest position for their songs?",
        "context": "For each singer name, what is the maximum highest position for their songs? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select t1.name, max(t2.highest_position) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where singer_id not in (select singer_id from song)",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "List the name of singers that do not have any song.",
        "context": "List the name of singers that do not have any song. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer where singer_id not in (select singer_id from song)",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select title from song where singer_id not in (select singer_id from song)",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "What is the sname of every sing that does not have any song?",
        "context": "What is the sname of every sing that does not have any song? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select name from singer where singer_id not in (select singer_id from song)",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship from singer where birth_year < 1945 or birth_year = 1945",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <=  1945",
        "question": "Show the citizenship shared by singers with birth year before or in 1945.",
        "context": "Show the citizenship shared by singers with birth year before or in 1945. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship from singer where birth_year <= 1945",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship from singer where birth_year < 1945 or birth_year = 1945",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <=  1945",
        "question": "What are the citizenships that are shared by singers with a birth year before or in 1945?",
        "context": "What are the citizenships that are shared by singers with a birth year before or in 1945? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;",
        "label": "singer | select citizenship from singer where birth_year <= 1945",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8a793c161d19789dabec82bffbe451058b1a6b1f4ab8fa4d848c12accf42bb04/spider-dk/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    }
]