[
    {
        "prediction": "pets_1 | select stuid from has_pet as t1 join student as t2 on t1.stuid = t2.stuid join pets as t3 on t3.pet",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "context": "What is the id of the pet owned by the student whose last name is 'Smith'? | pets_1 | student : stuid, lname ( Smith ), fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight | description | student.sex may be 'M' for male students, otherwise if the student is female, it is 'F'. student.major is the main subject that they are studying. student.city_code is the code of the city where the student comes from; has_pet: students who own a pet;",
        "label": "pets_1 | select t2.petid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.lname = 'Smith'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "tvshow | select title from cartoon order by title",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "List the title of all cartoons in alphabetical order.",
        "context": "List the title of all cartoons in alphabetical order. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel | description | tv_channel.pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel; tv_series.air_date is the scheduled date of a broadcast as a datetime; cartoon.directed_by is the name of the person who directed cartoon. cartoon.written_by is the name of the person who wrote the cartoon;",
        "label": "tvshow | select title from cartoon order by title",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "context": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus | description | shop: is a building or part of a building where goods or services are sold. shop.district is an area of a country where the shop is located. shop.number_products is the number of products in the shop; hiring: is the act of starting to employ someone;",
        "label": "employee_hire_evaluation | select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "context": "What are the date and the operating professional's first name of each treatment? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | dogs.date_arrived is the date of arrival of the dog in the kennel as a datetime. dogs.date_departed is the date of departure of the dog from kennel as a datetime; treatments.date_of_treatment is the date on which the treatment was applied as a datetime. treatments.cost_of_treatment is how much the treatment cost as a datetime;",
        "label": "dog_kennels | select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = 'Asie' group by t2.language order by count(*) desc limit 1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "context": "What is the language that is used by the largest number of Asian nations? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage | description | country.continent is any of the world's main continuous expanses of land. country.indepyear is the year of independence. country.lifeexpectancy is life expectancy in number of years; countrylanguage.isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N';",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = \"Asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "flight_2 | select city, country from airports where airportname = \"Alton\"",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Which city and country is the Alton airport at?",
        "context": "Which city and country is the Alton airport at? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Alton ), airportcode, airportname ( Alton ), country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airport.city is the city which has an airport. airport.country is the country in which the aiport is located; flights.sourceairport is the source airport from which the flight is taking off. flights.destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select city, country from airports where airportname = \"Alton\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id except select t3.professional_id, t3.role_code, t3.email_address from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id join professionals as t3 on t2.professional_id = t3.professional_id where t2.date_of_treatment = 'No'",
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "context": "Which professional did not operate any treatment on dogs? List the professional's id, role and email. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | dogs: information about dogs in the kennel. dogs.abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. dogs.date_departed is the date of departure of the dog from kennel as a datetime; treatments: treatments and medical care applied to the dogs and the employee who applied them;",
        "label": "dog_kennels | select professional_id, role_code, email_address from professionals except select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "singer | select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "context": "Show distinct names of singers that have songs with sales more than 300000. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer.birth_year is the year when the singer was born. singer.net_worth_millions how many millions earned; song.singer_id is the id of the singer who is interpreting the song. song.sales are activities related to selling music recordings through record shops or online;",
        "label": "singer | select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "concert_singer | select t1.name, t1.country from singer as t1 join singer_in_concert as t2 on",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "context": "what is the name and nation of the singer who have a song having 'Hey' in its name? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium.name is the stadium name; singer: artist who sings, especially professionally. singer.country is the nation where the singer comes from. singer.is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F';",
        "label": "concert_singer | select name, country from singer where song_name like '%hey%'",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name, count(*) from highschooler as t1 join friend as t2 on t1.id = t2.friend_id group by t2.friend_id",
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "context": "What are the names of the high schoolers and how many friends does each have? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler | description | friend.student_id is the highschooler who has a friend. friend.friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. likes.student_id is the highschooler who has likes;",
        "label": "network_1 | select t2.name, count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "world_1 | select name, population, lifeexpectancy from country where continent = 'Asie' order by surfacearea desc limit 1",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "context": "Find the name, population and expected life length of asian country with the largest area? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage | description | country: nation with its government, occupying a particular territory. country.region is an area, especially a part of a country or the world having definable characteristics. country.localname is the local name of the country; countrylanguage.percentage is the percentage of people who speak this language within the country;",
        "label": "world_1 | select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t2.student_id having count(*) >= 3",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "context": "Show the names of high schoolers who have at least 3 friends. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler | description | friend.student_id is the highschooler who has a friend. friend.friend_id is the highschooler who is friends with the student_id; likes: one student likes another student when they have similar qualities. likes.student_id is the highschooler who has likes;",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 3",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from country where continent = 'Asie'",
        "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "question": "how many countries are in Asia?",
        "context": "how many countries are in Asia? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage | description | country.surfacearea is the surface area of the country. country.lifeexpectancy is life expectancy in number of years. country.localname is the local name of the country; countrylanguage.percentage is the percentage of people who speak this language within the country;",
        "label": "world_1 | select count(*) from country where continent = \"Asia\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "context": "Count the number of paragraphs in the document named 'Summer Show'. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Summer Show ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | templates: pre-created documents that already have some formatting. templates.version_number is the version number associated with the template. templates.date_effective_to is the date untill when the template is valid as a datetime; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "car_1 | select t2.mpg, avg",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "context": "What is the average miles per gallon of all the cards with 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | car_makers.country is the countryid where a maker is located in; car_names: general information about cars which exist in cars data; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. cars_data.mpg (miles per gallon) is fuel consumption;",
        "label": "car_1 | select avg(mpg) from cars_data where cylinders = 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airline where destairport = \"Aberdeen\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "context": "How many United Airlines flights go to City 'Aberdeen'? | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airport: location from which aircraft flight operations take place and airline can have multiple flights. airport.city is the city which has an airport; flights.airline is the airline id which performs the flight. flights.destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airlines as t3 on t3.uid = t1.airline where t2.city = \"Aberdeen\" and t3.airline = \"United Airlines\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports as t1 join flights as t2 on t1.city = \"Aberdeen\" or t1.countryabbrev = \"Abilene\"",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "context": "Find the number of flights landing in the city of Aberdeen or Abilene. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Abilene, Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airport.city is the city which has an airport. airport.country is the country in which the aiport is located; flights.sourceairport is the source airport from which the flight is taking off. flights.destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\" or t2.city = \"Abilene\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "world_1 | select t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join country as t3 on t2.countrycode = t3.code where t1.headofstate = 'Beirut'",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "context": "What is the official language used in the country the name of whose head of state is Beatrix. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage | description | country.region is an area, especially a part of a country or the world having definable characteristics. country.localname is the local name of the country; countrylanguage.isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. countrylanguage.percentage is the percentage of people who speak this language within the country;",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = \"Beatrix\" and t2.isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from documents group by template_id having count(*) > 1",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "What are the template ids of any templates used in more than a single document?",
        "context": "What are the template ids of any templates used in more than a single document? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details | description | templates: pre-created documents that already have some formatting. templates.version_number is the version number associated with the template. templates.date_effective_to is the date untill when the template is valid as a datetime; paragraphs: are separate sections of a text, usually dealing with a single topic and are indicated by a new line, indentation or numbering;",
        "label": "cre_Doc_Template_Mgt | select template_id from documents group by template_id having count(*) > 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines where country = \"USA\"",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "Return the number of airlines in the USA.",
        "context": "Return the number of airlines in the USA. | flight_2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airport.country is the country in which the aiport is located; flights.airline is the airline id which performs the flight. flights.sourceairport is the source airport from which the flight is taking off. flights.destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from airlines where country = \"USA\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    }
]