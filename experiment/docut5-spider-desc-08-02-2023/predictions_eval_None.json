[
    {
        "prediction": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.city = t2.airport",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "Give the code of the airport with the least flights.",
        "context": "Give the code of the airport with the least flights. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airport: location from which aircraft flight operations take place and airline can have multiple flights. flights: a flight is a journey from a source airport to a destination airport. sourceairport is the source airport from which the flight is taking off. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid join student as t3 on t2.stuid = t3.stuid where t3.age > 20",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "Find number of pets owned by students who are older than 20.",
        "context": "Find number of pets owned by students who are older than 20. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. has_pet: students who own a pet;",
        "label": "pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.age > 20",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select avg(t2.date_left) from transcript_contents as t1 join student_enrolment as t2",
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "question": "On average, when were the transcripts printed?",
        "context": "On average, when were the transcripts printed? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts | description | transcripts: all transcript data are recorded. transcript_date is the date of the transcript as date",
        "label": "student_transcripts_tracking | select avg(transcript_date) from transcripts",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "battle_death | select distinct t1.name from battle as t1 join battle as t2 on t1.id = t2.b",
        "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "context": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? | battle_death | battle : id, name, date, bulgarian_commander ( Kaloyan ), latin_commander ( Baldwin I ), result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured | description | battle: fight between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander;",
        "label": "battle_death | select name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.last_name from players as t1 join players as t2 on t1.player_id = t2.player_id where t2.hand = 'L' order by t2.birth_date",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "context": "List the first and last name of all players who are left / L hand in the order of birth date. | wta_1 | players : player_id, first_name, last_name ( Last, Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime.",
        "label": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from shop where shop_id not in (select shop_id from hiring)",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Find the name of the shops that do not hire any employee.",
        "context": "Find the name of the shops that do not hire any employee. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus | description | shop: is a building or part of a building where goods or services are sold. hiring: is the act of starting to employ someone.",
        "label": "employee_hire_evaluation | select name from shop where shop_id not in (select shop_id from hiring)",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports as t1 join flights as t2 on t1.city = t2.destairport where t1.city = \"Aberdeen\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights arriving in Aberdeen city?",
        "context": "How many flights arriving in Aberdeen city? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | airport: location from which aircraft flight operations take place and airline can have multiple flights. city is the city which has an airport. flights: a flight is a journey from a source airport to a destination airport. destairport is the destination airport to which the flight is going to;",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t2.maker = \"Fat\" group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t2.maker = \"Fiat\"",
        "query": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "context": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( fiat ), fullname ( Fiat ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( fiat ) foreign key car_names | car_names : makeid foreign key cars_data, model ( fiat ) foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | countries: are nations which occupies a certain territory. car_makers: a business engaged in the manufacture of automobiles. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model;",
        "label": "car_1 | select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "network_1 | select name, grade from highschooler",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "Show the names and grades of each high schooler.",
        "context": "Show the names and grades of each high schooler. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler | description | highschooler: student at a high school. grade is a number obtained by a student in the exam;",
        "label": "network_1 | select name, grade from highschooler",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat'",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "context": "Find the first name and age of students who have a dog but do not have a cat as a pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( cat, dog ), pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. fname is the first name. has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties.",
        "label": "pets_1 | select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select major, age from student where stuid not in (select stuid from has_pet where pettype = 'cat'",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the major and age of students who do not have a cat pet.",
        "context": "Find the major and age of students who do not have a cat pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( cat ), pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. major is the main subject that they are studying. has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties.",
        "label": "pets_1 | select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "How many flights do we have?",
        "context": "How many flights do we have? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports | description | flights: a flight is a journey from a source airport to a destination airport.",
        "label": "flight_2 | select count(*) from flights",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "wta_1 | select winner_name from matches where winner_age = 2013 intersect select winner_name from matches where winner_age = 2016",
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "context": "List the names of all winners who played in both 2013 and 2016. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. year is the year in which the match was played;",
        "label": "wta_1 | select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code from players group by country_code order by count(*) desc limit 1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of the country with the most players?",
        "context": "What is the code of the country with the most players? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. country_code is the player's home country code;",
        "label": "wta_1 | select country_code from players group by country_code order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*) from pets where sex = 'F' and stuid in (select stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t3.stuid = t2.stuid",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "How many dog pets are raised by female students?",
        "context": "How many dog pets are raised by female students? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog ), pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. sex may be 'M' for male students, otherwise if the student is female, it is 'F'. has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties.",
        "label": "pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t1.sex = 'F' and t3.pettype = 'dog'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "Show names of teachers that teach at least two courses.",
        "context": "Show names of teachers that teach at least two courses. | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade | description | teacher: is a person who teaches, especially in a school; course_arrange: teachers are teaching courses.",
        "label": "course_teach | select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "orchestra | select count(*) from orchestra where major_record_format = 'CD' or major_record_format = 'DVD'",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "context": "Count the number of orchestras that have CD or DVD as their record format. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format ( DVD, CD ) | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance | description | orchestra: is a group of instrumentalists. major_record_format' is the usual format in which the orchestra made the recordings;",
        "label": "orchestra | select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.player_id",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "context": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( Australian Open, WTA Championships ), winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner.",
        "label": "wta_1 | select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "dog_kennels | select state from owners intersect select state from professionals",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Find the states where both owners and professionals live.",
        "context": "Find the states where both owners and professionals live. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | owners: information about dog owners. professionals: employees treating pets; treatments: treatments and medical care applied to the dogs and the employee who applied them.",
        "label": "dog_kennels | select state from owners intersect select state from professionals",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.last_name from transcripts as t1 join",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "What is the last transcript release date?",
        "context": "What is the last transcript release date? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts | description | transcripts: all transcript data are recorded. transcript_date is the date of the transcript as datetime;",
        "label": "student_transcripts_tracking | select transcript_date from transcripts order by transcript_date desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/3774fcbfa26b7be06b8262239d11ec9578aa20f5b4a83f6787691a2c749c2e67/spider-desc/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    }
]