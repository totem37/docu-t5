[{"prediction": "singer | select birth_year, citizenship from singer", "query": "SELECT Birth_Year ,  Citizenship FROM singer", "question": "What are the birth year and citizenship of singers?", "context": "What are the birth year and citizenship of singers? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;", "label": "singer | select birth_year, citizenship from singer", "db_id": "singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}, "schema_length": 160, "description_length": 530}, {"prediction": "singer | select birth_year, citizenship from singer", "query": "SELECT Birth_Year ,  Citizenship FROM singer", "question": "What are the birth years and citizenships of the singers?", "context": "What are the birth years and citizenships of the singers? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;", "label": "singer | select birth_year, citizenship from singer", "db_id": "singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}, "schema_length": 160, "description_length": 530}, {"prediction": "singer | select name from singer where birth_year = 1948 or birth_year = 1949", "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "question": "Show the name of singers whose birth year is either 1948 or 1949?", "context": "Show the name of singers whose birth year is either 1948 or 1949? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;", "label": "singer | select name from singer where birth_year = 1948 or birth_year = 1949", "db_id": "singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}, "schema_length": 160, "description_length": 530}, {"prediction": "singer | select name from singer where birth_year = 1948 or birth_year = 1949", "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "question": "What are the names of the singers whose birth years are either 1948 or 1949?", "context": "What are the names of the singers whose birth years are either 1948 or 1949? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;", "label": "singer | select name from singer where birth_year = 1948 or birth_year = 1949", "db_id": "singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}, "schema_length": 160, "description_length": 530}, {"prediction": "singer | select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "context": "Show the citizenship shared by singers with birth year before 1945 and after 1955. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;", "label": "singer | select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955", "db_id": "singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}, "schema_length": 160, "description_length": 530}, {"prediction": "singer | select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "context": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position | description | singer: vocalist or musician who sings. singer_id is the id of the singer. birth_year is the year when the singer was born. net_worth_millions how many millions earned. citizenship is the country where the singer is from; song: is a short musical composition of words and music sing by a singer. singer_id is the id of the singer who is interpreting the song. sales are activities related to selling music recordings through record shops or online. highest_position the highest position of the song in the ranking;", "label": "singer | select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955", "db_id": "singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["singer", "song"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship", "Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "db_foreign_keys": {"column_id": [8], "other_column_id": [1]}, "schema_length": 160, "description_length": 530}, {"prediction": "pets_1 | select count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid join student as t3 on t2.stuid = t3.stuid where t3.age > 20", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "question": "Find number of pets owned by students who are older than 20.", "context": "Find number of pets owned by students who are older than 20. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;", "label": "pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.age > 20", "db_id": "pets_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}, "schema_length": 181, "description_length": 615}, {"prediction": "pets_1 | select distinct t1.pettype, t1.weight from pets as t1 join has_pet as t2 on t1.petid = t2.petid order by t2.pet", "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "question": "Find the type and weight of the youngest pet.", "context": "Find the type and weight of the youngest pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;", "label": "pets_1 | select pettype, weight from pets order by pet_age limit 1", "db_id": "pets_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}, "schema_length": 181, "description_length": 615}, {"prediction": "pets_1 | select pettype, weight from pets order by weight asc limit 1", "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "question": "What type of pet is the youngest animal, and how much does it weigh?", "context": "What type of pet is the youngest animal, and how much does it weigh? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;", "label": "pets_1 | select pettype, weight from pets order by pet_age limit 1", "db_id": "pets_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}, "schema_length": 181, "description_length": 615}, {"prediction": "pets_1 | select petid, weight from pets where pet_age > 1", "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "question": "Find the id and weight of all pets whose age is older than 1.", "context": "Find the id and weight of all pets whose age is older than 1. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;", "label": "pets_1 | select petid, weight from pets where pet_age > 1", "db_id": "pets_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}, "schema_length": 181, "description_length": 615}, {"prediction": "pets_1 | select petid, weight from pets where pet_age > 1", "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "question": "What is the id and weight of every pet who is older than 1?", "context": "What is the id and weight of every pet who is older than 1? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;", "label": "pets_1 | select petid, weight from pets where pet_age > 1", "db_id": "pets_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}, "schema_length": 181, "description_length": 615}, {"prediction": "pets_1 | select weight from pets where pet_age = (select min(weight) from pets)", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "question": "Find the weight of the youngest dog.", "context": "Find the weight of the youngest dog. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog ), pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;", "label": "pets_1 | select weight from pets order by pet_age limit 1", "db_id": "pets_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}, "schema_length": 189, "description_length": 615}, {"prediction": "pets_1 | select weight from pets order by weight asc limit 1", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "question": "How much does the youngest dog weigh?", "context": "How much does the youngest dog weigh? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog ), pet_age, weight | description | student: is a person who is studying at a university or other place of higher education. lname is last name. fname is the first name. sex may be 'M' for male students, otherwise if the student is female, it is 'F'. major is the main subject that they are studying. advisor supports the students in academic and personal matters. city_code is the code of the city where the student comes from; has_pet: students who own a pet; pets: are domestic or tamed animals kept for companionship or pleasure. pettype is 'dog' for puppies or 'cat' for kitties. pet_birthday is the birthday of a pet as datetime;", "label": "pets_1 | select weight from pets order by pet_age limit 1", "db_id": "pets_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Student", "Has_Pet", "Pets"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2], "column_name": ["*", "StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code", "StuID", "PetID", "PetID", "PetType", "pet_age", "weight"]}, "db_foreign_keys": {"column_id": [9, 10], "other_column_id": [1, 11]}, "schema_length": 189, "description_length": 615}, {"prediction": "poker_player | select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.e", "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "question": "What is the birth date of the poker player with the lowest earnings?", "context": "What is the birth date of the poker player with the lowest earnings? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: player who plays the card game called poker. final_table_made is the players who made it for the final table. earnings is the number of earnings revenue obtained by the player; people: anyone can be a poker player. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. height is the height of the poker player;", "label": "poker_player | select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings asc limit 1", "db_id": "poker_player", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["poker_player", "people"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings", "People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "db_foreign_keys": {"column_id": [2], "other_column_id": [7]}, "schema_length": 191, "description_length": 403}, {"prediction": "poker_player | select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.e", "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "question": "Return the birth date of the poker player with the lowest earnings.", "context": "Return the birth date of the poker player with the lowest earnings. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: player who plays the card game called poker. final_table_made is the players who made it for the final table. earnings is the number of earnings revenue obtained by the player; people: anyone can be a poker player. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. height is the height of the poker player;", "label": "poker_player | select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings asc limit 1", "db_id": "poker_player", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["poker_player", "people"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings", "People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "db_foreign_keys": {"column_id": [2], "other_column_id": [7]}, "schema_length": 191, "description_length": 403}, {"prediction": "poker_player | select name, birth_date from people order by name asc", "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "question": "List the names and birth dates of people in ascending alphabetical order of name.", "context": "List the names and birth dates of people in ascending alphabetical order of name. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: player who plays the card game called poker. final_table_made is the players who made it for the final table. earnings is the number of earnings revenue obtained by the player; people: anyone can be a poker player. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. height is the height of the poker player;", "label": "poker_player | select name, birth_date from people order by name asc", "db_id": "poker_player", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["poker_player", "people"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings", "People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "db_foreign_keys": {"column_id": [2], "other_column_id": [7]}, "schema_length": 191, "description_length": 403}, {"prediction": "poker_player | select name, birth_date from people order by name asc", "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "context": "What are the names and birth dates of people, ordered by their names in alphabetical order? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height | description | poker_player: player who plays the card game called poker. final_table_made is the players who made it for the final table. earnings is the number of earnings revenue obtained by the player; people: anyone can be a poker player. nationality is the country the poker player comes from. birth_date is the birthday of the pocker player as datetime. height is the height of the poker player;", "label": "poker_player | select name, birth_date from people order by name asc", "db_id": "poker_player", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["poker_player", "people"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "column_name": ["*", "Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings", "People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "db_foreign_keys": {"column_id": [2], "other_column_id": [7]}, "schema_length": 191, "description_length": 403}, {"prediction": "course_teach | select hometown from teacher order by age asc limit 1", "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "question": "What is the hometown of the youngest teacher?", "context": "What is the hometown of the youngest teacher? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade | description | course: program of studies required to complete a university degree. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: is a person who teaches, especially in a school; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;", "label": "course_teach | select hometown from teacher order by age asc limit 1", "db_id": "course_teach", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["course", "teacher", "course_arrange"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2], "column_name": ["*", "Course_ID", "Staring_Date", "Course", "Teacher_ID", "Name", "Age", "Hometown", "Course_ID", "Teacher_ID", "Grade"]}, "db_foreign_keys": {"column_id": [9, 8], "other_column_id": [4, 1]}, "schema_length": 216, "description_length": 378}, {"prediction": "course_teach | select hometown from teacher order by age asc limit 1", "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "question": "Where is the youngest teacher from?", "context": "Where is the youngest teacher from? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade | description | course: program of studies required to complete a university degree. staring_date or starting date is the date the student began the course as a datetime. course is the name of the course; teacher: is a person who teaches, especially in a school; course_arrange: teachers are teaching courses. grade is the grade obtained by the student at the end of the course;", "label": "course_teach | select hometown from teacher order by age asc limit 1", "db_id": "course_teach", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["course", "teacher", "course_arrange"], "db_column_names": {"table_id": [-1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2], "column_name": ["*", "Course_ID", "Staring_Date", "Course", "Teacher_ID", "Name", "Age", "Hometown", "Course_ID", "Teacher_ID", "Grade"]}, "db_foreign_keys": {"column_id": [9, 8], "other_column_id": [4, 1]}, "schema_length": 216, "description_length": 378}, {"prediction": "museum_visit | select avg(num_of_staff) from museum where open_year < 2009", "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "question": "Find the average number of staff working for the museums that were open before 2009.", "context": "Find the average number of staff working for the museums that were open before 2009. | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent | description | museum: place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. open_year is the year when the museum opened for the public; visitor: someone who is visiting a museum. level_of_membership is the visitor membership level; visit: visitors who are going/visiting to a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;", "label": "museum_visit | select avg(num_of_staff) from museum where open_year < 2009", "db_id": "museum_visit", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["museum", "visitor", "visit"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "Museum_ID", "Name", "Num_of_Staff", "Open_Year", "ID", "Name", "Level_of_membership", "Age", "Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "db_foreign_keys": {"column_id": [10, 9], "other_column_id": [5, 1]}, "schema_length": 231, "description_length": 463}, {"prediction": "museum_visit | select name from museum where num_of_staff > (select min(num_of_staff) from museum where open_year > 2010)", "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "context": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent | description | museum: place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. open_year is the year when the museum opened for the public; visitor: someone who is visiting a museum. level_of_membership is the visitor membership level; visit: visitors who are going/visiting to a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;", "label": "museum_visit | select name from museum where num_of_staff > (select min(num_of_staff) from museum where open_year > 2010)", "db_id": "museum_visit", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["museum", "visitor", "visit"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "Museum_ID", "Name", "Num_of_Staff", "Open_Year", "ID", "Name", "Level_of_membership", "Age", "Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "db_foreign_keys": {"column_id": [10, 9], "other_column_id": [5, 1]}, "schema_length": 231, "description_length": 463}, {"prediction": "museum_visit | select t1.name from visitor as t1 join visit as t2 on t1.id = t2.visitor_id join museum as t3 on t3.museum_id = t2.museum_id where t3.open_year < 2009 intersect select t1.name from visitor as t1 join visit as t2 on t1.id = t2.visitor_id join museum as t3 on t3.museum_id = t3.museum_id where t3.open_year > 2011", "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "context": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent | description | museum: place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. open_year is the year when the museum opened for the public; visitor: someone who is visiting a museum. level_of_membership is the visitor membership level; visit: visitors who are going/visiting to a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;", "label": "museum_visit | select t1.name from visitor as t1 join visit as t2 on t1.id = t2.visitor_id join museum as t3 on t3.museum_id = t2.museum_id where t3.open_year < 2009 intersect select t1.name from visitor as t1 join visit as t2 on t1.id = t2.visitor_id join museum as t3 on t3.museum_id = t2.museum_id where t3.open_year > 2011", "db_id": "museum_visit", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["museum", "visitor", "visit"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "Museum_ID", "Name", "Num_of_Staff", "Open_Year", "ID", "Name", "Level_of_membership", "Age", "Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "db_foreign_keys": {"column_id": [10, 9], "other_column_id": [5, 1]}, "schema_length": 231, "description_length": 463}, {"prediction": "museum_visit | select count(*) from visitor where visitor_id not in ( select visitor_id from visit where museum_id not in", "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "question": "Find the number of visitors who did not visit any museum opened after 2010.", "context": "Find the number of visitors who did not visit any museum opened after 2010. | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent | description | museum: place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. open_year is the year when the museum opened for the public; visitor: someone who is visiting a museum. level_of_membership is the visitor membership level; visit: visitors who are going/visiting to a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;", "label": "museum_visit | select count(*) from visitor where id not in (select t2.visitor_id from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id where t1.open_year > 2010)", "db_id": "museum_visit", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["museum", "visitor", "visit"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "Museum_ID", "Name", "Num_of_Staff", "Open_Year", "ID", "Name", "Level_of_membership", "Age", "Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "db_foreign_keys": {"column_id": [10, 9], "other_column_id": [5, 1]}, "schema_length": 231, "description_length": 463}, {"prediction": "museum_visit | select count(*) from museum where open_year > 2013 or open_year < 2008", "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "question": "How many museums were opened after 2013 or before 2008?", "context": "How many museums were opened after 2013 or before 2008? | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent | description | museum: place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. open_year is the year when the museum opened for the public; visitor: someone who is visiting a museum. level_of_membership is the visitor membership level; visit: visitors who are going/visiting to a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;", "label": "museum_visit | select count(*) from museum where open_year > 2013 or open_year < 2008", "db_id": "museum_visit", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["museum", "visitor", "visit"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "Museum_ID", "Name", "Num_of_Staff", "Open_Year", "ID", "Name", "Level_of_membership", "Age", "Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "db_foreign_keys": {"column_id": [10, 9], "other_column_id": [5, 1]}, "schema_length": 231, "description_length": 463}, {"prediction": "museum_visit | select open_year, num_of_staff from museum where name = 'Pala Museum'", "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "question": "What are the opening year and staff number of the museum named Plaza Museum?", "context": "What are the opening year and staff number of the museum named Plaza Museum? | museum_visit | museum : museum_id foreign key visit, name ( Plaza Museum ), num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent | description | museum: place or building where objects of historical, artistic, or scientific interest are exhibited, preserved, or studied. open_year is the year when the museum opened for the public; visitor: someone who is visiting a museum. level_of_membership is the visitor membership level; visit: visitors who are going/visiting to a museum. num_of_ticket is the number of tickets purchased. total_spent is how much money the visitor spent at the museum;", "label": "museum_visit | select num_of_staff, open_year from museum where name = 'Plaza Museum'", "db_id": "museum_visit", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["museum", "visitor", "visit"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], "column_name": ["*", "Museum_ID", "Name", "Num_of_Staff", "Open_Year", "ID", "Name", "Level_of_membership", "Age", "Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "db_foreign_keys": {"column_id": [10, 9], "other_column_id": [5, 1]}, "schema_length": 248, "description_length": 463}, {"prediction": "voter_1 | select created from votes where state = 'CA'", "query": "SELECT max(created) FROM votes WHERE state  =  'CA'", "question": "What is last date created of votes from the state 'CA'?", "context": "What is last date created of votes from the state 'CA'? | voter_1 | area_code_state : area_code, state ( CA ) foreign key votes | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state ( CA ) foreign key area_code_state, contestant_number foreign key contestants, created | description | area_code_state: two letters code associated with each state; contestants: are people who take part in an election or competition; votes: are formal indications of a choice between two or more candidates. created is the date when the vote was created as datetime;", "label": "voter_1 | select max(created) from votes where state = 'CA'", "db_id": "voter_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["AREA_CODE_STATE", "CONTESTANTS", "VOTES"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "area_code", "state", "contestant_number", "contestant_name", "vote_id", "phone_number", "state", "contestant_number", "created"]}, "db_foreign_keys": {"column_id": [8, 7], "other_column_id": [3, 2]}, "schema_length": 249, "description_length": 279}, {"prediction": "battle_death | select name, date, result from battle", "query": "SELECT name ,  date FROM battle", "question": "List the name, date and result of each battle.", "context": "List the name, date and result of each battle. | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured | description | battle: fight between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander; ship: large boat which cab take part in fights. lost_in_battle is the id of the battle in which the ship lost. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle; death: records the numbers of killed and injured people during battles. killed is the number of those killed. injured is the number of those injured;", "label": "battle_death | select name, date from battle", "db_id": "battle_death", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["battle", "ship", "death"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "id", "name", "date", "bulgarian_commander", "latin_commander", "result", "lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship", "caused_by_ship_id", "id", "note", "killed", "injured"]}, "db_foreign_keys": {"column_id": [7, 14], "other_column_id": [1, 8]}, "schema_length": 263, "description_length": 572}, {"prediction": "battle_death | select t1.name, t1.date from battle as t1 join ship as t2 on", "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "context": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name ( HMS Atalanta, Lettice ), tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured | description | battle: fight between large organized armed forces. bulgarian_commander is the name of the Bulgarian commander. latin_commander is the name of the Latin commander; ship: large boat which cab take part in fights. lost_in_battle is the id of the battle in which the ship lost. tonnage is the size or carrying capacity of a ship measured in tons. disposition_of_ship is how the ship ended up after the battle; death: records the numbers of killed and injured people during battles. killed is the number of those killed. injured is the number of those injured;", "label": "battle_death | select t1.name, t1.date from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.name = 'Lettice' intersect select t1.name, t1.date from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.name = 'HMS Atalanta'", "db_id": "battle_death", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["battle", "ship", "death"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "id", "name", "date", "bulgarian_commander", "latin_commander", "result", "lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship", "caused_by_ship_id", "id", "note", "killed", "injured"]}, "db_foreign_keys": {"column_id": [7, 14], "other_column_id": [1, 8]}, "schema_length": 289, "description_length": 572}, {"prediction": "world_1 | select name from country where indepyear > 1950", "query": "SELECT Name FROM country WHERE IndepYear  >  1950", "question": "Give the names of the nations that were founded after 1950.", "context": "Give the names of the nations that were founded after 1950. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage | description | city: inhabited place of greater size, population, or importance than a town or village; country: nation with its government, occupying a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. indepyear is the year of independence. surfacearea is the surface area of the country. lifeexpectancy is life expectancy in number of years. gnp is the gross national product. localname is the local name of the country. governmentform is government form of the country; countrylanguage: languages used within a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language within the country;", "label": "world_1 | select name from country where indepyear > 1950", "db_id": "world_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["city", "sqlite_sequence", "country", "countrylanguage"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "ID", "Name", "CountryCode", "District", "Population", "name", "seq", "Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2", "CountryCode", "Language", "IsOfficial", "Percentage"]}, "db_foreign_keys": {"column_id": [3, 23], "other_column_id": [8, 8]}, "schema_length": 362, "description_length": 900}, {"prediction": "world_1 | select count(distinct language) from countrylanguage where countrycode > 1930", "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "context": "What is the total number of unique official languages spoken in the countries that are founded before 1930? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage | description | city: inhabited place of greater size, population, or importance than a town or village; country: nation with its government, occupying a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. indepyear is the year of independence. surfacearea is the surface area of the country. lifeexpectancy is life expectancy in number of years. gnp is the gross national product. localname is the local name of the country. governmentform is government form of the country; countrylanguage: languages used within a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language within the country;", "label": "world_1 | select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where indepyear < 1930 and t2.isofficial = \"T\"", "db_id": "world_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["city", "sqlite_sequence", "country", "countrylanguage"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "ID", "Name", "CountryCode", "District", "Population", "name", "seq", "Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2", "CountryCode", "Language", "IsOfficial", "Percentage"]}, "db_foreign_keys": {"column_id": [3, 23], "other_column_id": [8, 8]}, "schema_length": 362, "description_length": 900}, {"prediction": "world_1 | select count(distinct language) from countrylanguage where isofficial > 1930", "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "question": "For the countries founded before 1930, what is the total number of distinct official languages?", "context": "For the countries founded before 1930, what is the total number of distinct official languages? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage | description | city: inhabited place of greater size, population, or importance than a town or village; country: nation with its government, occupying a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. indepyear is the year of independence. surfacearea is the surface area of the country. lifeexpectancy is life expectancy in number of years. gnp is the gross national product. localname is the local name of the country. governmentform is government form of the country; countrylanguage: languages used within a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language within the country;", "label": "world_1 | select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where indepyear < 1930 and t2.isofficial = \"T\"", "db_id": "world_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["city", "sqlite_sequence", "country", "countrylanguage"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "ID", "Name", "CountryCode", "District", "Population", "name", "seq", "Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2", "CountryCode", "Language", "IsOfficial", "Percentage"]}, "db_foreign_keys": {"column_id": [3, 23], "other_column_id": [8, 8]}, "schema_length": 362, "description_length": 900}, {"prediction": "concert_singer | select name, country, age from singer order by age desc", "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "context": "Show name, country, age for all singers ordered by age from the oldest to the youngest. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "concert_singer | select name, country, age from singer order by age desc", "db_id": "concert_singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}, "schema_length": 367, "description_length": 684}, {"prediction": "concert_singer | select t3.name, t2.song_release_year from singer_in_concert as t1 join concert as t2", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "question": "Show the name and the release year of the song by the youngest singer.", "context": "Show the name and the release year of the song by the youngest singer. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "concert_singer | select song_name, song_release_year from singer order by age limit 1", "db_id": "concert_singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}, "schema_length": 367, "description_length": 684}, {"prediction": "concert_singer | select name, song_release_year from singer order by age limit 1", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "question": "What are the names and release years for all the songs of the youngest singer?", "context": "What are the names and release years for all the songs of the youngest singer? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "concert_singer | select song_name, song_release_year from singer order by age limit 1", "db_id": "concert_singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}, "schema_length": 367, "description_length": 684}, {"prediction": "concert_singer | select name from singer where age > (select avg(age) from singer)", "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "question": "What are all the song names by singers who are older than average?", "context": "What are all the song names by singers who are older than average? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "concert_singer | select song_name from singer where age > (select avg(age) from singer)", "db_id": "concert_singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}, "schema_length": 367, "description_length": 684}, {"prediction": "concert_singer | select count(*) from concert where year = 2014 or year = 2015", "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "question": "How many concerts are there in year 2014 or 2015?", "context": "How many concerts are there in year 2014 or 2015? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "concert_singer | select count(*) from concert where year = 2014 or year = 2015", "db_id": "concert_singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}, "schema_length": 367, "description_length": 684}, {"prediction": "concert_singer | select name, capacity from stadium order by capacity desc limit 1", "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "context": "Show the stadium name and capacity with most number of concerts in year 2014 or after. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "concert_singer | select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t2.stadium_id order by count(*) desc limit 1", "db_id": "concert_singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}, "schema_length": 367, "description_length": 684}, {"prediction": "concert_singer | select name, capacity from stadium order by capacity desc limit 1", "query": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "context": "What is the name and capacity of the stadium with the most concerts after 2013? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "concert_singer | select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t2.stadium_id order by count(*) desc limit 1", "db_id": "concert_singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}, "schema_length": 367, "description_length": 684}, {"prediction": "concert_singer | select year from concert group by year order by count(*) desc limit 1", "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "question": "Which year has most number of concerts?", "context": "Which year has most number of concerts? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "concert_singer | select year from concert group by year order by count(*) desc limit 1", "db_id": "concert_singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}, "schema_length": 367, "description_length": 684}, {"prediction": "concert_singer | select year from concert group by year order by count(*) desc limit 1", "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "question": "What is the year that had the most concerts?", "context": "What is the year that had the most concerts? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "concert_singer | select year from concert group by year order by count(*) desc limit 1", "db_id": "concert_singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}, "schema_length": 367, "description_length": 684}, {"prediction": "concert_singer | select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014", "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "context": "Show names for all stadiums except for stadiums having a concert in year 2014. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "concert_singer | select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014", "db_id": "concert_singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}, "schema_length": 367, "description_length": 684}, {"prediction": "concert_singer | select t3.name from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id join singer as t3 on", "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "question": "List all singer names in concerts in year 2014.", "context": "List all singer names in concerts in year 2014. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer | description | stadium: arena with tiers of seats for spectators. name is the stadium name. capacity of a stadium is the maximum number of seats available for spectators. highest is the highest or maximum number of participants at the stadium. lowest is the lowest minimum number of spectators. average is the average attendance at the stadium; singer: artist who sings, especially professionally. country is the nation where the singer comes from. is_male is 'T' if the singer is male, otherwise if the singer is female, it is 'F'; concert: is a musical performance given in public; singer_in_concert: singers who performed in a concert. year of the singer performance in a concert;", "label": "concert_singer | select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year = 2014", "db_id": "concert_singer", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["stadium", "singer", "concert", "singer_in_concert"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], "column_name": ["*", "Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average", "Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male", "concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year", "concert_ID", "Singer_ID"]}, "db_foreign_keys": {"column_id": [18, 21, 20], "other_column_id": [1, 8, 15]}, "schema_length": 367, "description_length": 684}, {"prediction": "world_1 | select name from country where indepyear > 1950", "query": "SELECT Name FROM country WHERE IndepYear  >  1950", "question": "What are the names of all the countries that became independent after 1950?", "context": "What are the names of all the countries that became independent after 1950? | world_1 | city : id, name ( Independence ), countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage | description | city: inhabited place of greater size, population, or importance than a town or village; country: nation with its government, occupying a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. indepyear is the year of independence. surfacearea is the surface area of the country. lifeexpectancy is life expectancy in number of years. gnp is the gross national product. localname is the local name of the country. governmentform is government form of the country; countrylanguage: languages used within a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language within the country;", "label": "world_1 | select name from country where indepyear > 1950", "db_id": "world_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["city", "sqlite_sequence", "country", "countrylanguage"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "ID", "Name", "CountryCode", "District", "Population", "name", "seq", "Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2", "CountryCode", "Language", "IsOfficial", "Percentage"]}, "db_foreign_keys": {"column_id": [3, 23], "other_column_id": [8, 8]}, "schema_length": 379, "description_length": 900}, {"prediction": "world_1 | select name, indepyear, surfacearea from country order by population limit 1", "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "question": "What are the name, independence year, and surface area of the country with the smallest population?", "context": "What are the name, independence year, and surface area of the country with the smallest population? | world_1 | city : id, name ( Independence ), countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage | description | city: inhabited place of greater size, population, or importance than a town or village; country: nation with its government, occupying a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. indepyear is the year of independence. surfacearea is the surface area of the country. lifeexpectancy is life expectancy in number of years. gnp is the gross national product. localname is the local name of the country. governmentform is government form of the country; countrylanguage: languages used within a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language within the country;", "label": "world_1 | select name, surfacearea, indepyear from country order by population limit 1", "db_id": "world_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["city", "sqlite_sequence", "country", "countrylanguage"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "ID", "Name", "CountryCode", "District", "Population", "name", "seq", "Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2", "CountryCode", "Language", "IsOfficial", "Percentage"]}, "db_foreign_keys": {"column_id": [3, 23], "other_column_id": [8, 8]}, "schema_length": 379, "description_length": 900}, {"prediction": "world_1 | select name, indepyear, surfacearea from country order by population limit 1", "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "context": "Give the name, year of independence, and surface area of the country that has the lowest population. | world_1 | city : id, name ( Independence ), countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage | description | city: inhabited place of greater size, population, or importance than a town or village; country: nation with its government, occupying a particular territory. continent is any of the world's main continuous expanses of land. region is an area, especially a part of a country or the world having definable characteristics. indepyear is the year of independence. surfacearea is the surface area of the country. lifeexpectancy is life expectancy in number of years. gnp is the gross national product. localname is the local name of the country. governmentform is government form of the country; countrylanguage: languages used within a country. country_code is a code representing a specific country. isofficial is 'T' if it is the official language otherwise if the language is not official, it is 'N'. percentage is the percentage of people who speak this language within the country;", "label": "world_1 | select name, surfacearea, indepyear from country order by population limit 1", "db_id": "world_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["city", "sqlite_sequence", "country", "countrylanguage"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], "column_name": ["*", "ID", "Name", "CountryCode", "District", "Population", "name", "seq", "Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2", "CountryCode", "Language", "IsOfficial", "Percentage"]}, "db_foreign_keys": {"column_id": [3, 23], "other_column_id": [8, 8]}, "schema_length": 379, "description_length": 900}, {"prediction": "tvshow | select t1.title, t1.directed_by from cartoon as t1 join tv_series as t2 on t1.id =", "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "question": "list all cartoon titles and their directors ordered by their air date", "context": "list all cartoon titles and their directors ordered by their air date | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel | description | tv_channel: channel over which a television station or television network. series_name is the name of the program. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv is 'yes' if the viewer pay per view, otherwise it is 'no'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. share is the number of people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the scheduled date of a broadcast as datetime. channel is the number of the channel;", "label": "tvshow | select title, directed_by from cartoon order by original_air_date", "db_id": "tvshow", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["TV_Channel", "TV_series", "Cartoon"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], "column_name": ["*", "id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option", "id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel", "id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "db_foreign_keys": {"column_id": [18, 25], "other_column_id": [1, 1]}, "schema_length": 389, "description_length": 973}, {"prediction": "tvshow | select t1.title, t1.directed_by from cartoon as t1 join tv_series as t2 on t2.id = t1.id order by t2.air_date", "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "question": "What is the name and directors of all the cartoons that are ordered by air date?", "context": "What is the name and directors of all the cartoons that are ordered by air date? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel | description | tv_channel: channel over which a television station or television network. series_name is the name of the program. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv is 'yes' if the viewer pay per view, otherwise it is 'no'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. share is the number of people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the scheduled date of a broadcast as datetime. channel is the number of the channel;", "label": "tvshow | select title, directed_by from cartoon order by original_air_date", "db_id": "tvshow", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["TV_Channel", "TV_series", "Cartoon"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], "column_name": ["*", "id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option", "id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel", "id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "db_foreign_keys": {"column_id": [18, 25], "other_column_id": [1, 1]}, "schema_length": 389, "description_length": 973}, {"prediction": "tvshow | select t1.channel, t1.id from cartoon as t1 join tv_channel as t2 on t1.channel = t2.id group by t1.channel order by count(*) desc limit 1", "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "question": "What is the produdction code and channel of the most recent cartoon ?", "context": "What is the produdction code and channel of the most recent cartoon? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel | description | tv_channel: channel over which a television station or television network. series_name is the name of the program. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv is 'yes' if the viewer pay per view, otherwise it is 'no'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. share is the number of people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the scheduled date of a broadcast as datetime. channel is the number of the channel;", "label": "tvshow | select production_code, channel from cartoon order by original_air_date desc limit 1", "db_id": "tvshow", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["TV_Channel", "TV_series", "Cartoon"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], "column_name": ["*", "id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option", "id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel", "id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "db_foreign_keys": {"column_id": [18, 25], "other_column_id": [1, 1]}, "schema_length": 389, "description_length": 973}, {"prediction": "tvshow | select air_date from tv_series where episode = \"A love of a Lifetime\"", "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "context": "What is the air date of TV series with Episode \"A Love of a Lifetime\"? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel | description | tv_channel: channel over which a television station or television network. series_name is the name of the program. pixel_aspect_ratio_par is the ratio that describes how the width of a pixel in a digital image compares to the height of that pixel. hight_definition_tv is 'yes' if the TV channel that has high definition TV, otherwise if the TV channel does not high definition, it is 'no'. pay_per_view_ppv is 'yes' if the viewer pay per view, otherwise it is 'no'. tv_series: episode is the name of the episode. air_date is the scheduled date of a broadcast as a datetime. share is the number of people watched the show. 18_49_rating_share is the ratio of the rating share for those aged 18 years and 49 years; cartoon: animation. directed_by is the name of the person who directed cartoon. written_by is the name of the person who wrote the cartoon. original_air_date is the scheduled date of a broadcast as datetime. channel is the number of the channel;", "label": "tvshow | select air_date from tv_series where episode = \"A love of a Lifetime\";", "db_id": "tvshow", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["TV_Channel", "TV_series", "Cartoon"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], "column_name": ["*", "id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option", "id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel", "id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "db_foreign_keys": {"column_id": [18, 25], "other_column_id": [1, 1]}, "schema_length": 414, "description_length": 973}, {"prediction": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.orchestr", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "context": "Please show the name of the conductor that has conducted orchestras founded after 2008. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;", "label": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008", "db_id": "orchestra", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}, "schema_length": 425, "description_length": 908}, {"prediction": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.orchestr", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "context": "What are the names of conductors who have conducted orchestras founded after the year 2008? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;", "label": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008", "db_id": "orchestra", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}, "schema_length": 425, "description_length": 908}]